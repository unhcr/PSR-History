--
-- QRY_ASR_POC_SUMMARY_EN
--
create materialized view QRY_ASR_POC_SUMMARY_EN as
with Q_POC_SUMMARY as
 (select ASR_YEAR, LOC_ID_RESIDENCE, LOC_ID_ORIGIN,
    REFPOP_VALUE, ASYPOP_VALUE,
    greatest(nvl(VOLREP_VALUE, REFRTN_VALUE), nvl(REFRTN_VALUE, VOLREP_VALUE)) as REFRTN_VALUE,
    IDPHPOP_VALUE, IDPHRTN_VALUE, STAPOP_VALUE, OOCPOP_VALUE
  from
   (select to_char(extract(year from STC.START_DATE)) as ASR_YEAR,
      case
        when STC.STCT_CODE in ('VOLREP', 'REFRTN') then STC.LOC_ID_ORIGIN_COUNTRY
        else STC.LOC_ID_ASYLUM_COUNTRY
      end as LOC_ID_RESIDENCE,
      case
        when STC.STCT_CODE in ('VOLREP', 'REFRTN') then STC.LOC_ID_ASYLUM_COUNTRY
        else STC.LOC_ID_ORIGIN_COUNTRY
      end as LOC_ID_ORIGIN,
      STC.STCT_CODE,
      VALUE
    from T_STATISTICS STC
    where extract(day from STC.END_DATE) = 1
    and STC.STCT_CODE in
     ('REFPOP', 'ASYPOP', 'VOLREP', 'REFRTN', 'IDPHPOP', 'IDPHRTN', 'STAPOP', 'OOCPOP')
    and nvl(STC.DIM_ID1, -1) !=
     (select ID
      from T_DIMENSION_VALUES
      where DIMT_CODE = 'OFFICIAL'
      and CODE = 'N'))
  pivot
   (sum(VALUE) as VALUE
    for STCT_CODE
    in ('REFPOP' as REFPOP,
        'ASYPOP' as ASYPOP,
        'VOLREP' as VOLREP,
        'REFRTN' as REFRTN,
        'IDPHPOP' as IDPHPOP,
        'IDPHRTN' as IDPHRTN,
        'STAPOP' as STAPOP,
        'OOCPOP' as OOCPOP))),
--
Q_COUNTRIES_EN as
 (select LOC.ID, LOCA.CHAR_VALUE as ISO3166_ALPHA3_CODE, TXT.TEXT as NAME_EN
  from T_LOCATIONS LOC
  inner join T_LOCATION_ATTRIBUTES LOCA
    on LOCA.LOC_ID = LOC.ID
    and LOCA.LOCAT_CODE = 'ISO3166A3'
  inner join T_TEXT_ITEMS TXT
    on TXT.ITM_ID = LOC.ITM_ID
    and TXT.TXTT_CODE = 'NAME'
    and TXT.SEQ_NBR = 1
    and TXT.LANG_CODE = 'en')
--
select SUM.ASR_YEAR,
  COU1.ISO3166_ALPHA3_CODE as COU_CODE_RESIDENCE,
  COU1.NAME_EN as COU_NAME_RESIDENCE_EN,
  COU2.ISO3166_ALPHA3_CODE as COU_CODE_ORIGIN,
  nvl(COU2.NAME_EN, 'Various') as COU_NAME_ORIGIN_EN,
  SUM.REFPOP_VALUE, SUM.ASYPOP_VALUE, SUM.REFRTN_VALUE, SUM.IDPHPOP_VALUE, SUM.IDPHRTN_VALUE,
  SUM.STAPOP_VALUE, SUM.OOCPOP_VALUE
from Q_POC_SUMMARY SUM
inner join Q_COUNTRIES_EN COU1
  on COU1.ID = SUM.LOC_ID_RESIDENCE
left outer join Q_COUNTRIES_EN COU2
  on COU2.ID = SUM.LOC_ID_ORIGIN;

create index IX_QPOCSE_YEAR on QRY_ASR_POC_SUMMARY_EN (ASR_YEAR);
create index IX_QPOCSE_COU_RES on QRY_ASR_POC_SUMMARY_EN (COU_CODE_RESIDENCE);
create index IX_QPOCSE_COU_OGN on QRY_ASR_POC_SUMMARY_EN (COU_CODE_ORIGIN);


--
-- QRY_ASR_POC_DETAILS_EN
--
create materialized view QRY_ASR_POC_DETAILS_EN as
select ASR_YEAR,
  COU_CODE_RESIDENCE, COU_NAME_RESIDENCE_EN,
  COU_CODE_ORIGIN, COU_NAME_ORIGIN_EN,
  substr(POPULATION_TYPE, 2) as POPULATION_TYPE_EN,
  to_number(substr(POPULATION_TYPE, 1, 1)) as POPULATION_TYPE_SEQ,
  VALUE
from QRY_ASR_POC_SUMMARY_EN
unpivot
 (VALUE for POPULATION_TYPE in
   (REFPOP_VALUE as '1Refugees',
    ASYPOP_VALUE as '2Asylum seekers',
    REFRTN_VALUE as '3Returned refugees',
    IDPHPOP_VALUE as '4IDPs',
    IDPHRTN_VALUE as '5Returned IDPs',
    STAPOP_VALUE as '6Stateless',
    OOCPOP_VALUE as '7Others of concern'));

create index IX_QPOCDE_YEAR on QRY_ASR_POC_DETAILS_EN (ASR_YEAR);
create index IX_QPOCDE_COU_RES on QRY_ASR_POC_DETAILS_EN (COU_CODE_RESIDENCE);
create index IX_QPOCDE_COU_OGN on QRY_ASR_POC_DETAILS_EN (COU_CODE_ORIGIN);


--
-- QRY_ASR_DEMOGRAPHICS_EN
--
create materialized view QRY_ASR_DEMOGRAPHICS_EN as
with Q_DEMOGRAPHICS as
 (select ASR_YEAR, DST_ID, LOC_ID_ASYLUM_COUNTRY, LOC_ID_ASYLUM, LOC_ID_ORIGIN_COUNTRY,
    F0_VALUE, F5_VALUE, F12_VALUE, F18_VALUE, F60_VALUE,
    case when STCT_CODE = 'POCPOPS' then FOTHER_VALUE end as FOTHER_VALUE,
    case
      when STCT_CODE in ('POCPOPS', 'POCPOPAS')
      then nvl(F0_VALUE, 0) + nvl(F5_VALUE, 0) + nvl(F12_VALUE, 0) +
        nvl(F18_VALUE, 0) + nvl(F60_VALUE, 0) + nvl(FOTHER_VALUE, 0)
    end as FTOTAL_VALUE,
    M0_VALUE, M5_VALUE, M12_VALUE, M18_VALUE, M60_VALUE,
    case when STCT_CODE = 'POCPOPS' then MOTHER_VALUE end as MOTHER_VALUE,
    case
      when STCT_CODE in ('POCPOPS', 'POCPOPAS')
      then nvl(M0_VALUE, 0) + nvl(M5_VALUE, 0) + nvl(M12_VALUE, 0) +
        nvl(M18_VALUE, 0) + nvl(M60_VALUE, 0) + nvl(MOTHER_VALUE, 0)
    end as MTOTAL_VALUE,
    case
      when STCT_CODE = 'POCPOPN' then TOTAL_VALUE
      else nvl(F0_VALUE, 0) + nvl(F5_VALUE, 0) + nvl(F12_VALUE, 0) +
        nvl(F18_VALUE, 0) + nvl(F60_VALUE, 0) + nvl(FOTHER_VALUE, 0) +
        nvl(M0_VALUE, 0) + nvl(M5_VALUE, 0) + nvl(M12_VALUE, 0) +
        nvl(M18_VALUE, 0) + nvl(M60_VALUE, 0) + nvl(MOTHER_VALUE, 0)
    end as TOTAL_VALUE
  from
   (select extract(year from STC.START_DATE) as ASR_YEAR, STC.STCT_CODE, STC.DST_ID,
      STC.LOC_ID_ASYLUM_COUNTRY, STC.LOC_ID_ASYLUM, STC.LOC_ID_ORIGIN_COUNTRY,
      STC.SEX_CODE || nvl(to_char(AGR.AGE_FROM), 'X') as DATA_POINT,
      STC.VALUE
    from T_STATISTIC_TYPES_IN_GROUPS STTIG
    inner join T_STATISTICS STC
      on STC.STCT_CODE = STTIG.STCT_CODE
    left outer join T_AGE_RANGES AGR
      on AGR.ID = STC.AGR_ID
    where STTIG.STTG_CODE = 'DEMOGR')
  pivot
   (sum(VALUE) as VALUE
    for DATA_POINT
    in ('F0' as F0, 'F5' as F5, 'F12' as F12, 'F18' as F18, 'F60' as F60, 'FX' as FOTHER,
        'M0' as M0, 'M5' as M5, 'M12' as M12, 'M18' as M18, 'M60' as M60, 'MX' as MOTHER,
        'X' as TOTAL))),
--
Q_DISPLACEMENT_STATUSES_EN as
 (select DST.ID, DST.CODE, TXT.TEXT as DESCRIPTION_EN
  from T_DISPLACEMENT_STATUSES DST
  inner join T_TEXT_ITEMS TXT
    on TXT.ITM_ID = DST.ITM_ID
    and TXT.TXTT_CODE = 'DESCR'
    and TXT.SEQ_NBR = 1
    and TXT.LANG_CODE = 'en'),
--
Q_COUNTRIES_EN as
 (select LOC.ID, LOCA.CHAR_VALUE as ISO3166_ALPHA3_CODE, TXT.TEXT as NAME_EN
  from T_LOCATIONS LOC
  inner join T_LOCATION_ATTRIBUTES LOCA
    on LOCA.LOC_ID = LOC.ID
    and LOCA.LOCAT_CODE = 'ISO3166A3'
  inner join T_TEXT_ITEMS TXT
    on TXT.ITM_ID = LOC.ITM_ID
    and TXT.TXTT_CODE = 'NAME'
    and TXT.SEQ_NBR = 1
    and TXT.LANG_CODE = 'en'),
--
Q_LOCATIONS_EN as
 (select LOC.ID, LOC.LOCT_CODE, TXT1.TEXT as NAME_EN, nvl(TXT3.TEXT, TXT2.TEXT) as LOCATION_TYPE_EN
  from T_LOCATIONS LOC
  inner join T_TEXT_ITEMS TXT1
    on TXT1.ITM_ID = LOC.ITM_ID
    and TXT1.TXTT_CODE = 'NAME'
    and TXT1.SEQ_NBR = 1
    and TXT1.LANG_CODE = 'en'
  inner join T_LOCATION_TYPES LOCT
    on LOCT.CODE = LOC.LOCT_CODE
  inner join T_TEXT_ITEMS TXT2
    on TXT2.ITM_ID = LOCT.ITM_ID
    and TXT2.TXTT_CODE = 'DESCR'
    and TXT2.SEQ_NBR = 1
    and TXT2.LANG_CODE = 'en'
  left outer join T_LOCATION_TYPE_VARIANTS LOCTV
    on LOCTV.ID = LOC.LOCTV_ID
  left outer join T_TEXT_ITEMS TXT3
    on TXT3.ITM_ID = LOCTV.ITM_ID
    and TXT3.TXTT_CODE = 'DESCR'
    and TXT3.SEQ_NBR = 1
    and TXT3.LANG_CODE = 'en')
--
select ASR_YEAR,
  COU_CODE_RESIDENCE, COU_NAME_RESIDENCE_EN,
  case
    when LOCT_CODE = 'ADMIN0' then LOCATION_TYPE_EN
    when LOC_COUNT > 1 then LOC_NAME_RESIDENCE_EN || ' (' || LOCATION_TYPE_EN || ')'
    else LOC_NAME_RESIDENCE_EN
  end as LOC_NAME_RESIDENCE_EN,
  COU_CODE_ORIGIN, COU_NAME_ORIGIN_EN,
  DST_CODE, DST_DESCRIPTION_EN,
  F0_VALUE, F5_VALUE, F12_VALUE, F18_VALUE, F60_VALUE, FOTHER_VALUE, FTOTAL_VALUE,
  M0_VALUE, M5_VALUE, M12_VALUE, M18_VALUE, M60_VALUE, MOTHER_VALUE, MTOTAL_VALUE, TOTAL_VALUE
from
 (select DEM.ASR_YEAR,
    COU1.ISO3166_ALPHA3_CODE as COU_CODE_RESIDENCE, COU1.NAME_EN as COU_NAME_RESIDENCE_EN,
    LOC.NAME_EN as LOC_NAME_RESIDENCE_EN,
    LOC.LOCT_CODE, LOC.LOCATION_TYPE_EN,
    count(distinct DEM.LOC_ID_ASYLUM) over
      (partition by DEM.ASR_YEAR, COU1.ISO3166_ALPHA3_CODE, LOC.NAME_EN) as LOC_COUNT,
    COU2.ISO3166_ALPHA3_CODE as COU_CODE_ORIGIN, nvl(COU2.NAME_EN, 'Various') as COU_NAME_ORIGIN_EN,
    DST.CODE as DST_CODE, DST.DESCRIPTION_EN as DST_DESCRIPTION_EN,
    sum(DEM.F0_VALUE) as F0_VALUE, sum(DEM.F5_VALUE) as F5_VALUE, sum(DEM.F12_VALUE) as F12_VALUE,
    sum(DEM.F18_VALUE) as F18_VALUE, sum(DEM.F60_VALUE) as F60_VALUE,
    sum(DEM.FOTHER_VALUE) as FOTHER_VALUE, sum(DEM.FTOTAL_VALUE) as FTOTAL_VALUE,
    sum(DEM.M0_VALUE) as M0_VALUE, sum(DEM.M5_VALUE) as M5_VALUE, sum(DEM.M12_VALUE) as M12_VALUE,
    sum(DEM.M18_VALUE) as M18_VALUE, sum(DEM.M60_VALUE) as M60_VALUE,
    sum(DEM.MOTHER_VALUE) as MOTHER_VALUE, sum(DEM.MTOTAL_VALUE) as MTOTAL_VALUE,
    sum(DEM.TOTAL_VALUE) as TOTAL_VALUE
  from Q_DEMOGRAPHICS DEM
  inner join Q_COUNTRIES_EN COU1
    on COU1.ID = DEM.LOC_ID_ASYLUM_COUNTRY
  inner join Q_LOCATIONS_EN LOC
    on LOC.ID = DEM.LOC_ID_ASYLUM
  left outer join Q_COUNTRIES_EN COU2
    on COU2.ID = DEM.LOC_ID_ORIGIN_COUNTRY
  inner join Q_DISPLACEMENT_STATUSES_EN DST
    on DST.ID = DEM.DST_ID
  group by DEM.ASR_YEAR, COU1.ISO3166_ALPHA3_CODE, COU1.NAME_EN,
    LOC.NAME_EN, LOC.LOCT_CODE, LOC.LOCATION_TYPE_EN, DEM.LOC_ID_ASYLUM,
    COU2.ISO3166_ALPHA3_CODE, COU2.NAME_EN,
    DST.CODE, DST.DESCRIPTION_EN);

create index IX_QDEME_YEAR on QRY_ASR_DEMOGRAPHICS_EN (ASR_YEAR);
create index IX_QDEME_COU_RES on QRY_ASR_DEMOGRAPHICS_EN (COU_CODE_RESIDENCE);
create index IX_QDEME_COU_OGN on QRY_ASR_DEMOGRAPHICS_EN (COU_CODE_ORIGIN);


--
-- QRY_ASR_RSD_EN
--
create materialized view QRY_ASR_RSD_EN as
with Q_RSD as
 (select ASR_YEAR, LOC_ID_ASYLUM_COUNTRY, LOC_ID_ORIGIN_COUNTRY, DIM_ID1, DIM_ID2,
    ASYPOP_START_VALUE, ASYPOP_AH_START_VALUE,
    ASYAPP_VALUE, ASYREC_CV_VALUE, ASYREC_CP_VALUE, ASYREJ_VALUE, ASYOTHCL_VALUE,
    ASYPOP_END_VALUE, ASYPOP_AH_END_VALUE
  from
   (select extract(year from STC.START_DATE) as ASR_YEAR,
      STC.LOC_ID_ASYLUM_COUNTRY, STC.LOC_ID_ORIGIN_COUNTRY,
      STC.DIM_ID1, STC.DIM_ID2,
      replace(STC.STCT_CODE, '-', '_') ||
        case
          when extract(day from STC.END_DATE) = 2 then '_START'
          when extract(day from STC.START_DATE) = 31 then '_END'
        end as DATA_POINT,
      STC.VALUE
    from T_STATISTIC_TYPES_IN_GROUPS STTIG
    inner join T_STATISTICS STC
      on STC.STCT_CODE = STTIG.STCT_CODE
    left outer join T_AGE_RANGES AGR
      on AGR.ID = STC.AGR_ID
    where STTIG.STTG_CODE = 'RSD')
  pivot
   (sum(VALUE) as VALUE
    for DATA_POINT
    in ('ASYPOP_START' as ASYPOP_START,
        'ASYPOP_AH_START' as ASYPOP_AH_START,
        'ASYAPP' as ASYAPP,
        'ASYREC_CV' as ASYREC_CV,
        'ASYREC_CP' as ASYREC_CP,
        'ASYREJ' as ASYREJ,
        'ASYOTHCL' as ASYOTHCL,
        'ASYPOP_END' as ASYPOP_END,
        'ASYPOP_AH_END' as ASYPOP_AH_END))),
--
Q_COUNTRIES_EN as
 (select LOC.ID, LOCA.CHAR_VALUE as ISO3166_ALPHA3_CODE, TXT.TEXT as NAME_EN
  from T_LOCATIONS LOC
  inner join T_LOCATION_ATTRIBUTES LOCA
    on LOCA.LOC_ID = LOC.ID
    and LOCA.LOCAT_CODE = 'ISO3166A3'
  inner join T_TEXT_ITEMS TXT
    on TXT.ITM_ID = LOC.ITM_ID
    and TXT.TXTT_CODE = 'NAME'
    and TXT.SEQ_NBR = 1
    and TXT.LANG_CODE = 'en'),
--
Q_DIMENSION_VALUES_EN as
 (select DIM.ID, DIM.CODE, TXT.TEXT DESCRIPTION_EN
  from T_DIMENSION_VALUES DIM
  inner join T_TEXT_ITEMS TXT
    on TXT.ITM_ID = DIM.ITM_ID
    and TXT.TXTT_CODE = 'DESCR'
    and TXT.SEQ_NBR = 1
    and TXT.LANG_CODE = 'en')
--
select RSD.ASR_YEAR,
  RSD.LOC_ID_ASYLUM_COUNTRY,
  COU1.ISO3166_ALPHA3_CODE as COU_CODE_ASYLUM, COU1.NAME_EN as COU_NAME_ASYLUM_EN,
  RSD.LOC_ID_ORIGIN_COUNTRY,
  COU2.ISO3166_ALPHA3_CODE as COU_CODE_ORIGIN, COU2.NAME_EN as COU_NAME_ORIGIN_EN,
  DIM1.CODE as RSD_PROC_TYPE_CODE, DIM1.DESCRIPTION_EN as RSD_PROC_TYPE_DESCRIPTION_EN,
  DIM2.CODE as RSD_PROC_LEVEL_CODE, DIM2.DESCRIPTION_EN as RSD_PROC_LEVEL_DESCRIPTION_EN,
  RSD.ASYPOP_START_VALUE, RSD.ASYPOP_AH_START_VALUE,
  RSD.ASYAPP_VALUE, RSD.ASYREC_CV_VALUE, RSD.ASYREC_CP_VALUE, RSD.ASYREJ_VALUE, RSD.ASYOTHCL_VALUE,
  RSD.ASYPOP_END_VALUE, RSD.ASYPOP_AH_END_VALUE
from Q_RSD RSD
inner join Q_COUNTRIES_EN COU1
  on COU1.ID = RSD.LOC_ID_ASYLUM_COUNTRY
inner join Q_COUNTRIES_EN COU2
  on COU2.ID = RSD.LOC_ID_ORIGIN_COUNTRY
inner join Q_DIMENSION_VALUES_EN DIM1
  on DIM1.ID = RSD.DIM_ID1
inner join Q_DIMENSION_VALUES_EN DIM2
  on DIM2.ID = RSD.DIM_ID2;

create index IX_QRSDE_YEAR on QRY_ASR_RSD_EN (ASR_YEAR);
create index IX_QRSDE_COU_ASY on QRY_ASR_RSD_EN (COU_CODE_ASYLUM);
create index IX_QRSDE_COU_OGN on QRY_ASR_RSD_EN (COU_CODE_ORIGIN);