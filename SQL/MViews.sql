--
-- QRY_ASR_POC_SUMMARY_EN
--
create materialized view QRY_ASR_POC_SUMMARY_EN as
with Q_POC_SUMMARY as
 (select ASR_YEAR, LOC_ID_ASYLUM_COUNTRY, LOC_ID_ORIGIN_COUNTRY,
    REFPOP_VALUE, ASYPOP_VALUE,
    greatest(nvl(VOLREP_VALUE, REFRTN_VALUE), nvl(REFRTN_VALUE, VOLREP_VALUE)) as REFRTN_VALUE,
    IDPHPOP_VALUE, IDPHRTN_VALUE, STAPOP_VALUE, OOCPOP_VALUE
  from
   (select to_char(extract(year from STC.START_DATE)) as ASR_YEAR,
      case
        when STC.STCT_CODE in ('VOLREP', 'REFRTN') then STC.LOC_ID_ORIGIN_COUNTRY
        else STC.LOC_ID_ASYLUM_COUNTRY
      end as LOC_ID_ASYLUM_COUNTRY,
      case
        when STC.STCT_CODE in ('VOLREP', 'REFRTN') then STC.LOC_ID_ASYLUM_COUNTRY
        else STC.LOC_ID_ORIGIN_COUNTRY
      end as LOC_ID_ORIGIN_COUNTRY,
      STC.STCT_CODE,
      VALUE
    from T_STATISTICS STC
    where extract(day from STC.END_DATE) = 1
    and STC.STCT_CODE in
     ('REFPOP', 'ASYPOP', 'VOLREP', 'REFRTN', 'IDPHPOP', 'IDPHRTN', 'STAPOP', 'OOCPOP')
    and nvl(STC.DIM_ID1, -1) !=
     (select ID
      from T_DIMENSION_VALUES
      where DIMT_CODE = 'OFFICIAL'
      and CODE = 'N'))
  pivot
   (sum(VALUE) as VALUE
    for STCT_CODE
    in ('REFPOP' as REFPOP,
        'ASYPOP' as ASYPOP,
        'VOLREP' as VOLREP,
        'REFRTN' as REFRTN,
        'IDPHPOP' as IDPHPOP,
        'IDPHRTN' as IDPHRTN,
        'STAPOP' as STAPOP,
        'OOCPOP' as OOCPOP))),
--
Q_LOCATIONS_EN as
 (select LOC.ID, TXT.TEXT as NAME_EN
  from T_LOCATIONS LOC
  inner join T_TEXT_ITEMS TXT
    on TXT.ITM_ID = LOC.ITM_ID
    and TXT.TXTT_CODE = 'NAME'
    and TXT.SEQ_NBR = 1
    and TXT.LANG_CODE = 'en')
--
select SUM.ASR_YEAR,
  SUM.LOC_ID_ASYLUM_COUNTRY, LOC1.NAME_EN as LOC_NAME_ASYLUM_COUNTRY_EN,
  SUM.LOC_ID_ORIGIN_COUNTRY, LOC2.NAME_EN as LOC_NAME_ORIGIN_COUNTRY_EN,
  SUM.REFPOP_VALUE, SUM.ASYPOP_VALUE, SUM.REFRTN_VALUE, SUM.IDPHPOP_VALUE, SUM.IDPHRTN_VALUE,
  SUM.STAPOP_VALUE, SUM.OOCPOP_VALUE
from Q_POC_SUMMARY SUM
inner join Q_LOCATIONS_EN LOC1
  on LOC1.ID = SUM.LOC_ID_ASYLUM_COUNTRY
inner join Q_LOCATIONS_EN LOC2
  on LOC2.ID = SUM.LOC_ID_ORIGIN_COUNTRY;

create index IX_QPOCSE_YEAR on QRY_ASR_POC_SUMMARY_EN (ASR_YEAR);
create index IX_QPOCSE_LOC_ASY on QRY_ASR_POC_SUMMARY_EN (LOC_ID_ASYLUM_COUNTRY);
create index IX_QPOCSE_LOC_ORG on QRY_ASR_POC_SUMMARY_EN (LOC_ID_ORIGIN_COUNTRY);


--
-- QRY_ASR_POC_DETAILS_EN
--
create materialized view QRY_ASR_POC_DETAILS_EN as
select ASR_YEAR,
  LOC_ID_ASYLUM_COUNTRY, LOC_NAME_ASYLUM_COUNTRY_EN,
  LOC_ID_ORIGIN_COUNTRY, LOC_NAME_ORIGIN_COUNTRY_EN,
  POPULATION_TYPE, VALUE
from QRY_ASR_POC_SUMMARY_EN
unpivot
 (VALUE for POPULATION_TYPE in
   (REFPOP_VALUE as 'Refugees',
    ASYPOP_VALUE as 'Asylum seekers',
    REFRTN_VALUE as 'Returned refugees',
    IDPHPOP_VALUE as 'IDPs',
    IDPHRTN_VALUE as 'Returned IDPs',
    STAPOP_VALUE as 'Stateless',
    OOCPOP_VALUE as 'Others of concern'));

create index IX_QPOCDE_YEAR on QRY_ASR_POC_DETAILS_EN (ASR_YEAR);
create index IX_QPOCDE_LOC_ASY on QRY_ASR_POC_DETAILS_EN (LOC_ID_ASYLUM_COUNTRY);
create index IX_QPOCDE_LOC_OGN on QRY_ASR_POC_DETAILS_EN (LOC_ID_ORIGIN_COUNTRY);
create index IX_QPOCDE_POPT on QRY_ASR_POC_DETAILS_EN (POPULATION_TYPE);


--
-- QRY_ASR_DEMOGRAPHICS_EN
--
create materialized view QRY_ASR_DEMOGRAPHICS_EN as
with Q_DEMOGRAPHICS as
 (select ASR_YEAR, STCT_CODE, DST_ID,
    LOC_ID_ASYLUM_COUNTRY, LOC_ID_ASYLUM, LOC_ID_ORIGIN_COUNTRY, AGP_CODE,
    F0_VALUE, F5_VALUE, F12_VALUE, F18_VALUE, F60_VALUE, FOTHER_VALUE,
    M0_VALUE, M5_VALUE, M12_VALUE, M18_VALUE, M60_VALUE, MOTHER_VALUE,
    TOTAL_VALUE
  from
   (select extract(year from STC.START_DATE) as ASR_YEAR, STC.STCT_CODE, STC.DST_ID,
      STC.LOC_ID_ASYLUM_COUNTRY, STC.LOC_ID_ASYLUM, STC.LOC_ID_ORIGIN_COUNTRY,
      AGR.AGP_CODE,
      STC.SEX_CODE || nvl(to_char(AGR.AGE_FROM), 'X') as DATA_POINT,
      STC.VALUE
    from T_STATISTIC_TYPES_IN_GROUPS STTIG
    inner join T_STATISTICS STC
      on STC.STCT_CODE = STTIG.STCT_CODE
    left outer join T_AGE_RANGES AGR
      on AGR.ID = STC.AGR_ID
    where STTIG.STTG_CODE = 'DEMOGR')
  pivot
   (sum(VALUE) as VALUE
    for DATA_POINT
    in ('F0' as F0, 'F5' as F5, 'F12' as F12, 'F18' as F18, 'F60' as F60, 'FX' as FOTHER,
        'M0' as M0, 'M5' as M5, 'M12' as M12, 'M18' as M18, 'M60' as M60, 'MX' as MOTHER,
        'X' as TOTAL))),
--
Q_DISPLACEMENT_STATUSES_EN as
 (select DST.ID, TXT.TEXT DESCRIPTION_EN
  from T_DISPLACEMENT_STATUSES DST
  inner join T_TEXT_ITEMS TXT
    on TXT.ITM_ID = DST.ITM_ID
    and TXT.TXTT_CODE = 'DESCR'
    and TXT.SEQ_NBR = 1
    and TXT.LANG_CODE = 'en'),
--
Q_LOCATIONS_EN as
 (select LOC.ID, TXT.TEXT as NAME_EN
  from T_LOCATIONS LOC
  inner join T_TEXT_ITEMS TXT
    on TXT.ITM_ID = LOC.ITM_ID
    and TXT.TXTT_CODE = 'NAME'
    and TXT.SEQ_NBR = 1
    and TXT.LANG_CODE = 'en')
--
select DEM.ASR_YEAR,
  DEM.DST_ID, DST.DESCRIPTION_EN as DST_DESCRIPTION_EN,
  DEM.LOC_ID_ASYLUM_COUNTRY, LOC1.NAME_EN as LOC_NAME_ASYLUM_COUNTRY_EN,
  LOC2.NAME_EN as LOC_NAME_ASYLUM_EN,
  DEM.LOC_ID_ORIGIN_COUNTRY, LOC3.NAME_EN as LOC_NAME_ORIGIN_COUNTRY_EN,
  DEM.AGP_CODE,
  DEM.F0_VALUE, DEM.F5_VALUE, DEM.F12_VALUE, DEM.F18_VALUE, DEM.F60_VALUE,
  case when DEM.STCT_CODE = 'POCPOPAS' then DEM.FOTHER_VALUE end as FOTHER_VALUE,
  case
    when DEM.STCT_CODE in ('POCPOPS', 'POCPOPAS')
    then nvl(DEM.F0_VALUE, 0) + nvl(DEM.F5_VALUE, 0) + nvl(DEM.F12_VALUE, 0) +
      nvl(DEM.F18_VALUE, 0) + nvl(DEM.F60_VALUE, 0) + nvl(DEM.FOTHER_VALUE, 0)
  end as FTOTAL_VALUE,
  DEM.M0_VALUE, DEM.M5_VALUE, DEM.M12_VALUE, DEM.M18_VALUE, DEM.M60_VALUE,
  case when DEM.STCT_CODE = 'POCPOPAS' then DEM.MOTHER_VALUE end as MOTHER_VALUE,
  case
    when DEM.STCT_CODE in ('POCPOPS', 'POCPOPAS')
    then nvl(DEM.M0_VALUE, 0) + nvl(DEM.M5_VALUE, 0) + nvl(DEM.M12_VALUE, 0) +
      nvl(DEM.M18_VALUE, 0) + nvl(DEM.M60_VALUE, 0) + nvl(DEM.MOTHER_VALUE, 0)
  end as MTOTAL_VALUE,
  case
    when DEM.STCT_CODE = 'POCPOPN' then DEM.TOTAL_VALUE
    else nvl(DEM.F0_VALUE, 0) + nvl(DEM.F5_VALUE, 0) + nvl(DEM.F12_VALUE, 0) +
      nvl(DEM.F18_VALUE, 0) + nvl(DEM.F60_VALUE, 0) + nvl(DEM.FOTHER_VALUE, 0) +
      nvl(DEM.M0_VALUE, 0) + nvl(DEM.M5_VALUE, 0) + nvl(DEM.M12_VALUE, 0) +
      nvl(DEM.M18_VALUE, 0) + nvl(DEM.M60_VALUE, 0) + nvl(DEM.MOTHER_VALUE, 0)
  end as TOTAL_VALUE
from Q_DEMOGRAPHICS DEM
inner join Q_DISPLACEMENT_STATUSES_EN DST
  on DST.ID = DEM.DST_ID
inner join Q_LOCATIONS_EN LOC1
  on LOC1.ID = DEM.LOC_ID_ASYLUM_COUNTRY
inner join Q_LOCATIONS_EN LOC2
  on LOC2.ID = DEM.LOC_ID_ASYLUM
left outer join Q_LOCATIONS_EN LOC3
  on LOC3.ID = DEM.LOC_ID_ORIGIN_COUNTRY;

create index IX_QDEME_YEAR on QRY_ASR_DEMOGRAPHICS_EN (ASR_YEAR);
create index IX_QDEME_DST_ID on QRY_ASR_DEMOGRAPHICS_EN (DST_ID);
create index IX_QDEME_LOC_ASY on QRY_ASR_DEMOGRAPHICS_EN (LOC_ID_ASYLUM_COUNTRY);
create index IX_QDEME_LOC_OGN on QRY_ASR_DEMOGRAPHICS_EN (LOC_ID_ORIGIN_COUNTRY);


--
-- QRY_ASR_RSD_EN
--
create materialized view QRY_ASR_RSD_EN as
with Q_RSD as
 (select ASR_YEAR, LOC_ID_ASYLUM_COUNTRY, LOC_ID_ORIGIN_COUNTRY, DIM_ID1, DIM_ID2,
    ASYPOP_START_VALUE, ASYPOP_AH_START_VALUE,
    ASYAPP_VALUE, ASYREC_CV_VALUE, ASYREC_CP_VALUE, ASYREJ_VALUE, ASYOTHCL_VALUE,
    ASYPOP_END_VALUE, ASYPOP_AH_END_VALUE
  from
   (select extract(year from STC.START_DATE) as ASR_YEAR,
      STC.LOC_ID_ASYLUM_COUNTRY, STC.LOC_ID_ORIGIN_COUNTRY,
      STC.DIM_ID1, STC.DIM_ID2,
      replace(STC.STCT_CODE, '-', '_') ||
        case
          when extract(day from STC.END_DATE) = 2 then '_START'
          when extract(day from STC.START_DATE) = 31 then '_END'
        end as DATA_POINT,
      STC.VALUE
    from T_STATISTIC_TYPES_IN_GROUPS STTIG
    inner join T_STATISTICS STC
      on STC.STCT_CODE = STTIG.STCT_CODE
    left outer join T_AGE_RANGES AGR
      on AGR.ID = STC.AGR_ID
    where STTIG.STTG_CODE = 'RSD')
  pivot
   (sum(VALUE) as VALUE
    for DATA_POINT
    in ('ASYPOP_START' as ASYPOP_START,
        'ASYPOP_AH_START' as ASYPOP_AH_START,
        'ASYAPP' as ASYAPP,
        'ASYREC_CV' as ASYREC_CV,
        'ASYREC_CP' as ASYREC_CP,
        'ASYREJ' as ASYREJ,
        'ASYOTHCL' as ASYOTHCL,
        'ASYPOP_END' as ASYPOP_END,
        'ASYPOP_AH_END' as ASYPOP_AH_END))),
--
Q_LOCATIONS_EN as
 (select LOC.ID, TXT.TEXT as NAME_EN
  from T_LOCATIONS LOC
  inner join T_TEXT_ITEMS TXT
    on TXT.ITM_ID = LOC.ITM_ID
    and TXT.TXTT_CODE = 'NAME'
    and TXT.SEQ_NBR = 1
    and TXT.LANG_CODE = 'en'),
--
Q_DIMENSION_VALUES_EN as
 (select DIM.ID, TXT.TEXT DESCRIPTION_EN
  from T_DIMENSION_VALUES DIM
  inner join T_TEXT_ITEMS TXT
    on TXT.ITM_ID = DIM.ITM_ID
    and TXT.TXTT_CODE = 'DESCR'
    and TXT.SEQ_NBR = 1
    and TXT.LANG_CODE = 'en')
--
select RSD.ASR_YEAR,
  RSD.LOC_ID_ASYLUM_COUNTRY, LOC1.NAME_EN as LOC_NAME_ASYLUM_COUNTRY_EN,
  RSD.LOC_ID_ORIGIN_COUNTRY, LOC2.NAME_EN as LOC_NAME_ORIGIN_COUNTRY_EN,
  DIM1.DESCRIPTION_EN as RSD_PROC_TYPE_DESCRIPTION_EN,
  DIM2.DESCRIPTION_EN as RSD_LEVEL_DESCRIPTION_EN,
  RSD.ASYPOP_START_VALUE, RSD.ASYPOP_AH_START_VALUE,
  RSD.ASYAPP_VALUE, RSD.ASYREC_CV_VALUE, RSD.ASYREC_CP_VALUE, RSD.ASYREJ_VALUE, RSD.ASYOTHCL_VALUE,
  RSD.ASYPOP_END_VALUE, RSD.ASYPOP_AH_END_VALUE
from Q_RSD RSD
inner join Q_LOCATIONS_EN LOC1
  on LOC1.ID = RSD.LOC_ID_ASYLUM_COUNTRY
inner join Q_LOCATIONS_EN LOC2
  on LOC2.ID = RSD.LOC_ID_ORIGIN_COUNTRY
inner join Q_DIMENSION_VALUES_EN DIM1
  on DIM1.ID = RSD.DIM_ID1
inner join Q_DIMENSION_VALUES_EN DIM2
  on DIM2.ID = RSD.DIM_ID2;

create index IX_QRSDE_YEAR on QRY_ASR_RSD_EN (ASR_YEAR);
create index IX_QRSDE_LOC_ASY on QRY_ASR_RSD_EN (LOC_ID_ASYLUM_COUNTRY);
create index IX_QRSDE_LOC_OGN on QRY_ASR_RSD_EN (LOC_ID_ORIGIN_COUNTRY);