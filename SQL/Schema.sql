-- Generated by Oracle SQL Developer Data Modeler 3.1.1.703
--   at:        2012-10-23 14:22:34 CEST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



CREATE TABLE T_AGE_PROFILES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_AGE_PROFILES 
    ADD CONSTRAINT CH_AGP_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_AGE_PROFILES 
    ADD CONSTRAINT CH_AGP_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_AGE_PROFILES 
    ADD CONSTRAINT PK_AGP PRIMARY KEY ( CODE ) ;


ALTER TABLE T_AGE_PROFILES 
    ADD CONSTRAINT UK_AGP_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_AGE_RANGES 
    ( 
     ID INTEGER  NOT NULL , 
     AGP_CODE VARCHAR2 (10)  NOT NULL , 
     AGE_FROM NUMBER (3)  NOT NULL , 
     AGE_TO NUMBER (3)  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_AGE_RANGES 
    ADD CONSTRAINT CH_AGR_ID 
    CHECK ( ID > 0) 
;


ALTER TABLE T_AGE_RANGES 
    ADD CONSTRAINT CH_AGR 
    CHECK (AGE_TO >= AGE_FROM)
;


ALTER TABLE T_AGE_RANGES 
    ADD CONSTRAINT PK_AGR PRIMARY KEY ( ID ) ;


ALTER TABLE T_AGE_RANGES 
    ADD CONSTRAINT UK_AGR UNIQUE ( AGP_CODE , AGE_FROM ) ;


ALTER TABLE T_AGE_RANGES 
    ADD CONSTRAINT UK_AGR_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_COMPONENTS 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     MSG_SEQ_NBR_MAX INTEGER DEFAULT 0  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_COMPONENTS 
    ADD CONSTRAINT CH_COMP_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_COMPONENTS 
    ADD CONSTRAINT CH_COMP_MSG_SEQ_NBR_MAX 
    CHECK ( MSG_SEQ_NBR_MAX >= 0) 
;


ALTER TABLE T_COMPONENTS 
    ADD CONSTRAINT CH_COMP_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_COMPONENTS 
    ADD CONSTRAINT PK_COMP PRIMARY KEY ( CODE ) ;


ALTER TABLE T_COMPONENTS 
    ADD CONSTRAINT UK_COMP_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_DATA_ITEMS 
    ( 
     ID INTEGER  NOT NULL , 
     TAB_ALIAS VARCHAR2 (10)  NOT NULL 
    ) 
;



ALTER TABLE T_DATA_ITEMS 
    ADD CONSTRAINT PK_ITM PRIMARY KEY ( ID ) ;



CREATE TABLE T_DATA_ITEM_PERMISSIONS 
    ( 
     ITM_ID INTEGER  NOT NULL , 
     PRM_ID INTEGER  NOT NULL , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL 
    ) 
;



ALTER TABLE T_DATA_ITEM_PERMISSIONS 
    ADD CONSTRAINT PK_DIP PRIMARY KEY ( ITM_ID, PRM_ID ) ;


ALTER TABLE T_DATA_ITEM_PERMISSIONS 
    ADD CONSTRAINT UK_DIP UNIQUE ( PRM_ID , ITM_ID ) ;



CREATE TABLE T_DATA_ITEM_SOURCES 
    ( 
     ITM_ID INTEGER  NOT NULL , 
     SOU_ID INTEGER  NOT NULL 
    ) 
;



ALTER TABLE T_DATA_ITEM_SOURCES 
    ADD CONSTRAINT PK_DIS PRIMARY KEY ( ITM_ID, SOU_ID ) ;


ALTER TABLE T_DATA_ITEM_SOURCES 
    ADD CONSTRAINT UK_DIS UNIQUE ( SOU_ID , ITM_ID ) ;



CREATE TABLE T_DATA_SOURCES 
    ( 
     ID INTEGER  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_DATA_SOURCES 
    ADD CONSTRAINT CH_COU_ID 
    CHECK ( ID > 0) 
;


ALTER TABLE T_DATA_SOURCES 
    ADD CONSTRAINT PK_SOU PRIMARY KEY ( ID ) ;


ALTER TABLE T_DATA_SOURCES 
    ADD CONSTRAINT UK_SOU_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_DIMENSION_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_DIMENSION_TYPES 
    ADD CONSTRAINT CH_DIMT_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_DIMENSION_TYPES 
    ADD CONSTRAINT CH_DIMT_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_DIMENSION_TYPES 
    ADD CONSTRAINT PK_DIMT PRIMARY KEY ( CODE ) ;


ALTER TABLE T_DIMENSION_TYPES 
    ADD CONSTRAINT UK_DIMT_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_DIMENSION_VALUES 
    ( 
     ID INTEGER  NOT NULL , 
     DIMT_CODE VARCHAR2 (10)  NOT NULL , 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_DIMENSION_VALUES 
    ADD CONSTRAINT CH_DIM_ID 
    CHECK ( ID > 0) 
;


ALTER TABLE T_DIMENSION_VALUES 
    ADD CONSTRAINT CH_DIM_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_DIMENSION_VALUES 
    ADD CONSTRAINT PK_DIM PRIMARY KEY ( ID ) ;


ALTER TABLE T_DIMENSION_VALUES 
    ADD CONSTRAINT UK_DIM_ITM_ID UNIQUE ( ITM_ID ) ;


ALTER TABLE T_DIMENSION_VALUES 
    ADD CONSTRAINT UK_DIM UNIQUE ( DIMT_CODE , CODE ) ;



CREATE TABLE T_DISPLACEMENT_STATUSES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_DISPLACEMENT_STATUSES 
    ADD CONSTRAINT CH_DST_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_DISPLACEMENT_STATUSES 
    ADD CONSTRAINT CH_DST_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_DISPLACEMENT_STATUSES 
    ADD CONSTRAINT PK_DST PRIMARY KEY ( CODE ) ;


ALTER TABLE T_DISPLACEMENT_STATUSES 
    ADD CONSTRAINT UK_DST_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_LANGUAGES 
    ( 
     CODE VARCHAR2 (6)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_LANGUAGES 
    ADD CONSTRAINT CH_LANG_CODE 
    CHECK ( CODE = trim(CODE)) 
;


ALTER TABLE T_LANGUAGES 
    ADD CONSTRAINT CH_LANG_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG in ('Y', 'N')) 
;


ALTER TABLE T_LANGUAGES 
    ADD CONSTRAINT PK_LANG PRIMARY KEY ( CODE ) ;


ALTER TABLE T_LANGUAGES 
    ADD CONSTRAINT UK_LANG_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_LOCATIONS 
    ( 
     ID NUMBER (10)  NOT NULL , 
     LOCT_CODE VARCHAR2 (10)  NOT NULL , 
     LOCTV_ID INTEGER , 
     START_DATE DATE  NOT NULL , 
     END_DATE DATE  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_LOCATIONS 
    ADD CONSTRAINT CH_LOC_ID 
    CHECK ( ID >= 1e9) 
;


ALTER TABLE T_LOCATIONS 
    ADD CONSTRAINT CH_LOC_DATES 
    CHECK (END_DATE > START_DATE)
;


ALTER TABLE T_LOCATIONS 
    ADD CONSTRAINT PK_LOC PRIMARY KEY ( ID ) ;


ALTER TABLE T_LOCATIONS 
    ADD CONSTRAINT UK_LOC_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_LOCATION_ATTRIBUTES 
    ( 
     LOC_ID NUMBER (10)  NOT NULL , 
     LOCAT_CODE VARCHAR2 (10)  NOT NULL , 
     CHAR_VALUE VARCHAR2 (1000) , 
     NUM_VALUE NUMBER , 
     DATE_VALUE DATE , 
     ITM_ID INTEGER , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_LOCATION_ATTRIBUTES 
    ADD CONSTRAINT CH_LOCA_VALUE 
    CHECK ((CHAR_VALUE is not null and NUM_VALUE is null and DATE_VALUE is null) or
(CHAR_VALUE is null and NUM_VALUE is not null and DATE_VALUE is null) or
(CHAR_VALUE is null and NUM_VALUE is null and DATE_VALUE is not null))
;

CREATE INDEX IX_LOCA_LOCAT ON T_LOCATION_ATTRIBUTES 
    ( 
     LOCAT_CODE ASC 
    ) 
;

ALTER TABLE T_LOCATION_ATTRIBUTES 
    ADD CONSTRAINT PK_LOCA PRIMARY KEY ( LOC_ID, LOCAT_CODE ) ;


ALTER TABLE T_LOCATION_ATTRIBUTES 
    ADD CONSTRAINT UK_LOCA_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_LOCATION_ATTRIBUTE_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DATA_TYPE VARCHAR2 (1)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_LOCATION_ATTRIBUTE_TYPES 
    ADD CONSTRAINT CH_LOCAT_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_LOCATION_ATTRIBUTE_TYPES 
    ADD CONSTRAINT CH_LOCAT_DATA_TYPE 
    CHECK ( DATA_TYPE IN ('C', 'D', 'N')) 
;


ALTER TABLE T_LOCATION_ATTRIBUTE_TYPES 
    ADD CONSTRAINT CH_LOCAT_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_LOCATION_ATTRIBUTE_TYPES 
    ADD CONSTRAINT PK_LOCAT PRIMARY KEY ( CODE ) ;


ALTER TABLE T_LOCATION_ATTRIBUTE_TYPES 
    ADD CONSTRAINT UK_LOCAT_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_LOCATION_RELATIONSHIPS 
    ( 
     LOC_ID_FROM NUMBER (10)  NOT NULL , 
     LOC_ID_TO NUMBER (10)  NOT NULL , 
     LOCRT_CODE VARCHAR2 (10)  NOT NULL , 
     START_DATE DATE  NOT NULL , 
     END_DATE DATE  NOT NULL , 
     ITM_ID INTEGER , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_LOCATION_RELATIONSHIPS 
    ADD CONSTRAINT CH_LOCR_DATES 
    CHECK (END_DATE >= START_DATE)
;


ALTER TABLE T_LOCATION_RELATIONSHIPS 
    ADD CONSTRAINT PK_LOCR PRIMARY KEY ( LOC_ID_FROM, LOC_ID_TO, LOCRT_CODE, START_DATE ) ;


ALTER TABLE T_LOCATION_RELATIONSHIPS 
    ADD CONSTRAINT UK_LOCR_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_LOCATION_RELATIONSHIP_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_LOCATION_RELATIONSHIP_TYPES 
    ADD CONSTRAINT CH_LOCRT_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_LOCATION_RELATIONSHIP_TYPES 
    ADD CONSTRAINT CH_LOCRT_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_LOCATION_RELATIONSHIP_TYPES 
    ADD CONSTRAINT PK_LOCRT PRIMARY KEY ( CODE ) ;


ALTER TABLE T_LOCATION_RELATIONSHIP_TYPES 
    ADD CONSTRAINT UK_LOCRT_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_LOCATION_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_LOCATION_TYPES 
    ADD CONSTRAINT CH_LOCT_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_LOCATION_TYPES 
    ADD CONSTRAINT CH_LOCT_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_LOCATION_TYPES 
    ADD CONSTRAINT PK_LOCT PRIMARY KEY ( CODE ) ;


ALTER TABLE T_LOCATION_TYPES 
    ADD CONSTRAINT UK_LOCT_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_LOCATION_TYPE_RELATIONSHIPS 
    ( 
     LOCT_CODE_FROM VARCHAR2 (10)  NOT NULL , 
     LOCT_CODE_TO VARCHAR2 (10)  NOT NULL , 
     LOCRT_CODE VARCHAR2 (10)  NOT NULL , 
     ITM_ID INTEGER , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_LOCATION_TYPE_RELATIONSHIPS 
    ADD CONSTRAINT PK_LOCTR PRIMARY KEY ( LOCT_CODE_FROM, LOCT_CODE_TO, LOCRT_CODE ) ;


ALTER TABLE T_LOCATION_TYPE_RELATIONSHIPS 
    ADD CONSTRAINT UK_LOCTR_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_LOCATION_TYPE_VARIANTS 
    ( 
     ID INTEGER  NOT NULL , 
     LOCT_CODE VARCHAR2 (10)  NOT NULL , 
     LOC_ID NUMBER (10)  NOT NULL , 
     LOCRT_CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_LOCATION_TYPE_VARIANTS 
    ADD CONSTRAINT CH_LOCTV_ID 
    CHECK ( ID > 0) 
;


ALTER TABLE T_LOCATION_TYPE_VARIANTS 
    ADD CONSTRAINT CH_LOCTV_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_LOCATION_TYPE_VARIANTS 
    ADD CONSTRAINT PK_LOCTV PRIMARY KEY ( ID ) ;


ALTER TABLE T_LOCATION_TYPE_VARIANTS 
    ADD CONSTRAINT UK_LOCTV_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_MESSAGES 
    ( 
     COMP_CODE VARCHAR2 (10)  NOT NULL , 
     SEQ_NBR INTEGER  NOT NULL , 
     SEVERITY VARCHAR2 (1) DEFAULT 'E'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_MESSAGES 
    ADD CONSTRAINT CH_MSG_SEQ_NBR 
    CHECK ( SEQ_NBR > 0) 
;


ALTER TABLE T_MESSAGES 
    ADD CONSTRAINT CH_MSG_SEVERITY 
    CHECK ( SEVERITY IN ('E', 'I', 'S', 'W')) 
;


ALTER TABLE T_MESSAGES 
    ADD CONSTRAINT PK_MSG PRIMARY KEY ( COMP_CODE, SEQ_NBR ) ;


ALTER TABLE T_MESSAGES 
    ADD CONSTRAINT UK_MSG_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_PERMISSIONS 
    ( 
     ID INTEGER  NOT NULL , 
     WRITE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ANNOTATE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_PERMISSIONS 
    ADD CONSTRAINT CH_PRM_ID 
    CHECK ( ID > 0) 
;


ALTER TABLE T_PERMISSIONS 
    ADD CONSTRAINT CH_PRM_WRITE_FLAG 
    CHECK ( WRITE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_PERMISSIONS 
    ADD CONSTRAINT CH_PRM_ANNOTATE_FLAG 
    CHECK ( ANNOTATE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_PERMISSIONS 
    ADD CONSTRAINT PK_PRM PRIMARY KEY ( ID ) ;


ALTER TABLE T_PERMISSIONS 
    ADD CONSTRAINT UK_PRM_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_PERMISSIONS_IN_ROLES 
    ( 
     PRM_ID INTEGER  NOT NULL , 
     ROL_ID INTEGER  NOT NULL , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL 
    ) 
;



ALTER TABLE T_PERMISSIONS_IN_ROLES 
    ADD CONSTRAINT PK_PIR PRIMARY KEY ( PRM_ID, ROL_ID ) ;


ALTER TABLE T_PERMISSIONS_IN_ROLES 
    ADD CONSTRAINT UK_PIR UNIQUE ( ROL_ID , PRM_ID ) ;



CREATE TABLE T_POPULATION_GROUPS 
    ( 
     ID INTEGER  NOT NULL , 
     START_DATE DATE  NOT NULL , 
     END_DATE DATE  NOT NULL , 
     DST_CODE VARCHAR2 (10) , 
     LOC_ID_ASYLUM_COUNTRY NUMBER (10) , 
     LOC_ID_ASYLUM NUMBER (10) , 
     LOC_ID_ORIGIN_COUNTRY NUMBER (10) , 
     LOC_ID_ORIGIN NUMBER (10) , 
     DIM_ID1 INTEGER , 
     DIM_ID2 INTEGER , 
     DIM_ID3 INTEGER , 
     DIM_ID4 INTEGER , 
     DIM_ID5 INTEGER , 
     SEX_CODE VARCHAR2 (1) , 
     AGR_ID INTEGER , 
     SEQ_NBR INTEGER , 
     PPG_ID INTEGER , 
     ITM_ID INTEGER , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_POPULATION_GROUPS 
    ADD CONSTRAINT CH_PGR_ID 
    CHECK ( ID > 0) 
;


ALTER TABLE T_POPULATION_GROUPS 
    ADD CONSTRAINT CH_PGR_DATES 
    CHECK (END_DATE > START_DATE)
;

CREATE UNIQUE INDEX IX_PGR ON T_POPULATION_GROUPS 
    ( 
     START_DATE, END_DATE, nvl(DST_CODE, 'x'), nvl(LOC_ID_ASYLUM_COUNTRY, 0), nvl(LOC_ID_ORIGIN_COUNTRY, 0), nvl(LOC_ID_ASYLUM, 0), nvl(LOC_ID_ORIGIN, 0), nvl(DIM_ID1, 0), nvl(DIM_ID2, 0), nvl(DIM_ID3, 0), nvl(DIM_ID4, 0), nvl(DIM_ID5, 0), nvl(SEX_CODE, 'x'), nvl(AGR_ID, 0), SEQ_NBR
    ) 
;

ALTER TABLE T_POPULATION_GROUPS 
    ADD CONSTRAINT PK_PGR PRIMARY KEY ( ID ) ;


ALTER TABLE T_POPULATION_GROUPS 
    ADD CONSTRAINT UK_PGR_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_POPULATION_PLANNING_GROUPS 
    ( 
     ID INTEGER  NOT NULL , 
     PPG_CODE VARCHAR2 (5)  NOT NULL , 
     START_DATE DATE  NOT NULL , 
     END_DATE DATE  NOT NULL , 
     LOC_ID NUMBER (10)  NOT NULL , 
     PPGR_SEQ_NBR_MAX INTEGER DEFAULT 1  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_POPULATION_PLANNING_GROUPS 
    ADD CONSTRAINT CH_PPG_ID 
    CHECK ( ID > 0) 
;


ALTER TABLE T_POPULATION_PLANNING_GROUPS 
    ADD CONSTRAINT CH_PPG_DATES 
    CHECK (END_DATE > START_DATE)
;


ALTER TABLE T_POPULATION_PLANNING_GROUPS 
    ADD CONSTRAINT PK_PPG PRIMARY KEY ( ID ) ;


ALTER TABLE T_POPULATION_PLANNING_GROUPS 
    ADD CONSTRAINT UK_PPG_ITM_ID UNIQUE ( ITM_ID ) ;


ALTER TABLE T_POPULATION_PLANNING_GROUPS 
    ADD CONSTRAINT UK_PPG UNIQUE ( PPG_CODE , START_DATE ) ;



CREATE TABLE T_POP_GROUP_ATTRIBUTES 
    ( 
     PGR_ID INTEGER  NOT NULL , 
     PGRAT_CODE VARCHAR2 (10)  NOT NULL , 
     CHAR_VALUE VARCHAR2 (1000) , 
     NUM_VALUE NUMBER , 
     DATE_VALUE DATE , 
     ITM_ID INTEGER , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_POP_GROUP_ATTRIBUTES 
    ADD CONSTRAINT CH_PGRA 
    CHECK ((CHAR_VALUE is not null and NUM_VALUE is null and DATE_VALUE is null) or
(CHAR_VALUE is null and NUM_VALUE is not null and DATE_VALUE is null) or
(CHAR_VALUE is null and NUM_VALUE is null and DATE_VALUE is not null))
;


ALTER TABLE T_POP_GROUP_ATTRIBUTES 
    ADD CONSTRAINT PK_PGRA PRIMARY KEY ( PGR_ID, PGRAT_CODE ) ;


ALTER TABLE T_POP_GROUP_ATTRIBUTES 
    ADD CONSTRAINT UK_PGRA_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_POP_GROUP_ATTRIBUTE_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DATA_TYPE VARCHAR2 (1)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_POP_GROUP_ATTRIBUTE_TYPES 
    ADD CONSTRAINT CH_PGRAT_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_POP_GROUP_ATTRIBUTE_TYPES 
    ADD CONSTRAINT CH_PGRAT_DATA_TYPE 
    CHECK ( DATA_TYPE IN ('C', 'D', 'N')) 
;


ALTER TABLE T_POP_GROUP_ATTRIBUTE_TYPES 
    ADD CONSTRAINT CH_PGRAT_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_POP_GROUP_ATTRIBUTE_TYPES 
    ADD CONSTRAINT PK_PGRAT PRIMARY KEY ( CODE ) ;


ALTER TABLE T_POP_GROUP_ATTRIBUTE_TYPES 
    ADD CONSTRAINT UK_PGRAT_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_PPG_RULES 
    ( 
     PPG_ID INTEGER  NOT NULL , 
     SEQ_NBR INTEGER  NOT NULL , 
     NEGATE_FLAG VARCHAR2 (1)  NOT NULL CHECK ( NEGATE_FLAG IN ('N', 'Y')) , 
     LOC_ID_COUNTRY NUMBER (10) , 
     LOC_ID_ASYLUM NUMBER (10) , 
     LOC_ID_ORIGIN NUMBER (10) , 
     LOC_ID_SOURCE NUMBER (10) , 
     DST_CODE VARCHAR2 (10) , 
     DST_NEGATE_FLAG VARCHAR2 (1) CHECK ( DST_NEGATE_FLAG IN ('N', 'Y')) , 
     SEX_CODE VARCHAR2 (1) , 
     SEX_NEGATE_FLAG VARCHAR2 (1) CHECK ( SEX_NEGATE_FLAG IN ('N', 'Y')) , 
     AGR_ID INTEGER , 
     AGR_NEGATE_FLAG VARCHAR2 (1) CHECK ( AGR_NEGATE_FLAG IN ('N', 'Y')) , 
     DIM_ID1 INTEGER , 
     DIM1_NEGATE_FLAG VARCHAR2 (1) CHECK ( DIM1_NEGATE_FLAG IN ('N', 'Y')) , 
     DIM_ID2 INTEGER , 
     DIM2_NEGATE_FLAG VARCHAR2 (1) CHECK ( DIM2_NEGATE_FLAG IN ('N', 'Y')) , 
     DIM_ID3 INTEGER , 
     DIM3_NEGATE_FLAG VARCHAR2 (1) CHECK ( DIM3_NEGATE_FLAG IN ('N', 'Y')) , 
     DIM_ID4 INTEGER , 
     DIM4_NEGATE_FLAG VARCHAR2 (1) CHECK ( DIM4_NEGATE_FLAG IN ('N', 'Y')) , 
     DIM_ID5 INTEGER , 
     DIM5_NEGATE_FLAG VARCHAR2 (1) CHECK ( DIM5_NEGATE_FLAG IN ('N', 'Y')) , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_PPG_RULES 
    ADD CONSTRAINT PK_PPGR PRIMARY KEY ( PPG_ID, SEQ_NBR ) ;


ALTER TABLE T_PPG_RULES 
    ADD CONSTRAINT UK_PPGR_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_ROLES 
    ( 
     ID INTEGER  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_ROLES 
    ADD CONSTRAINT CH_ROL_ID 
    CHECK ( ID > 0) 
;


ALTER TABLE T_ROLES 
    ADD CONSTRAINT PK_ROL PRIMARY KEY ( ID ) ;


ALTER TABLE T_ROLES 
    ADD CONSTRAINT UK_ROL_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_SEXES 
    ( 
     CODE VARCHAR2 (1)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_SEXES 
    ADD CONSTRAINT CH_SEX_CODE 
    CHECK ( CODE IN ('F', 'M')) 
;


ALTER TABLE T_SEXES 
    ADD CONSTRAINT PK_SEX PRIMARY KEY ( CODE ) ;


ALTER TABLE T_SEXES 
    ADD CONSTRAINT UK_SEX_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_STATISTICS 
    ( 
     ID INTEGER  NOT NULL , 
     STCT_CODE VARCHAR2 (10)  NOT NULL , 
     START_DATE DATE  NOT NULL , 
     END_DATE DATE  NOT NULL , 
     DST_CODE VARCHAR2 (10)  NOT NULL , 
     LOC_ID_ASYLUM_COUNTRY NUMBER (10) , 
     LOC_ID_ASYLUM NUMBER (10) , 
     LOC_ID_ORIGIN_COUNTRY NUMBER (10) , 
     LOC_ID_ORIGIN NUMBER (10) , 
     DIM_ID1 INTEGER , 
     DIM_ID2 INTEGER , 
     DIM_ID3 INTEGER , 
     DIM_ID4 INTEGER , 
     DIM_ID5 INTEGER , 
     SEX_CODE VARCHAR2 (1) , 
     AGR_ID INTEGER , 
     PGR_SEQ_NBR INTEGER , 
     PGR_ID_PRIMARY INTEGER , 
     PPG_ID INTEGER , 
     VALUE INTEGER  NOT NULL , 
     ITM_ID INTEGER , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT CH_STC_ID 
    CHECK ( ID > 0) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT CH_STC_DATES 
    CHECK (END_DATE > START_DATE)
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT PK_STC PRIMARY KEY ( ID ) ;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT UK_STC UNIQUE ( STCT_CODE , START_DATE , END_DATE , DST_CODE , LOC_ID_ASYLUM_COUNTRY , LOC_ID_ASYLUM , LOC_ID_ORIGIN_COUNTRY , LOC_ID_ORIGIN , DIM_ID1 , DIM_ID2 , DIM_ID3 , DIM_ID4 , DIM_ID5 , SEX_CODE , AGR_ID , PGR_SEQ_NBR ) ;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT UK_STC_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_STATISTICS_IN_GROUPS 
    ( 
     STC_ID INTEGER  NOT NULL , 
     PGR_ID INTEGER  NOT NULL 
    ) 
;



ALTER TABLE T_STATISTICS_IN_GROUPS 
    ADD CONSTRAINT PK_SIG PRIMARY KEY ( STC_ID, PGR_ID ) ;



CREATE TABLE T_STATISTIC_GROUPS 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_STATISTIC_GROUPS 
    ADD CONSTRAINT CH_STCG_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_STATISTIC_GROUPS 
    ADD CONSTRAINT CH_STCG_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_STATISTIC_GROUPS 
    ADD CONSTRAINT PK_STCG PRIMARY KEY ( CODE ) ;


ALTER TABLE T_STATISTIC_GROUPS 
    ADD CONSTRAINT UK_STCG_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_STATISTIC_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DST_CODE_FLAG VARCHAR2 (1)  NOT NULL , 
     LOC_ID_ASYLUM_COUNTRY_FLAG VARCHAR2 (1)  NOT NULL , 
     LOC_ID_ASYLUM_FLAG VARCHAR2 (1)  NOT NULL , 
     LOC_ID_ORIGIN_COUNTRY_FLAG VARCHAR2 (1)  NOT NULL , 
     LOC_ID_ORIGIN_FLAG VARCHAR2 (1)  NOT NULL , 
     DIM_ID1_FLAG VARCHAR2 (1)  NOT NULL , 
     DIMT_CODE1 VARCHAR2 (10) , 
     DIM_ID2_FLAG VARCHAR2 (1)  NOT NULL , 
     DIMT_CODE2 VARCHAR2 (10) , 
     DIM_ID3_FLAG VARCHAR2 (1)  NOT NULL , 
     DIMT_CODE3 VARCHAR2 (10) , 
     DIM_ID4_FLAG VARCHAR2 (1)  NOT NULL , 
     DIMT_CODE4 VARCHAR2 (10) , 
     DIM_ID5_FLAG VARCHAR2 (1)  NOT NULL , 
     DIMT_CODE5 VARCHAR2 (10) , 
     SEX_CODE_FLAG VARCHAR2 (1)  NOT NULL , 
     AGR_ID_FLAG VARCHAR2 (1)  NOT NULL , 
     PGR_ID_SUBGROUP_FLAG VARCHAR2 (1)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT CH_STCT_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT CH_DST_CODE_FLAG 
    CHECK ( DST_CODE_FLAG IN ('M', 'N', 'O')) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT CH_STCT_LOC_ID_ASY_COU_FLAG 
    CHECK ( LOC_ID_ASYLUM_COUNTRY_FLAG IN ('M', 'N', 'O')) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT CH_STCT_LOC_ID_ASYLUM_FLAG 
    CHECK ( LOC_ID_ASYLUM_FLAG IN ('M', 'N', 'O')) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT CH_STCT_LOC_ID_ORIG_COU_FLAG 
    CHECK ( LOC_ID_ORIGIN_COUNTRY_FLAG IN ('M', 'N', 'O')) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT CH_STCT_LOC_ID_ORIGIN_FLAG 
    CHECK ( LOC_ID_ORIGIN_FLAG IN ('M', 'N', 'O')) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT CH_STCT_DIM_ID1 
    CHECK ( (DIM_ID1_FLAG in ('M', 'O') and DIMT_CODE1 is not null) or
(DIM_ID1_FLAG = 'N' and DIMT_CODE1 is null)) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT CH_STCT_DIM_ID2 
    CHECK ( (DIM_ID2_FLAG in ('M', 'O') and DIMT_CODE2 is not null) or
(DIM_ID2_FLAG = 'N' and DIMT_CODE2 is null)) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT CH_STCT_DIM_ID3 
    CHECK ( (DIM_ID3_FLAG in ('M', 'O') and DIMT_CODE3 is not null) or
(DIM_ID3_FLAG = 'N' and DIMT_CODE3 is null)) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT CH_STCT_DIM_ID4 
    CHECK ( (DIM_ID4_FLAG in ('M', 'O') and DIMT_CODE4 is not null) or
(DIM_ID4_FLAG = 'N' and DIMT_CODE4 is null)) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT CH_STCT_DIM_ID5 
    CHECK ( (DIM_ID5_FLAG in ('M', 'O') and DIMT_CODE5 is not null) or
(DIM_ID5_FLAG = 'N' and DIMT_CODE5 is null)) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT CH_STCT_SEX_CODE_FLAG 
    CHECK ( SEX_CODE_FLAG IN ('M', 'N', 'O')) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT CH_STCT_AGR_ID_FLAG 
    CHECK ( AGR_ID_FLAG IN ('M', 'N', 'O')) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT CH_PGR_ID_SUBGROUP_FLAG 
    CHECK ( PGR_ID_SUBGROUP_FLAG IN ('M', 'N', 'O')) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT CH_STCT_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT PK_STCT PRIMARY KEY ( CODE ) ;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT UK_STCT_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_STATISTIC_TYPES_IN_GROUPS 
    ( 
     STCG_CODE VARCHAR2 (10)  NOT NULL , 
     STCT_CODE VARCHAR2 (10)  NOT NULL , 
     ITM_ID INTEGER , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_STATISTIC_TYPES_IN_GROUPS 
    ADD CONSTRAINT PK_STCTG PRIMARY KEY ( STCG_CODE, STCT_CODE ) ;


ALTER TABLE T_STATISTIC_TYPES_IN_GROUPS 
    ADD CONSTRAINT UK_STCTG_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_SYSTEM_PARAMETERS 
    ( 
     CODE VARCHAR2 (30)  NOT NULL , 
     DATA_TYPE VARCHAR2 (1)  NOT NULL , 
     CHAR_VALUE VARCHAR2 (1000) , 
     NUM_VALUE NUMBER , 
     DATE_VALUE DATE , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_SYSTEM_PARAMETERS 
    ADD CONSTRAINT CH_SYP_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_SYSTEM_PARAMETERS 
    ADD CONSTRAINT CH_SYP_DATA_TYPE 
    CHECK ((DATA_TYPE = 'C' and CHAR_VALUE is not null and NUM_VALUE is null and DATE_VALUE is null) or
(DATA_TYPE = 'N' and CHAR_VALUE is null and NUM_VALUE is not null and DATE_VALUE is null) or
(DATA_TYPE = 'D' and CHAR_VALUE is null and NUM_VALUE is null and DATE_VALUE is not null))
;


ALTER TABLE T_SYSTEM_PARAMETERS 
    ADD CONSTRAINT PK_SYP PRIMARY KEY ( CODE ) ;


ALTER TABLE T_SYSTEM_PARAMETERS 
    ADD CONSTRAINT UK_SYP_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_SYSTEM_USERS 
    ( 
     USERID VARCHAR2 (30)  NOT NULL , 
     LOCKED_FLAG VARCHAR2 (1) DEFAULT 'N'  NOT NULL , 
     TEMPLATE_FLAG VARCHAR2 (1) DEFAULT 'N'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_SYSTEM_USERS 
    ADD CONSTRAINT CH_USR_USERID 
    CHECK ( USERID = trim(USERID)) 
;


ALTER TABLE T_SYSTEM_USERS 
    ADD CONSTRAINT CH_USR_LOCKED_FLAG 
    CHECK ( LOCKED_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_SYSTEM_USERS 
    ADD CONSTRAINT CH_USR_TEMPLATE_FLAG 
    CHECK ( TEMPLATE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_SYSTEM_USERS 
    ADD CONSTRAINT PK_USR PRIMARY KEY ( USERID ) ;


ALTER TABLE T_SYSTEM_USERS 
    ADD CONSTRAINT UK_USR_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_TABLE_ALIASES 
    ( 
     ALIAS VARCHAR2 (10)  NOT NULL , 
     TABLE_NAME VARCHAR2 (30)  NOT NULL , 
     ITM_ID INTEGER 
    ) 
;



ALTER TABLE T_TABLE_ALIASES 
    ADD CONSTRAINT CH_TAB_ALIAS 
    CHECK ( ALIAS = trim(upper(ALIAS))) 
;


ALTER TABLE T_TABLE_ALIASES 
    ADD CONSTRAINT PK_TAB PRIMARY KEY ( ALIAS ) ;


ALTER TABLE T_TABLE_ALIASES 
    ADD CONSTRAINT UK_TAB_TABLE_NAME UNIQUE ( TABLE_NAME ) ;


ALTER TABLE T_TABLE_ALIASES 
    ADD CONSTRAINT UK_TAB_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_TESTS 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DESCRIPTION VARCHAR2 (1000)  NOT NULL , 
     TST_CODE_PARENT VARCHAR2 (10) , 
     SEQ_NBR NUMBER (5) , 
     STP_SEQ_NBR_MAX INTEGER DEFAULT 0  NOT NULL 
    ) 
;



ALTER TABLE T_TESTS 
    ADD CONSTRAINT CH_TST_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_TESTS 
    ADD CONSTRAINT PK_TST PRIMARY KEY ( CODE ) ;



CREATE TABLE T_TEST_ACTIONS 
    ( 
     ID INTEGER  NOT NULL , 
     DESCRIPTION VARCHAR2 (1000)  NOT NULL , 
     ACTION_SCRIPT CLOB  NOT NULL 
    ) 
;



ALTER TABLE T_TEST_ACTIONS 
    ADD CONSTRAINT CH_ACT_ID 
    CHECK ( ID > 0) 
;


ALTER TABLE T_TEST_ACTIONS 
    ADD CONSTRAINT PK_ACT PRIMARY KEY ( ID ) ;



CREATE TABLE T_TEST_ACTION_INVOCATIONS 
    ( 
     ID INTEGER  NOT NULL , 
     ACT_ID INTEGER  NOT NULL , 
     TST_CODE VARCHAR2 (10)  NOT NULL , 
     STP_SEQ_NBR INTEGER , 
     BEFORE_AFTER_FLAG VARCHAR2 (1) DEFAULT 'B'  NOT NULL , 
     SEQ_NBR INTEGER DEFAULT 0  NOT NULL 
    ) 
;



ALTER TABLE T_TEST_ACTION_INVOCATIONS 
    ADD CONSTRAINT CH_TAI_BEFORE_AFTER_FLAG 
    CHECK ( BEFORE_AFTER_FLAG IN ('A', 'B')) 
;


ALTER TABLE T_TEST_ACTION_INVOCATIONS 
    ADD CONSTRAINT PK_TAI PRIMARY KEY ( ID ) ;


ALTER TABLE T_TEST_ACTION_INVOCATIONS 
    ADD CONSTRAINT UK_TAI UNIQUE ( ACT_ID , TST_CODE , STP_SEQ_NBR , BEFORE_AFTER_FLAG , SEQ_NBR ) ;



CREATE TABLE T_TEST_CASES 
    ( 
     TST_CODE VARCHAR2 (10)  NOT NULL , 
     STP_SEQ_NBR INTEGER  NOT NULL , 
     PACKAGE_NAME VARCHAR2 (30) , 
     PROGRAM_UNIT_NAME VARCHAR2 (30)  NOT NULL , 
     EXCEPTION_NBR INTEGER , 
     COMP_CODE VARCHAR2 (10) , 
     MSG_SEQ_NBR INTEGER , 
     VARIABLE_NAME VARCHAR2 (25) , 
     CHAR_VALUE VARCHAR2 (1000) , 
     NUM_VALUE NUMBER , 
     DATE_VALUE DATE 
    ) 
;



ALTER TABLE T_TEST_CASES 
    ADD CONSTRAINT CH_TCS_EXCEPTION_NBR 
    CHECK ( EXCEPTION_NBR < 0) 
;


ALTER TABLE T_TEST_CASES 
    ADD CONSTRAINT CH_TCS_FUNCTION_VALUE 
    CHECK ((EXCEPTION_NBR is null and
  (CHAR_VALUE is not null and
   NUM_VALUE is null and
   DATE_VALUE is null) or
  (CHAR_VALUE is null and
   NUM_VALUE is not null and
   DATE_VALUE is null) or
  (CHAR_VALUE is null and
   NUM_VALUE is null and
   DATE_VALUE is not null)) or
(VARIABLE_NAME is null and
 CHAR_VALUE is null and
 NUM_VALUE is null and
 DATE_VALUE is null))
;


ALTER TABLE T_TEST_CASES 
    ADD CONSTRAINT CH_TCS_MESSAGE 
    CHECK ((EXCEPTION_NBR is not null and COMP_CODE is not null and MSG_SEQ_NBR is not null) or
(COMP_CODE is null and MSG_SEQ_NBR is null))
;


ALTER TABLE T_TEST_CASES 
    ADD CONSTRAINT PK_TCS PRIMARY KEY ( TST_CODE, STP_SEQ_NBR ) ;



CREATE TABLE T_TEST_CASE_ARGUMENTS 
    ( 
     TST_CODE VARCHAR2 (10)  NOT NULL , 
     STP_SEQ_NBR INTEGER  NOT NULL , 
     PARAMETER_NAME VARCHAR2 (30)  NOT NULL , 
     VARIABLE_NAME VARCHAR2 (25) , 
     CHAR_VALUE_IN VARCHAR2 (1000) , 
     CHAR_VALUE_OUT VARCHAR2 (1000) , 
     NUM_VALUE_IN NUMBER , 
     NUM_VALUE_OUT NUMBER , 
     DATE_VALUE_IN DATE , 
     DATE_VALUE_OUT DATE 
    ) 
;



ALTER TABLE T_TEST_CASE_ARGUMENTS 
    ADD CONSTRAINT CH_TCA_PARAMETER 
    CHECK ((VARIABLE_NAME is not null or
 CHAR_VALUE_IN is not null or CHAR_VALUE_OUT is not null or
 NUM_VALUE_IN is not null or NUM_VALUE_OUT is not null or
 DATE_VALUE_IN is not null or DATE_VALUE_OUT is not null) and
(((CHAR_VALUE_IN is not null or CHAR_VALUE_OUT is not null) and
   NUM_VALUE_IN is null and NUM_VALUE_OUT is null and
   DATE_VALUE_IN is null and DATE_VALUE_OUT is null) or
  (CHAR_VALUE_IN is null and CHAR_VALUE_OUT is null and
   (NUM_VALUE_IN is not null or NUM_VALUE_OUT is not null) and
   DATE_VALUE_IN is null or DATE_VALUE_OUT is null) or
  (CHAR_VALUE_IN is null and CHAR_VALUE_OUT is null and
   NUM_VALUE_IN is null and NUM_VALUE_OUT is null and
   (DATE_VALUE_IN is not null or DATE_VALUE_OUT is not null)))
)
;


ALTER TABLE T_TEST_CASE_ARGUMENTS 
    ADD CONSTRAINT PK_TCA PRIMARY KEY ( TST_CODE, STP_SEQ_NBR, PARAMETER_NAME ) ;



CREATE TABLE T_TEST_STEPS 
    ( 
     TST_CODE VARCHAR2 (10)  NOT NULL , 
     SEQ_NBR INTEGER  NOT NULL , 
     DESCRIPTION VARCHAR2 (1000)  NOT NULL , 
     CHECK_FLAG VARCHAR2 (1) DEFAULT 'N'  NOT NULL 
    ) 
;



ALTER TABLE T_TEST_STEPS 
    ADD CONSTRAINT CH_STP_CHECK_FLAG 
    CHECK ( CHECK_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_TEST_STEPS 
    ADD CONSTRAINT PK_STP PRIMARY KEY ( TST_CODE, SEQ_NBR ) ;



CREATE TABLE T_TEXT_ITEMS 
    ( 
     ITM_ID INTEGER  NOT NULL , 
     TXTT_CODE VARCHAR2 (10)  NOT NULL , 
     SEQ_NBR INTEGER  NOT NULL , 
     LANG_CODE VARCHAR2 (6)  NOT NULL , 
     TAB_ALIAS VARCHAR2 (10)  NOT NULL , 
     TEXT VARCHAR2 (1000) , 
     LONG_TEXT CLOB , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL 
    ) 
;



ALTER TABLE T_TEXT_ITEMS 
    ADD CONSTRAINT CH_TXT_SEQ_NBR 
    CHECK ( SEQ_NBR > 0) 
;


ALTER TABLE T_TEXT_ITEMS 
    ADD CONSTRAINT CH_TXT_TEXT 
    CHECK ((TEXT is not null and LONG_TEXT is null) or
(TEXT is null and LONG_TEXT is not null))
;


ALTER TABLE T_TEXT_ITEMS 
    ADD CONSTRAINT PK_TXT PRIMARY KEY ( ITM_ID, TXTT_CODE, SEQ_NBR, LANG_CODE ) ;



CREATE TABLE T_TEXT_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_TEXT_TYPES 
    ADD CONSTRAINT CH_TXTT_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_TEXT_TYPES 
    ADD CONSTRAINT CH_TXTT_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_TEXT_TYPES 
    ADD CONSTRAINT PK_TXTT PRIMARY KEY ( CODE ) ;


ALTER TABLE T_TEXT_TYPES 
    ADD CONSTRAINT UK_TXTT_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_TEXT_TYPE_HEADERS 
    ( 
     ITM_ID INTEGER  NOT NULL , 
     TXTT_CODE VARCHAR2 (10)  NOT NULL , 
     TAB_ALIAS VARCHAR2 (10)  NOT NULL , 
     TXT_SEQ_NBR_MAX INTEGER DEFAULT 0  NOT NULL 
    ) 
;



ALTER TABLE T_TEXT_TYPE_HEADERS 
    ADD CONSTRAINT CH_TTH_TXT_SEQ_NBR_MAX 
    CHECK ( TXT_SEQ_NBR_MAX >= 0) 
;

CREATE INDEX IX_TTH_TTP ON T_TEXT_TYPE_HEADERS 
    ( 
     TXTT_CODE ASC , 
     TAB_ALIAS ASC 
    ) 
;

ALTER TABLE T_TEXT_TYPE_HEADERS 
    ADD CONSTRAINT PK_TTH PRIMARY KEY ( ITM_ID, TXTT_CODE ) ;



CREATE TABLE T_TEXT_TYPE_PROPERTIES 
    ( 
     TXTT_CODE VARCHAR2 (10)  NOT NULL , 
     TAB_ALIAS VARCHAR2 (10)  NOT NULL , 
     MANDATORY_FLAG VARCHAR2 (1) DEFAULT 'N'  NOT NULL , 
     MULTI_INSTANCE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     LONG_TEXT_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT CH_TTP_MANDATORY_FLAG 
    CHECK ( MANDATORY_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT CH_TTP_MULTI_INSTANCE_FLAG 
    CHECK ( MULTI_INSTANCE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT CH_TTP_LONG_TEXT_FLAG 
    CHECK ( LONG_TEXT_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT PK_TTP PRIMARY KEY ( TXTT_CODE, TAB_ALIAS ) ;


ALTER TABLE T_TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT UK_TTP_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_TIME_PERIODS 
    ( 
     ID INTEGER  NOT NULL , 
     PERT_CODE VARCHAR2 (10)  NOT NULL , 
     START_DATE DATE  NOT NULL , 
     END_DATE DATE , 
     ITM_ID INTEGER , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_TIME_PERIODS 
    ADD CONSTRAINT CH_PER_ID 
    CHECK ( ID > 0) 
;


ALTER TABLE T_TIME_PERIODS 
    ADD CONSTRAINT CH_PER_DATES 
    CHECK (END_DATE > START_DATE)
;


ALTER TABLE T_TIME_PERIODS 
    ADD CONSTRAINT PK_PER PRIMARY KEY ( ID ) ;


ALTER TABLE T_TIME_PERIODS 
    ADD CONSTRAINT UK_PER UNIQUE ( PERT_CODE , START_DATE ) ;


ALTER TABLE T_TIME_PERIODS 
    ADD CONSTRAINT UK_PER_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_TIME_PERIOD_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_TIME_PERIOD_TYPES 
    ADD CONSTRAINT CH_PERT_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_TIME_PERIOD_TYPES 
    ADD CONSTRAINT CH_PERT_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_TIME_PERIOD_TYPES 
    ADD CONSTRAINT PK_PERT PRIMARY KEY ( CODE ) ;


ALTER TABLE T_TIME_PERIOD_TYPES 
    ADD CONSTRAINT UK_PERT_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_USERS_IN_ROLES 
    ( 
     USERID VARCHAR2 (30)  NOT NULL , 
     ROL_ID INTEGER  NOT NULL , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL 
    ) 
;



ALTER TABLE T_USERS_IN_ROLES 
    ADD CONSTRAINT PK_UIR PRIMARY KEY ( USERID, ROL_ID ) ;


ALTER TABLE T_USERS_IN_ROLES 
    ADD CONSTRAINT UK_UIR UNIQUE ( ROL_ID , USERID ) ;



CREATE TABLE T_USER_ATTRIBUTES 
    ( 
     USERID VARCHAR2 (30)  NOT NULL , 
     UATT_CODE VARCHAR2 (10)  NOT NULL , 
     CHAR_VALUE VARCHAR2 (1000) , 
     NUM_VALUE NUMBER , 
     DATE_VALUE DATE , 
     ITM_ID INTEGER , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_USER_ATTRIBUTES 
    ADD CONSTRAINT CH_UAT_VALUE 
    CHECK ((CHAR_VALUE is not null and NUM_VALUE is null and DATE_VALUE is null) or
(CHAR_VALUE is null and NUM_VALUE is not null and DATE_VALUE is null) or
(CHAR_VALUE is null and NUM_VALUE is null and DATE_VALUE is not null))
;

CREATE INDEX IX_UAT_UATT ON T_USER_ATTRIBUTES 
    ( 
     UATT_CODE ASC 
    ) 
;

ALTER TABLE T_USER_ATTRIBUTES 
    ADD CONSTRAINT PK_UAT PRIMARY KEY ( USERID, UATT_CODE ) ;


ALTER TABLE T_USER_ATTRIBUTES 
    ADD CONSTRAINT UK_UAT_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_USER_ATTRIBUTE_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DATA_TYPE VARCHAR2 (1)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_USER_ATTRIBUTE_TYPES 
    ADD CONSTRAINT CH_UATT_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_USER_ATTRIBUTE_TYPES 
    ADD CONSTRAINT CH_UATT_DATA_TYPE 
    CHECK ( DATA_TYPE IN ('C', 'D', 'N')) 
;


ALTER TABLE T_USER_ATTRIBUTE_TYPES 
    ADD CONSTRAINT CH_UATT_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_USER_ATTRIBUTE_TYPES 
    ADD CONSTRAINT PK_UATT PRIMARY KEY ( CODE ) ;


ALTER TABLE T_USER_ATTRIBUTE_TYPES 
    ADD CONSTRAINT UK_UATT_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_USER_LANGUAGE_PREFERENCES 
    ( 
     USERID VARCHAR2 (30)  NOT NULL , 
     LANG_CODE VARCHAR2 (6)  NOT NULL , 
     PREF_SEQ NUMBER (5)  NOT NULL , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;


CREATE INDEX IX_ULP_LANG_CODE ON T_USER_LANGUAGE_PREFERENCES 
    ( 
     LANG_CODE ASC 
    ) 
;

ALTER TABLE T_USER_LANGUAGE_PREFERENCES 
    ADD CONSTRAINT PK_ULP PRIMARY KEY ( USERID, LANG_CODE ) ;


ALTER TABLE T_USER_LANGUAGE_PREFERENCES 
    ADD CONSTRAINT UK_ULP_PREF_SEQ UNIQUE ( USERID , PREF_SEQ ) ;




ALTER TABLE T_AGE_PROFILES 
    ADD CONSTRAINT FK_AGP_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_AGE_RANGES 
    ADD CONSTRAINT FK_AGR_AGP FOREIGN KEY 
    ( 
     AGP_CODE
    ) 
    REFERENCES T_AGE_PROFILES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_AGE_RANGES 
    ADD CONSTRAINT FK_AGR_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_COMPONENTS 
    ADD CONSTRAINT FK_COMP_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_DIMENSION_TYPES 
    ADD CONSTRAINT FK_DIMT_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_DIMENSION_VALUES 
    ADD CONSTRAINT FK_DIM_DIMT FOREIGN KEY 
    ( 
     DIMT_CODE
    ) 
    REFERENCES T_DIMENSION_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_DIMENSION_VALUES 
    ADD CONSTRAINT FK_DIM_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_DATA_ITEM_PERMISSIONS 
    ADD CONSTRAINT FK_DIP_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_DATA_ITEM_PERMISSIONS 
    ADD CONSTRAINT FK_DIP_PRM FOREIGN KEY 
    ( 
     PRM_ID
    ) 
    REFERENCES T_PERMISSIONS 
    ( 
     ID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_DATA_ITEM_SOURCES 
    ADD CONSTRAINT FK_DIS_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_DATA_ITEM_SOURCES 
    ADD CONSTRAINT FK_DIS_SOU FOREIGN KEY 
    ( 
     SOU_ID
    ) 
    REFERENCES T_DATA_SOURCES 
    ( 
     ID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_DISPLACEMENT_STATUSES 
    ADD CONSTRAINT FK_DST_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_DATA_ITEMS 
    ADD CONSTRAINT FK_ITM_TAB FOREIGN KEY 
    ( 
     TAB_ALIAS
    ) 
    REFERENCES T_TABLE_ALIASES 
    ( 
     ALIAS
    ) 
;


ALTER TABLE T_LANGUAGES 
    ADD CONSTRAINT FK_LANG_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_LOCATION_ATTRIBUTE_TYPES 
    ADD CONSTRAINT FK_LOCAT_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_LOCATION_ATTRIBUTES 
    ADD CONSTRAINT FK_LOCA_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE T_LOCATION_ATTRIBUTES 
    ADD CONSTRAINT FK_LOCA_LOC FOREIGN KEY 
    ( 
     LOC_ID
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_LOCATION_ATTRIBUTES 
    ADD CONSTRAINT FK_LOCA_LOCAT FOREIGN KEY 
    ( 
     LOCAT_CODE
    ) 
    REFERENCES T_LOCATION_ATTRIBUTE_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_LOCATION_RELATIONSHIP_TYPES 
    ADD CONSTRAINT FK_LOCRT_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_LOCATION_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCR_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE T_LOCATION_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCR_LOCRT FOREIGN KEY 
    ( 
     LOCRT_CODE
    ) 
    REFERENCES T_LOCATION_RELATIONSHIP_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_LOCATION_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCR_LOC_FROM FOREIGN KEY 
    ( 
     LOC_ID_FROM
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_LOCATION_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCR_LOC_TO FOREIGN KEY 
    ( 
     LOC_ID_TO
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_LOCATION_TYPE_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCTR_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE T_LOCATION_TYPE_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCTR_LOCRT FOREIGN KEY 
    ( 
     LOCRT_CODE
    ) 
    REFERENCES T_LOCATION_RELATIONSHIP_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_LOCATION_TYPE_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCTR_LOCT_FROM FOREIGN KEY 
    ( 
     LOCT_CODE_FROM
    ) 
    REFERENCES T_LOCATION_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_LOCATION_TYPE_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCTR_LOCT_TO FOREIGN KEY 
    ( 
     LOCT_CODE_TO
    ) 
    REFERENCES T_LOCATION_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_LOCATION_TYPE_VARIANTS 
    ADD CONSTRAINT FK_LOCTV_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_LOCATION_TYPE_VARIANTS 
    ADD CONSTRAINT FK_LOCTV_LOC FOREIGN KEY 
    ( 
     LOC_ID
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
;


ALTER TABLE T_LOCATION_TYPE_VARIANTS 
    ADD CONSTRAINT FK_LOCTV_LOCRT FOREIGN KEY 
    ( 
     LOCRT_CODE
    ) 
    REFERENCES T_LOCATION_RELATIONSHIP_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_LOCATION_TYPE_VARIANTS 
    ADD CONSTRAINT FK_LOCTV_LOCT FOREIGN KEY 
    ( 
     LOCT_CODE
    ) 
    REFERENCES T_LOCATION_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_LOCATION_TYPES 
    ADD CONSTRAINT FK_LOCT_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_LOCATIONS 
    ADD CONSTRAINT FK_LOC_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_LOCATIONS 
    ADD CONSTRAINT FK_LOC_LOCT FOREIGN KEY 
    ( 
     LOCT_CODE
    ) 
    REFERENCES T_LOCATION_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_LOCATIONS 
    ADD CONSTRAINT FK_LOC_LOCTV FOREIGN KEY 
    ( 
     LOCTV_ID
    ) 
    REFERENCES T_LOCATION_TYPE_VARIANTS 
    ( 
     ID
    ) 
;


ALTER TABLE T_MESSAGES 
    ADD CONSTRAINT FK_MSG_COMP FOREIGN KEY 
    ( 
     COMP_CODE
    ) 
    REFERENCES T_COMPONENTS 
    ( 
     CODE
    ) 
;


ALTER TABLE T_MESSAGES 
    ADD CONSTRAINT FK_MSG_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_TIME_PERIOD_TYPES 
    ADD CONSTRAINT FK_PERT_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_TIME_PERIODS 
    ADD CONSTRAINT FK_PER_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE T_TIME_PERIODS 
    ADD CONSTRAINT FK_PER_PERT FOREIGN KEY 
    ( 
     PERT_CODE
    ) 
    REFERENCES T_TIME_PERIOD_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_POP_GROUP_ATTRIBUTE_TYPES 
    ADD CONSTRAINT FK_PGRAT_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_POP_GROUP_ATTRIBUTES 
    ADD CONSTRAINT FK_PGRA_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE T_POP_GROUP_ATTRIBUTES 
    ADD CONSTRAINT FK_PGRA_PGR FOREIGN KEY 
    ( 
     PGR_ID
    ) 
    REFERENCES T_POPULATION_GROUPS 
    ( 
     ID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_POP_GROUP_ATTRIBUTES 
    ADD CONSTRAINT FK_PGRA_PGRAT FOREIGN KEY 
    ( 
     PGRAT_CODE
    ) 
    REFERENCES T_POP_GROUP_ATTRIBUTE_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_POPULATION_GROUPS 
    ADD CONSTRAINT FK_PGR_AGR FOREIGN KEY 
    ( 
     AGR_ID
    ) 
    REFERENCES T_AGE_RANGES 
    ( 
     ID
    ) 
;


ALTER TABLE T_POPULATION_GROUPS 
    ADD CONSTRAINT FK_PGR_DIM1 FOREIGN KEY 
    ( 
     DIM_ID1
    ) 
    REFERENCES T_DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE T_POPULATION_GROUPS 
    ADD CONSTRAINT FK_PGR_DIM2 FOREIGN KEY 
    ( 
     DIM_ID2
    ) 
    REFERENCES T_DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE T_POPULATION_GROUPS 
    ADD CONSTRAINT FK_PGR_DIM3 FOREIGN KEY 
    ( 
     DIM_ID3
    ) 
    REFERENCES T_DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE T_POPULATION_GROUPS 
    ADD CONSTRAINT FK_PGR_DIM4 FOREIGN KEY 
    ( 
     DIM_ID4
    ) 
    REFERENCES T_DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE T_POPULATION_GROUPS 
    ADD CONSTRAINT FK_PGR_DIM5 FOREIGN KEY 
    ( 
     DIM_ID5
    ) 
    REFERENCES T_DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE T_POPULATION_GROUPS 
    ADD CONSTRAINT FK_PGR_DST FOREIGN KEY 
    ( 
     DST_CODE
    ) 
    REFERENCES T_DISPLACEMENT_STATUSES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_POPULATION_GROUPS 
    ADD CONSTRAINT FK_PGR_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE T_POPULATION_GROUPS 
    ADD CONSTRAINT FK_PGR_LOC_ASYLUM FOREIGN KEY 
    ( 
     LOC_ID_ASYLUM
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
;


ALTER TABLE T_POPULATION_GROUPS 
    ADD CONSTRAINT FK_PGR_LOC_ASYLUM_COUNTRY FOREIGN KEY 
    ( 
     LOC_ID_ASYLUM_COUNTRY
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
;


ALTER TABLE T_POPULATION_GROUPS 
    ADD CONSTRAINT FK_PGR_LOC_ORIGIN FOREIGN KEY 
    ( 
     LOC_ID_ORIGIN
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
;


ALTER TABLE T_POPULATION_GROUPS 
    ADD CONSTRAINT FK_PGR_LOC_ORIGIN_COUNTRY FOREIGN KEY 
    ( 
     LOC_ID_ORIGIN_COUNTRY
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
;


ALTER TABLE T_POPULATION_GROUPS 
    ADD CONSTRAINT FK_PGR_PPG FOREIGN KEY 
    ( 
     PPG_ID
    ) 
    REFERENCES T_POPULATION_PLANNING_GROUPS 
    ( 
     ID
    ) 
;


ALTER TABLE T_POPULATION_GROUPS 
    ADD CONSTRAINT FK_PGR_SEX FOREIGN KEY 
    ( 
     SEX_CODE
    ) 
    REFERENCES T_SEXES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_PERMISSIONS_IN_ROLES 
    ADD CONSTRAINT FK_PIR_PRM FOREIGN KEY 
    ( 
     PRM_ID
    ) 
    REFERENCES T_PERMISSIONS 
    ( 
     ID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_PERMISSIONS_IN_ROLES 
    ADD CONSTRAINT FK_PIR_ROL FOREIGN KEY 
    ( 
     ROL_ID
    ) 
    REFERENCES T_ROLES 
    ( 
     ID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_PPG_RULES 
    ADD CONSTRAINT FK_PPGR_AGR FOREIGN KEY 
    ( 
     AGR_ID
    ) 
    REFERENCES T_AGE_RANGES 
    ( 
     ID
    ) 
;


ALTER TABLE T_PPG_RULES 
    ADD CONSTRAINT FK_PPGR_DIM1 FOREIGN KEY 
    ( 
     DIM_ID1
    ) 
    REFERENCES T_DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE T_PPG_RULES 
    ADD CONSTRAINT FK_PPGR_DIM2 FOREIGN KEY 
    ( 
     DIM_ID2
    ) 
    REFERENCES T_DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE T_PPG_RULES 
    ADD CONSTRAINT FK_PPGR_DIM3 FOREIGN KEY 
    ( 
     DIM_ID3
    ) 
    REFERENCES T_DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE T_PPG_RULES 
    ADD CONSTRAINT FK_PPGR_DIM4 FOREIGN KEY 
    ( 
     DIM_ID4
    ) 
    REFERENCES T_DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE T_PPG_RULES 
    ADD CONSTRAINT FK_PPGR_DIM5 FOREIGN KEY 
    ( 
     DIM_ID5
    ) 
    REFERENCES T_DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE T_PPG_RULES 
    ADD CONSTRAINT FK_PPGR_DST FOREIGN KEY 
    ( 
     DST_CODE
    ) 
    REFERENCES T_DISPLACEMENT_STATUSES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_PPG_RULES 
    ADD CONSTRAINT FK_PPGR_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_PPG_RULES 
    ADD CONSTRAINT FK_PPGR_LOC_ASYLUM FOREIGN KEY 
    ( 
     LOC_ID_ASYLUM
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
;


ALTER TABLE T_PPG_RULES 
    ADD CONSTRAINT FK_PPGR_LOC_COUNTRY FOREIGN KEY 
    ( 
     LOC_ID_COUNTRY
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
;


ALTER TABLE T_PPG_RULES 
    ADD CONSTRAINT FK_PPGR_LOC_ORIGIN FOREIGN KEY 
    ( 
     LOC_ID_ORIGIN
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
;


ALTER TABLE T_PPG_RULES 
    ADD CONSTRAINT FK_PPGR_LOC_SOURCE FOREIGN KEY 
    ( 
     LOC_ID_SOURCE
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
;


ALTER TABLE T_PPG_RULES 
    ADD CONSTRAINT FK_PPGR_PPG FOREIGN KEY 
    ( 
     PPG_ID
    ) 
    REFERENCES T_POPULATION_PLANNING_GROUPS 
    ( 
     ID
    ) 
;


ALTER TABLE T_PPG_RULES 
    ADD CONSTRAINT FK_PPGR_SEX FOREIGN KEY 
    ( 
     SEX_CODE
    ) 
    REFERENCES T_SEXES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_POPULATION_PLANNING_GROUPS 
    ADD CONSTRAINT FK_PPG_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_POPULATION_PLANNING_GROUPS 
    ADD CONSTRAINT FK_PPG_LOC FOREIGN KEY 
    ( 
     LOC_ID
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
;


ALTER TABLE T_PERMISSIONS 
    ADD CONSTRAINT FK_PRM_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_ROLES 
    ADD CONSTRAINT FK_ROL_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_SEXES 
    ADD CONSTRAINT FK_SEX_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS_IN_GROUPS 
    ADD CONSTRAINT FK_SIG_PGR FOREIGN KEY 
    ( 
     PGR_ID
    ) 
    REFERENCES T_POPULATION_GROUPS 
    ( 
     ID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_STATISTICS_IN_GROUPS 
    ADD CONSTRAINT FK_SIG_STC FOREIGN KEY 
    ( 
     STC_ID
    ) 
    REFERENCES T_STATISTICS 
    ( 
     ID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_DATA_SOURCES 
    ADD CONSTRAINT FK_SOU_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTIC_GROUPS 
    ADD CONSTRAINT FK_STCG_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTIC_TYPES_IN_GROUPS 
    ADD CONSTRAINT FK_STCTG_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE T_STATISTIC_TYPES_IN_GROUPS 
    ADD CONSTRAINT FK_STCTG_STCG FOREIGN KEY 
    ( 
     STCG_CODE
    ) 
    REFERENCES T_STATISTIC_GROUPS 
    ( 
     CODE
    ) 
;


ALTER TABLE T_STATISTIC_TYPES_IN_GROUPS 
    ADD CONSTRAINT FK_STCTG_STCT FOREIGN KEY 
    ( 
     STCT_CODE
    ) 
    REFERENCES T_STATISTIC_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT FK_STCT_DIMT1 FOREIGN KEY 
    ( 
     DIMT_CODE1
    ) 
    REFERENCES T_DIMENSION_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT FK_STCT_DIMT2 FOREIGN KEY 
    ( 
     DIMT_CODE2
    ) 
    REFERENCES T_DIMENSION_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT FK_STCT_DIMT3 FOREIGN KEY 
    ( 
     DIMT_CODE3
    ) 
    REFERENCES T_DIMENSION_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT FK_STCT_DIMT4 FOREIGN KEY 
    ( 
     DIMT_CODE4
    ) 
    REFERENCES T_DIMENSION_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT FK_STCT_DIMT5 FOREIGN KEY 
    ( 
     DIMT_CODE5
    ) 
    REFERENCES T_DIMENSION_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT FK_STCT_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_AGR FOREIGN KEY 
    ( 
     AGR_ID
    ) 
    REFERENCES T_AGE_RANGES 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_DIM1 FOREIGN KEY 
    ( 
     DIM_ID1
    ) 
    REFERENCES T_DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_DIM2 FOREIGN KEY 
    ( 
     DIM_ID2
    ) 
    REFERENCES T_DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_DIM3 FOREIGN KEY 
    ( 
     DIM_ID3
    ) 
    REFERENCES T_DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_DIM4 FOREIGN KEY 
    ( 
     DIM_ID4
    ) 
    REFERENCES T_DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_DIM5 FOREIGN KEY 
    ( 
     DIM_ID5
    ) 
    REFERENCES T_DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_DST FOREIGN KEY 
    ( 
     DST_CODE
    ) 
    REFERENCES T_DISPLACEMENT_STATUSES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_LOC_ASYLUM FOREIGN KEY 
    ( 
     LOC_ID_ASYLUM
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_LOC_ASYLUM_COUNTRY FOREIGN KEY 
    ( 
     LOC_ID_ASYLUM_COUNTRY
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_LOC_ORIGIN FOREIGN KEY 
    ( 
     LOC_ID_ORIGIN
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_LOC_ORIGIN_COUNTRY FOREIGN KEY 
    ( 
     LOC_ID_ORIGIN_COUNTRY
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_PGR_PRIMARY FOREIGN KEY 
    ( 
     PGR_ID_PRIMARY
    ) 
    REFERENCES T_POPULATION_GROUPS 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_PPG FOREIGN KEY 
    ( 
     PPG_ID
    ) 
    REFERENCES T_POPULATION_PLANNING_GROUPS 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_SEX FOREIGN KEY 
    ( 
     SEX_CODE
    ) 
    REFERENCES T_SEXES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_STCT FOREIGN KEY 
    ( 
     STCT_CODE
    ) 
    REFERENCES T_STATISTIC_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_TEST_STEPS 
    ADD CONSTRAINT FK_STP_TST FOREIGN KEY 
    ( 
     TST_CODE
    ) 
    REFERENCES T_TESTS 
    ( 
     CODE
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_SYSTEM_PARAMETERS 
    ADD CONSTRAINT FK_SYP_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_TABLE_ALIASES 
    ADD CONSTRAINT FK_TAB_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE T_TEST_ACTION_INVOCATIONS 
    ADD CONSTRAINT FK_TAI_ACT FOREIGN KEY 
    ( 
     ACT_ID
    ) 
    REFERENCES T_TEST_ACTIONS 
    ( 
     ID
    ) 
;


ALTER TABLE T_TEST_ACTION_INVOCATIONS 
    ADD CONSTRAINT FK_TAI_STP FOREIGN KEY 
    ( 
     TST_CODE,
     STP_SEQ_NBR
    ) 
    REFERENCES T_TEST_STEPS 
    ( 
     TST_CODE,
     SEQ_NBR
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_TEST_ACTION_INVOCATIONS 
    ADD CONSTRAINT FK_TAI_TST FOREIGN KEY 
    ( 
     TST_CODE
    ) 
    REFERENCES T_TESTS 
    ( 
     CODE
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_TEST_CASE_ARGUMENTS 
    ADD CONSTRAINT FK_TCA_TCS FOREIGN KEY 
    ( 
     TST_CODE,
     STP_SEQ_NBR
    ) 
    REFERENCES T_TEST_CASES 
    ( 
     TST_CODE,
     STP_SEQ_NBR
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_TEST_CASES 
    ADD CONSTRAINT FK_TCS_MSG FOREIGN KEY 
    ( 
     COMP_CODE,
     MSG_SEQ_NBR
    ) 
    REFERENCES T_MESSAGES 
    ( 
     COMP_CODE,
     SEQ_NBR
    ) 
;


ALTER TABLE T_TEST_CASES 
    ADD CONSTRAINT FK_TCS_STP FOREIGN KEY 
    ( 
     TST_CODE,
     STP_SEQ_NBR
    ) 
    REFERENCES T_TEST_STEPS 
    ( 
     TST_CODE,
     SEQ_NBR
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_TESTS 
    ADD CONSTRAINT FK_TST_TST_PARENT FOREIGN KEY 
    ( 
     TST_CODE_PARENT
    ) 
    REFERENCES T_TESTS 
    ( 
     CODE
    ) 
;


ALTER TABLE T_TEXT_TYPE_HEADERS 
    ADD CONSTRAINT FK_TTH_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_TEXT_TYPE_HEADERS 
    ADD CONSTRAINT FK_TTH_TTP FOREIGN KEY 
    ( 
     TXTT_CODE,
     TAB_ALIAS
    ) 
    REFERENCES T_TEXT_TYPE_PROPERTIES 
    ( 
     TXTT_CODE,
     TAB_ALIAS
    ) 
;


ALTER TABLE T_TEXT_TYPE_HEADERS 
    ADD CONSTRAINT FK_TTH_TXTT FOREIGN KEY 
    ( 
     TXTT_CODE
    ) 
    REFERENCES T_TEXT_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT FK_TTP_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE T_TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT FK_TTP_TAB FOREIGN KEY 
    ( 
     TAB_ALIAS
    ) 
    REFERENCES T_TABLE_ALIASES 
    ( 
     ALIAS
    ) 
;


ALTER TABLE T_TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT FK_TTP_TXTT FOREIGN KEY 
    ( 
     TXTT_CODE
    ) 
    REFERENCES T_TEXT_TYPES 
    ( 
     CODE
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_TEXT_TYPES 
    ADD CONSTRAINT FK_TXTT_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_TEXT_ITEMS 
    ADD CONSTRAINT FK_TXT_LANG FOREIGN KEY 
    ( 
     LANG_CODE
    ) 
    REFERENCES T_LANGUAGES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_TEXT_ITEMS 
    ADD CONSTRAINT FK_TXT_TTH FOREIGN KEY 
    ( 
     ITM_ID,
     TXTT_CODE
    ) 
    REFERENCES T_TEXT_TYPE_HEADERS 
    ( 
     ITM_ID,
     TXTT_CODE
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_USER_ATTRIBUTE_TYPES 
    ADD CONSTRAINT FK_UATT_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_USER_ATTRIBUTES 
    ADD CONSTRAINT FK_UAT_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE T_USER_ATTRIBUTES 
    ADD CONSTRAINT FK_UAT_UATT FOREIGN KEY 
    ( 
     UATT_CODE
    ) 
    REFERENCES T_USER_ATTRIBUTE_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_USER_ATTRIBUTES 
    ADD CONSTRAINT FK_UAT_USR FOREIGN KEY 
    ( 
     USERID
    ) 
    REFERENCES T_SYSTEM_USERS 
    ( 
     USERID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_USERS_IN_ROLES 
    ADD CONSTRAINT FK_UIR_ROL FOREIGN KEY 
    ( 
     ROL_ID
    ) 
    REFERENCES T_ROLES 
    ( 
     ID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_USERS_IN_ROLES 
    ADD CONSTRAINT FK_UIR_USR FOREIGN KEY 
    ( 
     USERID
    ) 
    REFERENCES T_SYSTEM_USERS 
    ( 
     USERID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_USER_LANGUAGE_PREFERENCES 
    ADD CONSTRAINT FK_ULP_LANG FOREIGN KEY 
    ( 
     LANG_CODE
    ) 
    REFERENCES T_LANGUAGES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_USER_LANGUAGE_PREFERENCES 
    ADD CONSTRAINT FK_ULP_USR FOREIGN KEY 
    ( 
     USERID
    ) 
    REFERENCES T_SYSTEM_USERS 
    ( 
     USERID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_SYSTEM_USERS 
    ADD CONSTRAINT FK_USR_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;

CREATE OR REPLACE VIEW AGE_PROFILES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT AGP.CODE,
    TXT.TEXT DESCRIPTION,
    TXT.LANG_CODE,
    AGP.DISPLAY_SEQ,
    AGP.ACTIVE_FLAG,
    AGP.ITM_ID,
    AGP.VERSION_NBR,
    row_number() OVER (PARTITION BY AGP.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_AGE_PROFILES AGP
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = AGP.ITM_ID
  AND TXT.TXTT_CODE = 'DESCR'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW AGE_RANGES AS
SELECT ID,
  DESCRIPTION,
  LANG_CODE,
  AGP_CODE,
  AGE_FROM,
  AGE_TO,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT AGR.ID,
    TXT.TEXT DESCRIPTION,
    TXT.LANG_CODE,
    AGR.AGP_CODE,
    AGR.AGE_FROM,
    AGR.AGE_TO,
    AGR.ITM_ID,
    AGR.VERSION_NBR,
    row_number() OVER (PARTITION BY AGR.ID ORDER BY LANG.ACTIVE_FLAG, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_AGE_RANGES AGR
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = AGR.ITM_ID
  AND TXT.TXTT_CODE = 'DESCR'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW COMPONENTS AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT COMP.CODE,
    TXT.TEXT DESCRIPTION,
    TXT.LANG_CODE,
    COMP.DISPLAY_SEQ,
    COMP.ACTIVE_FLAG,
    COMP.ITM_ID,
    COMP.VERSION_NBR,
    row_number() OVER (PARTITION BY COMP.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_COMPONENTS COMP
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = COMP.ITM_ID
  AND TXT.TXTT_CODE = 'DESCR'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW COUNTRIES AS
WITH LOC AS
  (SELECT ID,
    NAME,
    LANG_CODE,
    LOCT_CODE,
    START_DATE,
    END_DATE,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT LOC.ID,
      TXT.TEXT NAME,
      TXT.LANG_CODE,
      LOC.LOCT_CODE,
      LOC.START_DATE,
      LOC.END_DATE,
      LOC.ITM_ID,
      LOC.VERSION_NBR,
      row_number() OVER (PARTITION BY LOC.ID ORDER BY LANG.ACTIVE_FLAG, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
    FROM T_LOCATIONS LOC
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = LOC.ITM_ID
    AND TXT.TXTT_CODE = 'NAME'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  )
SELECT ID,
  NAME,
  LANG_CODE,
  ISO3166_ALPHA3_CODE,
  ISO3166_ALPHA2_CODE,
  ISO3166_NUMERIC_CODE,
  UNHCR_COUNTRY_CODE,
  START_DATE,
  END_DATE,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT LOC.ID,
    LOC.NAME,
    LOC.LANG_CODE,
    LOCA1.CHAR_VALUE AS ISO3166_ALPHA3_CODE,
    LOCA2.CHAR_VALUE AS ISO3166_ALPHA2_CODE,
    LOCA3.CHAR_VALUE AS ISO3166_NUMERIC_CODE,
    LOCA4.CHAR_VALUE AS UNHCR_COUNTRY_CODE,
    LOC.START_DATE,
    LOC.END_DATE,
    LOC.ITM_ID,
    LOC.VERSION_NBR
  FROM LOC
  LEFT OUTER JOIN T_LOCATION_ATTRIBUTES LOCA1
  ON LOCA1.LOC_ID      = LOC.ID
  AND LOCA1.LOCAT_CODE = 'IS03166A3'
  LEFT OUTER JOIN T_LOCATION_ATTRIBUTES LOCA2
  ON LOCA2.LOC_ID      = LOC.ID
  AND LOCA2.LOCAT_CODE = 'IS03166A2'
  LEFT OUTER JOIN T_LOCATION_ATTRIBUTES LOCA3
  ON LOCA3.LOC_ID      = LOC.ID
  AND LOCA3.LOCAT_CODE = 'IS03166NUM'
  LEFT OUTER JOIN T_LOCATION_ATTRIBUTES LOCA4
  ON LOCA4.LOC_ID      = LOC.ID
  AND LOCA4.LOCAT_CODE = 'HCRCC'
  WHERE LOC.LOCT_CODE  = 'COUNTRY'
  ) ;



CREATE OR REPLACE VIEW DESCRIPTIONS AS
SELECT ITM_ID,
  LANG_CODE,
  TAB_ALIAS,
  TEXT DESCRIPTION
FROM
  (SELECT TXT.ITM_ID,
    TXT.LANG_CODE,
    TXT.TAB_ALIAS,
    TXT.TEXT,
    row_number() OVER (PARTITION BY TXT.ITM_ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_TEXT_ITEMS TXT
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE    = TXT.LANG_CODE
  AND ULP.USERID      = sys_context('PSR', 'USERID')
  WHERE TXT.TXTT_CODE = 'DESCR'
  AND TXT.SEQ_NBR     = 1
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW DIMENSION_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT DIMT.CODE,
    TXT.TEXT DESCRIPTION,
    TXT.LANG_CODE,
    DIMT.DISPLAY_SEQ,
    DIMT.ACTIVE_FLAG,
    DIMT.ITM_ID,
    DIMT.VERSION_NBR,
    row_number() OVER (PARTITION BY DIMT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_DIMENSION_TYPES DIMT
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = DIMT.ITM_ID
  AND TXT.TXTT_CODE = 'DESCR'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW DIMENSION_VALUES AS
SELECT ID,
  DESCRIPTION,
  LANG_CODE,
  DIMT_CODE,
  CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT DIM.ID,
    TXT.TEXT DESCRIPTION,
    TXT.LANG_CODE,
    DIM.DIMT_CODE,
    DIM.CODE,
    DIM.DISPLAY_SEQ,
    DIM.ACTIVE_FLAG,
    DIM.ITM_ID,
    DIM.VERSION_NBR,
    row_number() OVER (PARTITION BY DIM.ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_DIMENSION_VALUES DIM
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = DIM.ITM_ID
  AND TXT.TXTT_CODE = 'DESCR'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW DISPLACEMENT_STATUSES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT DST.CODE,
    TXT.TEXT DESCRIPTION,
    TXT.LANG_CODE,
    DST.DISPLAY_SEQ,
    DST.ACTIVE_FLAG,
    DST.ITM_ID,
    DST.VERSION_NBR,
    row_number() OVER (PARTITION BY DST.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_DISPLACEMENT_STATUSES DST
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = DST.ITM_ID
  AND TXT.TXTT_CODE = 'DESCR'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW HIERARCHICAL_LOCATIONS AS
WITH Q_LOCATIONS AS
  (SELECT ID,
    NAME,
    LANG_CODE,
    LOCT_CODE
  FROM
    (SELECT LOC.ID,
      TXT.TEXT NAME,
      TXT.LANG_CODE,
      LOC.LOCT_CODE,
      row_number() OVER (PARTITION BY LOC.ID ORDER BY LANG.ACTIVE_FLAG, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
    FROM T_LOCATIONS LOC
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = LOC.ITM_ID
    AND TXT.TXTT_CODE = 'NAME'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  )
SELECT LOC_ID_FROM,
  LOCT_CODE_FROM,
  LOC_NAME_FROM,
  LANG_CODE_FROM,
  LOCRT_CODE,
  START_DATE,
  END_DATE,
  LOC_ID_TO,
  LOCT_CODE_TO,
  LOC_NAME_TO,
  LANG_CODE_TO
FROM
  (SELECT LOC1.ID  AS LOC_ID_FROM,
    LOC1.LOCT_CODE AS LOCT_CODE_FROM,
    LOC1.NAME      AS LOC_NAME_FROM,
    LOC1.LANG_CODE AS LANG_CODE_FROM,
    LOCR.LOCRT_CODE,
    LOCR.START_DATE,
    LOCR.END_DATE,
    LOC2.ID        AS LOC_ID_TO,
    LOC2.LOCT_CODE AS LOCT_CODE_TO,
    LOC2.NAME      AS LOC_NAME_TO,
    LOC2.LANG_CODE AS LANG_CODE_TO
  FROM Q_LOCATIONS LOC1
  INNER JOIN T_LOCATION_RELATIONSHIPS LOCR
  ON LOCR.LOC_ID_FROM = LOC1.ID
  INNER JOIN Q_LOCATIONS LOC2
  ON LOC2.ID = LOCR.LOC_ID_TO
  ) ;



CREATE OR REPLACE VIEW LANGUAGES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT LANG.CODE,
    TXT.TEXT DESCRIPTION,
    TXT.LANG_CODE,
    LANG.DISPLAY_SEQ,
    LANG.ACTIVE_FLAG,
    LANG.ITM_ID,
    LANG.VERSION_NBR,
    row_number() OVER (PARTITION BY LANG.CODE ORDER BY LANG1.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ,
    CASE
      WHEN LANG1.CODE = LANG.CODE
      THEN 1e5
      ELSE LANG.DISPLAY_SEQ + 1e5
    END)) RANK
  FROM T_LANGUAGES LANG
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = LANG.ITM_ID
  AND TXT.TXTT_CODE = 'DESCR'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG1
  ON LANG1.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW LOCATIONS AS
SELECT ID,
  NAME,
  LANG_CODE,
  LOCT_CODE,
  LOCTV_ID,
  START_DATE,
  END_DATE,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT LOC.ID,
    TXT.TEXT NAME,
    TXT.LANG_CODE,
    LOC.LOCT_CODE,
    LOC.LOCTV_ID,
    LOC.START_DATE,
    LOC.END_DATE,
    LOC.ITM_ID,
    LOC.VERSION_NBR,
    row_number() OVER (PARTITION BY LOC.ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_LOCATIONS LOC
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = LOC.ITM_ID
  AND TXT.TXTT_CODE = 'NAME'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW LOCATION_ATTRIBUTES AS
SELECT LOCA.LOC_ID,
  LOCA.LOCAT_CODE,
  LOCA.CHAR_VALUE,
  LOCA.NUM_VALUE,
  LOCA.DATE_VALUE,
  LOCA.VERSION_NBR,
  LOCA.ITM_ID
FROM T_LOCATION_ATTRIBUTES LOCA ;



CREATE OR REPLACE VIEW LOCATION_ATTRIBUTE_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DATA_TYPE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT LOCAT.CODE,
    TXT.TEXT DESCRIPTION,
    TXT.LANG_CODE,
    LOCAT.DATA_TYPE,
    LOCAT.DISPLAY_SEQ,
    LOCAT.ACTIVE_FLAG,
    LOCAT.ITM_ID,
    LOCAT.VERSION_NBR,
    row_number() OVER (PARTITION BY LOCAT.CODE ORDER BY LANG.ACTIVE_FLAG, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_LOCATION_ATTRIBUTE_TYPES LOCAT
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = LOCAT.ITM_ID
  AND TXT.TXTT_CODE = 'DESCR'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW LOCATION_RELATIONSHIPS AS
SELECT LOCR.LOC_ID_FROM,
  LOCR.LOC_ID_TO,
  LOCR.LOCRT_CODE,
  LOCR.START_DATE,
  LOCR.END_DATE,
  LOCR.ITM_ID,
  LOCR.VERSION_NBR
FROM T_LOCATION_RELATIONSHIPS LOCR ;



CREATE OR REPLACE VIEW LOCATION_RELATIONSHIP_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT LOCRT.CODE,
    TXT.TEXT DESCRIPTION,
    TXT.LANG_CODE,
    LOCRT.DISPLAY_SEQ,
    LOCRT.ACTIVE_FLAG,
    LOCRT.ITM_ID,
    LOCRT.VERSION_NBR,
    row_number() OVER (PARTITION BY LOCRT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_LOCATION_RELATIONSHIP_TYPES LOCRT
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = LOCRT.ITM_ID
  AND TXT.TXTT_CODE = 'DESCR'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW LOCATION_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT LOCT.CODE,
    TXT.TEXT DESCRIPTION,
    TXT.LANG_CODE,
    LOCT.DISPLAY_SEQ,
    LOCT.ACTIVE_FLAG,
    LOCT.ITM_ID,
    LOCT.VERSION_NBR,
    row_number() OVER (PARTITION BY LOCT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_LOCATION_TYPES LOCT
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = LOCT.ITM_ID
  AND TXT.TXTT_CODE = 'DESCR'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW LOCATION_TYPE_RELATIONSHIPS AS
SELECT LOCTR.LOCT_CODE_FROM,
  LOCTR.LOCT_CODE_TO,
  LOCTR.LOCRT_CODE,
  LOCTR.ITM_ID,
  LOCTR.VERSION_NBR
FROM T_LOCATION_TYPE_RELATIONSHIPS LOCTR ;



CREATE OR REPLACE VIEW LOCATION_TYPE_VARIANTS AS
SELECT ID,
  DESCRIPTION,
  LANG_CODE,
  LOCT_CODE,
  LOC_ID,
  LOCRT_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT LOCTV.ID,
    TXT.TEXT DESCRIPTION,
    TXT.LANG_CODE,
    LOCTV.LOCT_CODE,
    LOCTV.LOC_ID,
    LOCTV.LOCRT_CODE,
    LOCTV.DISPLAY_SEQ,
    LOCTV.ACTIVE_FLAG,
    LOCTV.ITM_ID,
    LOCTV.VERSION_NBR,
    row_number() OVER (PARTITION BY LOCTV.ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_LOCATION_TYPE_VARIANTS LOCTV
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = LOCTV.ITM_ID
  AND TXT.TXTT_CODE = 'DESCR'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW MESSAGES AS
SELECT COMP_CODE,
  SEQ_NBR,
  MESSAGE,
  LANG_CODE,
  SEVERITY,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT MSG.COMP_CODE,
    MSG.SEQ_NBR,
    TXT.TEXT MESSAGE,
    TXT.LANG_CODE,
    MSG.SEVERITY,
    MSG.ITM_ID,
    MSG.VERSION_NBR,
    row_number() OVER (PARTITION BY MSG.COMP_CODE, MSG.SEQ_NBR ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_MESSAGES MSG
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = MSG.ITM_ID
  AND TXT.TXTT_CODE = 'MSG'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW NAMES AS
SELECT ITM_ID,
  LANG_CODE,
  TAB_ALIAS,
  TEXT NAME
FROM
  (SELECT TXT.ITM_ID,
    TXT.LANG_CODE,
    TXT.TAB_ALIAS,
    TXT.TEXT,
    row_number() OVER (PARTITION BY TXT.ITM_ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_TEXT_ITEMS TXT
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE    = TXT.LANG_CODE
  AND ULP.USERID      = sys_context('PSR', 'USERID')
  WHERE TXT.TXTT_CODE = 'NAME'
  AND TXT.SEQ_NBR     = 1
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW NOTES AS
SELECT ITM_ID,
  SEQ_NBR,
  LANG_CODE,
  TAB_ALIAS,
  LONG_TEXT NOTE
FROM
  (SELECT TXT.ITM_ID,
    TXT.SEQ_NBR,
    TXT.LANG_CODE,
    TXT.TAB_ALIAS,
    TXT.LONG_TEXT,
    row_number() OVER (PARTITION BY TXT.ITM_ID, TXT.SEQ_NBR ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_TEXT_ITEMS TXT
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE    = TXT.LANG_CODE
  AND ULP.USERID      = sys_context('PSR', 'USERID')
  WHERE TXT.TXTT_CODE = 'NOTE'
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW ORIGINS AS
WITH LOC AS
  (SELECT ID,
    NAME,
    LANG_CODE,
    LOCT_CODE,
    START_DATE,
    END_DATE,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT LOC.ID,
      TXT.TEXT NAME,
      TXT.LANG_CODE,
      LOC.LOCT_CODE,
      LOC.START_DATE,
      LOC.END_DATE,
      LOC.ITM_ID,
      LOC.VERSION_NBR,
      row_number() OVER (PARTITION BY LOC.ID ORDER BY LANG.ACTIVE_FLAG, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_LOCATIONS LOC
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = LOC.ITM_ID
    AND TXT.TXTT_CODE = 'NAME'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  )
SELECT ID,
  NAME,
  LANG_CODE,
  ISO3166_ALPHA3_CODE,
  ISO3166_ALPHA2_CODE,
  ISO3166_NUMERIC_CODE,
  UNHCR_COUNTRY_CODE,
  START_DATE,
  END_DATE,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT LOC.ID,
    LOC.NAME,
    LOC.LANG_CODE,
    LOCA1.CHAR_VALUE AS ISO3166_ALPHA3_CODE,
    LOCA2.CHAR_VALUE AS ISO3166_ALPHA2_CODE,
    LOCA3.CHAR_VALUE AS ISO3166_NUMERIC_CODE,
    LOCA4.CHAR_VALUE AS UNHCR_COUNTRY_CODE,
    LOC.START_DATE,
    LOC.END_DATE,
    LOC.ITM_ID,
    LOC.VERSION_NBR
  FROM LOC
  LEFT OUTER JOIN T_LOCATION_ATTRIBUTES LOCA1
  ON LOCA1.LOC_ID      = LOC.ID
  AND LOCA1.LOCAT_CODE = 'IS03166A3'
  LEFT OUTER JOIN T_LOCATION_ATTRIBUTES LOCA2
  ON LOCA2.LOC_ID      = LOC.ID
  AND LOCA2.LOCAT_CODE = 'IS03166A2'
  LEFT OUTER JOIN T_LOCATION_ATTRIBUTES LOCA3
  ON LOCA3.LOC_ID      = LOC.ID
  AND LOCA3.LOCAT_CODE = 'IS03166NUM'
  LEFT OUTER JOIN T_LOCATION_ATTRIBUTES LOCA4
  ON LOCA4.LOC_ID      = LOC.ID
  AND LOCA4.LOCAT_CODE = 'HCRCC'
  WHERE LOC.LOCT_CODE IN ('COUNTRY', 'OTHORIGIN')
  ) ;



CREATE OR REPLACE VIEW POPULATION_GROUPS AS
WITH Q_AGE_PROFILES AS
  (SELECT CODE,
    DESCRIPTION,
    LANG_CODE,
    DISPLAY_SEQ,
    ACTIVE_FLAG,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT AGP.CODE,
      TXT.TEXT DESCRIPTION,
      TXT.LANG_CODE,
      AGP.DISPLAY_SEQ,
      AGP.ACTIVE_FLAG,
      AGP.ITM_ID,
      AGP.VERSION_NBR,
      row_number() OVER (PARTITION BY AGP.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_AGE_PROFILES AGP
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = AGP.ITM_ID
    AND TXT.TXTT_CODE = 'DESCR'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  ),
  Q_AGE_RANGES AS
  (SELECT ID,
    DESCRIPTION,
    LANG_CODE,
    AGP_CODE,
    AGE_FROM,
    AGE_TO,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT AGR.ID,
      TXT.TEXT DESCRIPTION,
      TXT.LANG_CODE,
      AGR.AGP_CODE,
      AGR.AGE_FROM,
      AGR.AGE_TO,
      AGR.ITM_ID,
      AGR.VERSION_NBR,
      row_number() OVER (PARTITION BY AGR.ID ORDER BY LANG.ACTIVE_FLAG, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_AGE_RANGES AGR
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = AGR.ITM_ID
    AND TXT.TXTT_CODE = 'DESCR'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  ),
  Q_DIMENSION_TYPES AS
  (SELECT CODE,
    DESCRIPTION,
    LANG_CODE,
    DISPLAY_SEQ,
    ACTIVE_FLAG,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT DIMT.CODE,
      TXT.TEXT DESCRIPTION,
      TXT.LANG_CODE,
      DIMT.DISPLAY_SEQ,
      DIMT.ACTIVE_FLAG,
      DIMT.ITM_ID,
      DIMT.VERSION_NBR,
      row_number() OVER (PARTITION BY DIMT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_DIMENSION_TYPES DIMT
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = DIMT.ITM_ID
    AND TXT.TXTT_CODE = 'DESCR'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  ),
  Q_DIMENSION_VALUES AS
  (SELECT ID,
    DESCRIPTION,
    LANG_CODE,
    DIMT_CODE,
    CODE,
    DISPLAY_SEQ,
    ACTIVE_FLAG,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT DIM.ID,
      TXT.TEXT DESCRIPTION,
      TXT.LANG_CODE,
      DIM.DIMT_CODE,
      DIM.CODE,
      DIM.DISPLAY_SEQ,
      DIM.ACTIVE_FLAG,
      DIM.ITM_ID,
      DIM.VERSION_NBR,
      row_number() OVER (PARTITION BY DIM.ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_DIMENSION_VALUES DIM
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = DIM.ITM_ID
    AND TXT.TXTT_CODE = 'DESCR'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  ),
  Q_DISPLACEMENT_STATUSES AS
  (SELECT CODE,
    DESCRIPTION,
    LANG_CODE,
    DISPLAY_SEQ,
    ACTIVE_FLAG,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT DST.CODE,
      TXT.TEXT DESCRIPTION,
      TXT.LANG_CODE,
      DST.DISPLAY_SEQ,
      DST.ACTIVE_FLAG,
      DST.ITM_ID,
      DST.VERSION_NBR,
      row_number() OVER (PARTITION BY DST.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_DISPLACEMENT_STATUSES DST
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = DST.ITM_ID
    AND TXT.TXTT_CODE = 'DESCR'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  ),
  Q_LOCATIONS AS
  (SELECT ID,
    NAME,
    LANG_CODE,
    LOCT_CODE,
    LOCTV_ID,
    START_DATE,
    END_DATE,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT LOC.ID,
      TXT.TEXT AS NAME,
      TXT.LANG_CODE,
      LOC.LOCT_CODE,
      LOC.LOCTV_ID,
      LOC.START_DATE,
      LOC.END_DATE,
      LOC.ITM_ID,
      LOC.VERSION_NBR,
      row_number() OVER (PARTITION BY LOC.ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_LOCATIONS LOC
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = LOC.ITM_ID
    AND TXT.TXTT_CODE = 'NAME'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  ),
  Q_LOCATION_TYPES AS
  (SELECT CODE,
    DESCRIPTION,
    LANG_CODE,
    DISPLAY_SEQ,
    ACTIVE_FLAG,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT LOCT.CODE,
      TXT.TEXT DESCRIPTION,
      TXT.LANG_CODE,
      LOCT.DISPLAY_SEQ,
      LOCT.ACTIVE_FLAG,
      LOCT.ITM_ID,
      LOCT.VERSION_NBR,
      row_number() OVER (PARTITION BY LOCT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_LOCATION_TYPES LOCT
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = LOCT.ITM_ID
    AND TXT.TXTT_CODE = 'DESCR'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  ),
  Q_LOCATION_TYPE_VARIANTS AS
  (SELECT ID,
    DESCRIPTION,
    LANG_CODE,
    LOCT_CODE,
    LOC_ID,
    LOCRT_CODE,
    DISPLAY_SEQ,
    ACTIVE_FLAG,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT LOCTV.ID,
      TXT.TEXT DESCRIPTION,
      TXT.LANG_CODE,
      LOCTV.LOCT_CODE,
      LOCTV.LOC_ID,
      LOCTV.LOCRT_CODE,
      LOCTV.DISPLAY_SEQ,
      LOCTV.ACTIVE_FLAG,
      LOCTV.ITM_ID,
      LOCTV.VERSION_NBR,
      row_number() OVER (PARTITION BY LOCTV.ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_LOCATION_TYPE_VARIANTS LOCTV
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = LOCTV.ITM_ID
    AND TXT.TXTT_CODE = 'DESCR'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  ),
  Q_POPULATION_PLANNING_GROUPS AS
  (SELECT ID,
    DESCRIPTION,
    LANG_CODE,
    LOC_ID,
    PPG_CODE,
    START_DATE,
    END_DATE,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT PPG.ID,
      TXT.TEXT DESCRIPTION,
      TXT.LANG_CODE,
      PPG.LOC_ID,
      PPG.PPG_CODE,
      PPG.START_DATE,
      PPG.END_DATE,
      PPG.ITM_ID,
      PPG.VERSION_NBR,
      row_number() OVER (PARTITION BY PPG.ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_POPULATION_PLANNING_GROUPS PPG
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = PPG.ITM_ID
    AND TXT.TXTT_CODE = 'DESCR'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  ),
  Q_SEXES AS
  (SELECT CODE,
    DESCRIPTION,
    LANG_CODE,
    DISPLAY_SEQ,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT SEX.CODE,
      TXT.TEXT DESCRIPTION,
      TXT.LANG_CODE,
      SEX.DISPLAY_SEQ,
      SEX.ITM_ID,
      SEX.VERSION_NBR,
      row_number() OVER (PARTITION BY SEX.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_SEXES SEX
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = SEX.ITM_ID
    AND TXT.TXTT_CODE = 'DESCR'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  ),
  Q_TEXT_ITEMS AS
  (SELECT ITM_ID,
    TXTT_CODE,
    SEQ_NBR,
    LANG_CODE,
    TAB_ALIAS,
    TEXT,
    LONG_TEXT
  FROM
    (SELECT TXT.ITM_ID,
      TXT.TXTT_CODE,
      TXT.SEQ_NBR,
      TXT.LANG_CODE,
      TXT.TAB_ALIAS,
      TXT.TEXT,
      TXT.LONG_TEXT,
      row_number() OVER (PARTITION BY TXT.ITM_ID, TXT.TXTT_CODE, TXT.SEQ_NBR ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_TEXT_ITEMS TXT
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  )
SELECT ID,
  START_DATE,
  END_DATE,
  DST_CODE,
  DST_DESCRIPTION,
  LOC_ID_ASYLUM_COUNTRY,
  LOC_NAME_ASYLUM_COUNTRY,
  ISO_COUNTRY_CODE,
  UNHCR_COUNTRY_CODE,
  LOC_ID_ASYLUM,
  LOC_NAME_ASYLUM,
  LOC_TYPE_DESCRIPTION,
  LOC_ID_ORIGIN_COUNTRY,
  LOC_NAME_ORIGIN_COUNTRY,
  ISO_ORIGIN_CODE,
  UNHCR_ORIGIN_CODE,
  LOC_ID_ORIGIN,
  LOC_NAME_ORIGIN,
  DIM_ID1,
  DIM_CODE1,
  DIM_DESCRIPTION1,
  DIMT_CODE1,
  DIMT_DESCRIPTION1,
  DIM_ID2,
  DIM_CODE2,
  DIM_DESCRIPTION2,
  DIMT_CODE2,
  DIMT_DESCRIPTION2,
  DIM_ID3,
  DIM_CODE3,
  DIM_DESCRIPTION3,
  DIMT_CODE3,
  DIMT_DESCRIPTION3,
  DIM_ID4,
  DIM_CODE4,
  DIM_DESCRIPTION4,
  DIMT_CODE4,
  DIMT_DESCRIPTION4,
  DIM_ID5,
  DIM_CODE5,
  DIM_DESCRIPTION5,
  DIMT_CODE5,
  DIMT_DESCRIPTION5,
  SEX_CODE,
  SEX_DESCRIPTION,
  AGR_ID,
  AGE_FROM,
  AGE_TO,
  AGR_DESCRIPTION,
  AGP_DESCRIPTION,
  SEQ_NBR,
  SUBGROUP_NAME,
  PPG_ID,
  PPG_CODE,
  PPG_DESCRIPTION,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT PGR.ID,
    PGR.START_DATE,
    PGR.END_DATE,
    PGR.DST_CODE,
    DST.DESCRIPTION AS DST_DESCRIPTION,
    PGR.LOC_ID_ASYLUM_COUNTRY,
    LOC1.NAME        AS LOC_NAME_ASYLUM_COUNTRY,
    LOCA1.CHAR_VALUE AS ISO_COUNTRY_CODE,
    LOCA2.CHAR_VALUE AS UNHCR_COUNTRY_CODE,
    PGR.LOC_ID_ASYLUM,
    LOC2.NAME                                AS LOC_NAME_ASYLUM,
    NVL(LOCTV.DESCRIPTION, LOCT.DESCRIPTION) AS LOC_TYPE_DESCRIPTION,
    PGR.LOC_ID_ORIGIN_COUNTRY,
    LOC3.NAME        AS LOC_NAME_ORIGIN_COUNTRY,
    LOCA3.CHAR_VALUE AS ISO_ORIGIN_CODE,
    LOCA4.CHAR_VALUE AS UNHCR_ORIGIN_CODE,
    PGR.LOC_ID_ORIGIN,
    LOC4.NAME AS LOC_NAME_ORIGIN,
    PGR.DIM_ID1,
    DIM1.CODE         AS DIM_CODE1,
    DIM1.DESCRIPTION  AS DIM_DESCRIPTION1,
    DIM1.DIMT_CODE    AS DIMT_CODE1,
    DIMT1.DESCRIPTION AS DIMT_DESCRIPTION1,
    PGR.DIM_ID2,
    DIM2.CODE         AS DIM_CODE2,
    DIM2.DESCRIPTION  AS DIM_DESCRIPTION2,
    DIM2.DIMT_CODE    AS DIMT_CODE2,
    DIMT2.DESCRIPTION AS DIMT_DESCRIPTION2,
    PGR.DIM_ID3,
    DIM3.CODE         AS DIM_CODE3,
    DIM3.DESCRIPTION  AS DIM_DESCRIPTION3,
    DIM3.DIMT_CODE    AS DIMT_CODE3,
    DIMT3.DESCRIPTION AS DIMT_DESCRIPTION3,
    PGR.DIM_ID4,
    DIM4.CODE         AS DIM_CODE4,
    DIM4.DESCRIPTION  AS DIM_DESCRIPTION4,
    DIM4.DIMT_CODE    AS DIMT_CODE4,
    DIMT4.DESCRIPTION AS DIMT_DESCRIPTION4,
    PGR.DIM_ID5,
    DIM5.CODE         AS DIM_CODE5,
    DIM5.DESCRIPTION  AS DIM_DESCRIPTION5,
    DIM5.DIMT_CODE    AS DIMT_CODE5,
    DIMT5.DESCRIPTION AS DIMT_DESCRIPTION5,
    PGR.SEX_CODE,
    SEX.DESCRIPTION AS SEX_DESCRIPTION,
    PGR.AGR_ID,
    AGR.AGE_FROM,
    AGR.AGE_TO,
    AGR.DESCRIPTION AS AGR_DESCRIPTION,
    AGP.DESCRIPTION AS AGP_DESCRIPTION,
    PGR.SEQ_NBR,
    TXT.TEXT AS SUBGROUP_NAME,
    PGR.PPG_ID,
    PPG.PPG_CODE,
    PPG.DESCRIPTION AS PPG_DESCRIPTION,
    PGR.ITM_ID,
    PGR.VERSION_NBR
  FROM T_POPULATION_GROUPS PGR
  LEFT OUTER JOIN Q_DISPLACEMENT_STATUSES DST
  ON DST.CODE = PGR.DST_CODE
  LEFT OUTER JOIN Q_LOCATIONS LOC1
  ON LOC1.ID = PGR.LOC_ID_ASYLUM_COUNTRY
  LEFT OUTER JOIN T_LOCATION_ATTRIBUTES LOCA1
  ON LOCA1.LOC_ID      = LOC1.ID
  AND LOCA1.LOCAT_CODE = 'IS03166A3'
  LEFT OUTER JOIN T_LOCATION_ATTRIBUTES LOCA2
  ON LOCA2.LOC_ID      = LOC1.ID
  AND LOCA2.LOCAT_CODE = 'HCRCC'
  LEFT OUTER JOIN Q_LOCATIONS LOC2
  ON LOC2.ID = PGR.LOC_ID_ASYLUM
  LEFT OUTER JOIN Q_LOCATION_TYPES LOCT
  ON LOCT.CODE = LOC2.LOCT_CODE
  LEFT OUTER JOIN Q_LOCATION_TYPE_VARIANTS LOCTV
  ON LOCTV.ID = LOC2.LOCTV_ID
  LEFT OUTER JOIN Q_LOCATIONS LOC3
  ON LOC3.ID = PGR.LOC_ID_ORIGIN_COUNTRY
  LEFT OUTER JOIN T_LOCATION_ATTRIBUTES LOCA3
  ON LOCA3.LOC_ID      = LOC3.ID
  AND LOCA3.LOCAT_CODE = 'IS03166A3'
  LEFT OUTER JOIN T_LOCATION_ATTRIBUTES LOCA4
  ON LOCA4.LOC_ID      = LOC3.ID
  AND LOCA4.LOCAT_CODE = 'HCRCC'
  LEFT OUTER JOIN Q_LOCATIONS LOC4
  ON LOC4.ID = PGR.LOC_ID_ORIGIN
  LEFT OUTER JOIN Q_DIMENSION_VALUES DIM1
  ON DIM1.ID = PGR.DIM_ID1
  LEFT OUTER JOIN Q_DIMENSION_TYPES DIMT1
  ON DIMT1.CODE = DIM1.DIMT_CODE
  LEFT OUTER JOIN Q_DIMENSION_VALUES DIM2
  ON DIM2.ID = PGR.DIM_ID2
  LEFT OUTER JOIN Q_DIMENSION_TYPES DIMT2
  ON DIMT2.CODE = DIM2.DIMT_CODE
  LEFT OUTER JOIN Q_DIMENSION_VALUES DIM3
  ON DIM3.ID = PGR.DIM_ID3
  LEFT OUTER JOIN Q_DIMENSION_TYPES DIMT3
  ON DIMT3.CODE = DIM3.DIMT_CODE
  LEFT OUTER JOIN Q_DIMENSION_VALUES DIM4
  ON DIM4.ID = PGR.DIM_ID4
  LEFT OUTER JOIN Q_DIMENSION_TYPES DIMT4
  ON DIMT4.CODE = DIM4.DIMT_CODE
  LEFT OUTER JOIN Q_DIMENSION_VALUES DIM5
  ON DIM5.ID = PGR.DIM_ID5
  LEFT OUTER JOIN Q_DIMENSION_TYPES DIMT5
  ON DIMT5.CODE = DIM5.DIMT_CODE
  LEFT OUTER JOIN Q_SEXES SEX
  ON SEX.CODE = PGR.SEX_CODE
  LEFT OUTER JOIN Q_AGE_RANGES AGR
  ON AGR.ID = PGR.AGR_ID
  LEFT OUTER JOIN Q_AGE_PROFILES AGP
  ON AGP.CODE = AGR.AGP_CODE
  LEFT OUTER JOIN Q_POPULATION_PLANNING_GROUPS PPG
  ON PPG.ID = PGR.PPG_ID
  LEFT OUTER JOIN Q_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = PGR.ITM_ID
  AND TXT.TXTT_CODE = 'PSGRNAME'
  AND TXT.SEQ_NBR   = 1
  ) ;



CREATE OR REPLACE VIEW POPULATION_PLANNING_GROUPS AS
SELECT ID,
  DESCRIPTION,
  LANG_CODE,
  LOC_ID,
  PPG_CODE,
  START_DATE,
  END_DATE,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT PPG.ID,
    TXT.TEXT DESCRIPTION,
    TXT.LANG_CODE,
    PPG.LOC_ID,
    PPG.PPG_CODE,
    PPG.START_DATE,
    PPG.END_DATE,
    PPG.ITM_ID,
    PPG.VERSION_NBR,
    row_number() OVER (PARTITION BY PPG.ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_POPULATION_PLANNING_GROUPS PPG
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = PPG.ITM_ID
  AND TXT.TXTT_CODE = 'DESCR'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW SEXES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT SEX.CODE,
    TXT.TEXT DESCRIPTION,
    TXT.LANG_CODE,
    SEX.DISPLAY_SEQ,
    SEX.ITM_ID,
    SEX.VERSION_NBR,
    row_number() OVER (PARTITION BY SEX.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_SEXES SEX
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = SEX.ITM_ID
  AND TXT.TXTT_CODE = 'DESCR'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW STATISTICS AS
WITH Q_AGE_PROFILES AS
  (SELECT CODE,
    DESCRIPTION,
    LANG_CODE,
    DISPLAY_SEQ,
    ACTIVE_FLAG,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT AGP.CODE,
      TXT.TEXT DESCRIPTION,
      TXT.LANG_CODE,
      AGP.DISPLAY_SEQ,
      AGP.ACTIVE_FLAG,
      AGP.ITM_ID,
      AGP.VERSION_NBR,
      row_number() OVER (PARTITION BY AGP.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_AGE_PROFILES AGP
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = AGP.ITM_ID
    AND TXT.TXTT_CODE = 'DESCR'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  ),
  Q_AGE_RANGES AS
  (SELECT ID,
    DESCRIPTION,
    LANG_CODE,
    AGP_CODE,
    AGE_FROM,
    AGE_TO,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT AGR.ID,
      TXT.TEXT DESCRIPTION,
      TXT.LANG_CODE,
      AGR.AGP_CODE,
      AGR.AGE_FROM,
      AGR.AGE_TO,
      AGR.ITM_ID,
      AGR.VERSION_NBR,
      row_number() OVER (PARTITION BY AGR.ID ORDER BY LANG.ACTIVE_FLAG, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_AGE_RANGES AGR
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = AGR.ITM_ID
    AND TXT.TXTT_CODE = 'DESCR'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  ),
  Q_DIMENSION_TYPES AS
  (SELECT CODE,
    DESCRIPTION,
    LANG_CODE,
    DISPLAY_SEQ,
    ACTIVE_FLAG,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT DIMT.CODE,
      TXT.TEXT DESCRIPTION,
      TXT.LANG_CODE,
      DIMT.DISPLAY_SEQ,
      DIMT.ACTIVE_FLAG,
      DIMT.ITM_ID,
      DIMT.VERSION_NBR,
      row_number() OVER (PARTITION BY DIMT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_DIMENSION_TYPES DIMT
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = DIMT.ITM_ID
    AND TXT.TXTT_CODE = 'DESCR'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  ),
  Q_DIMENSION_VALUES AS
  (SELECT ID,
    DESCRIPTION,
    LANG_CODE,
    DIMT_CODE,
    CODE,
    DISPLAY_SEQ,
    ACTIVE_FLAG,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT DIM.ID,
      TXT.TEXT DESCRIPTION,
      TXT.LANG_CODE,
      DIM.DIMT_CODE,
      DIM.CODE,
      DIM.DISPLAY_SEQ,
      DIM.ACTIVE_FLAG,
      DIM.ITM_ID,
      DIM.VERSION_NBR,
      row_number() OVER (PARTITION BY DIM.ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_DIMENSION_VALUES DIM
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = DIM.ITM_ID
    AND TXT.TXTT_CODE = 'DESCR'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  ),
  Q_DISPLACEMENT_STATUSES AS
  (SELECT CODE,
    DESCRIPTION,
    LANG_CODE,
    DISPLAY_SEQ,
    ACTIVE_FLAG,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT DST.CODE,
      TXT.TEXT DESCRIPTION,
      TXT.LANG_CODE,
      DST.DISPLAY_SEQ,
      DST.ACTIVE_FLAG,
      DST.ITM_ID,
      DST.VERSION_NBR,
      row_number() OVER (PARTITION BY DST.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_DISPLACEMENT_STATUSES DST
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = DST.ITM_ID
    AND TXT.TXTT_CODE = 'DESCR'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  ),
  Q_LOCATIONS AS
  (SELECT ID,
    NAME,
    LANG_CODE,
    LOCT_CODE,
    LOCTV_ID,
    START_DATE,
    END_DATE,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT LOC.ID,
      TXT.TEXT AS NAME,
      TXT.LANG_CODE,
      LOC.LOCT_CODE,
      LOC.LOCTV_ID,
      LOC.START_DATE,
      LOC.END_DATE,
      LOC.ITM_ID,
      LOC.VERSION_NBR,
      row_number() OVER (PARTITION BY LOC.ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_LOCATIONS LOC
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = LOC.ITM_ID
    AND TXT.TXTT_CODE = 'NAME'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  ),
  Q_LOCATION_TYPES AS
  (SELECT CODE,
    DESCRIPTION,
    LANG_CODE,
    DISPLAY_SEQ,
    ACTIVE_FLAG,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT LOCT.CODE,
      TXT.TEXT DESCRIPTION,
      TXT.LANG_CODE,
      LOCT.DISPLAY_SEQ,
      LOCT.ACTIVE_FLAG,
      LOCT.ITM_ID,
      LOCT.VERSION_NBR,
      row_number() OVER (PARTITION BY LOCT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_LOCATION_TYPES LOCT
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = LOCT.ITM_ID
    AND TXT.TXTT_CODE = 'DESCR'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  ),
  Q_LOCATION_TYPE_VARIANTS AS
  (SELECT ID,
    DESCRIPTION,
    LANG_CODE,
    LOCT_CODE,
    LOC_ID,
    LOCRT_CODE,
    DISPLAY_SEQ,
    ACTIVE_FLAG,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT LOCTV.ID,
      TXT.TEXT DESCRIPTION,
      TXT.LANG_CODE,
      LOCTV.LOCT_CODE,
      LOCTV.LOC_ID,
      LOCTV.LOCRT_CODE,
      LOCTV.DISPLAY_SEQ,
      LOCTV.ACTIVE_FLAG,
      LOCTV.ITM_ID,
      LOCTV.VERSION_NBR,
      row_number() OVER (PARTITION BY LOCTV.ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_LOCATION_TYPE_VARIANTS LOCTV
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = LOCTV.ITM_ID
    AND TXT.TXTT_CODE = 'DESCR'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  ),
  Q_POPULATION_PLANNING_GROUPS AS
  (SELECT ID,
    DESCRIPTION,
    LANG_CODE,
    LOC_ID,
    PPG_CODE,
    START_DATE,
    END_DATE,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT PPG.ID,
      TXT.TEXT DESCRIPTION,
      TXT.LANG_CODE,
      PPG.LOC_ID,
      PPG.PPG_CODE,
      PPG.START_DATE,
      PPG.END_DATE,
      PPG.ITM_ID,
      PPG.VERSION_NBR,
      row_number() OVER (PARTITION BY PPG.ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_POPULATION_PLANNING_GROUPS PPG
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = PPG.ITM_ID
    AND TXT.TXTT_CODE = 'DESCR'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  ),
  Q_SEXES AS
  (SELECT CODE,
    DESCRIPTION,
    LANG_CODE,
    DISPLAY_SEQ,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT SEX.CODE,
      TXT.TEXT DESCRIPTION,
      TXT.LANG_CODE,
      SEX.DISPLAY_SEQ,
      SEX.ITM_ID,
      SEX.VERSION_NBR,
      row_number() OVER (PARTITION BY SEX.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_SEXES SEX
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = SEX.ITM_ID
    AND TXT.TXTT_CODE = 'DESCR'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  ),
  Q_STATISTIC_TYPES AS
  (SELECT CODE,
    DESCRIPTION,
    LANG_CODE,
    DISPLAY_SEQ,
    ACTIVE_FLAG,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT STCT.CODE,
      TXT.TEXT DESCRIPTION,
      TXT.LANG_CODE,
      STCT.DISPLAY_SEQ,
      STCT.ACTIVE_FLAG,
      STCT.ITM_ID,
      STCT.VERSION_NBR,
      row_number() OVER (PARTITION BY STCT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_STATISTIC_TYPES STCT
    INNER JOIN T_TEXT_ITEMS TXT
    ON TXT.ITM_ID     = STCT.ITM_ID
    AND TXT.TXTT_CODE = 'DESCR'
    AND TXT.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  ),
  Q_TEXT_ITEMS AS
  (SELECT ITM_ID,
    TXTT_CODE,
    SEQ_NBR,
    LANG_CODE,
    TAB_ALIAS,
    TEXT,
    LONG_TEXT
  FROM
    (SELECT TXT.ITM_ID,
      TXT.TXTT_CODE,
      TXT.SEQ_NBR,
      TXT.LANG_CODE,
      TXT.TAB_ALIAS,
      TXT.TEXT,
      TXT.LONG_TEXT,
      row_number() OVER (PARTITION BY TXT.ITM_ID, TXT.TXTT_CODE, TXT.SEQ_NBR ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) AS RANK
    FROM T_TEXT_ITEMS TXT
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXT.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXT.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  )
SELECT ID,
  STCT_CODE,
  STCT_DESCRIPTION,
  START_DATE,
  END_DATE,
  DST_CODE,
  DST_DESCRIPTION,
  LOC_ID_ASYLUM_COUNTRY,
  LOC_NAME_ASYLUM_COUNTRY,
  ISO_COUNTRY_CODE,
  UNHCR_COUNTRY_CODE,
  LOC_ID_ASYLUM,
  LOC_NAME_ASYLUM,
  LOC_TYPE_DESCRIPTION,
  LOC_ID_ORIGIN_COUNTRY,
  LOC_NAME_ORIGIN_COUNTRY,
  ISO_ORIGIN_CODE,
  UNHCR_ORIGIN_CODE,
  LOC_ID_ORIGIN,
  LOC_NAME_ORIGIN,
  DIM_ID1,
  DIM_CODE1,
  DIM_DESCRIPTION1,
  DIMT_CODE1,
  DIMT_DESCRIPTION1,
  DIM_ID2,
  DIM_CODE2,
  DIM_DESCRIPTION2,
  DIMT_CODE2,
  DIMT_DESCRIPTION2,
  DIM_ID3,
  DIM_CODE3,
  DIM_DESCRIPTION3,
  DIMT_CODE3,
  DIMT_DESCRIPTION3,
  DIM_ID4,
  DIM_CODE4,
  DIM_DESCRIPTION4,
  DIMT_CODE4,
  DIMT_DESCRIPTION4,
  DIM_ID5,
  DIM_CODE5,
  DIM_DESCRIPTION5,
  DIMT_CODE5,
  DIMT_DESCRIPTION5,
  SEX_CODE,
  SEX_DESCRIPTION,
  AGR_ID,
  AGE_FROM,
  AGE_TO,
  AGR_DESCRIPTION,
  AGP_DESCRIPTION,
  PGR_SEQ_NBR,
  PGR_ID_PRIMARY,
  SUBGROUP_NAME,
  PPG_ID,
  PPG_CODE,
  PPG_DESCRIPTION,
  VALUE,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT STC.ID,
    STC.STCT_CODE,
    STCT.DESCRIPTION AS STCT_DESCRIPTION,
    STC.START_DATE,
    STC.END_DATE,
    STC.DST_CODE,
    DST.DESCRIPTION AS DST_DESCRIPTION,
    STC.LOC_ID_ASYLUM_COUNTRY,
    LOC1.NAME        AS LOC_NAME_ASYLUM_COUNTRY,
    LOCA1.CHAR_VALUE AS ISO_COUNTRY_CODE,
    LOCA2.CHAR_VALUE AS UNHCR_COUNTRY_CODE,
    STC.LOC_ID_ASYLUM,
    LOC2.NAME                                AS LOC_NAME_ASYLUM,
    NVL(LOCTV.DESCRIPTION, LOCT.DESCRIPTION) AS LOC_TYPE_DESCRIPTION,
    STC.LOC_ID_ORIGIN_COUNTRY,
    LOC3.NAME        AS LOC_NAME_ORIGIN_COUNTRY,
    LOCA3.CHAR_VALUE AS ISO_ORIGIN_CODE,
    LOCA4.CHAR_VALUE AS UNHCR_ORIGIN_CODE,
    STC.LOC_ID_ORIGIN,
    LOC4.NAME AS LOC_NAME_ORIGIN,
    STC.DIM_ID1,
    DIM1.CODE         AS DIM_CODE1,
    DIM1.DESCRIPTION  AS DIM_DESCRIPTION1,
    DIM1.DIMT_CODE    AS DIMT_CODE1,
    DIMT1.DESCRIPTION AS DIMT_DESCRIPTION1,
    STC.DIM_ID2,
    DIM2.CODE         AS DIM_CODE2,
    DIM2.DESCRIPTION  AS DIM_DESCRIPTION2,
    DIM2.DIMT_CODE    AS DIMT_CODE2,
    DIMT2.DESCRIPTION AS DIMT_DESCRIPTION2,
    STC.DIM_ID3,
    DIM3.CODE         AS DIM_CODE3,
    DIM3.DESCRIPTION  AS DIM_DESCRIPTION3,
    DIM3.DIMT_CODE    AS DIMT_CODE3,
    DIMT3.DESCRIPTION AS DIMT_DESCRIPTION3,
    STC.DIM_ID4,
    DIM4.CODE         AS DIM_CODE4,
    DIM4.DESCRIPTION  AS DIM_DESCRIPTION4,
    DIM4.DIMT_CODE    AS DIMT_CODE4,
    DIMT4.DESCRIPTION AS DIMT_DESCRIPTION4,
    STC.DIM_ID5,
    DIM5.CODE         AS DIM_CODE5,
    DIM5.DESCRIPTION  AS DIM_DESCRIPTION5,
    DIM5.DIMT_CODE    AS DIMT_CODE5,
    DIMT5.DESCRIPTION AS DIMT_DESCRIPTION5,
    STC.SEX_CODE,
    SEX.DESCRIPTION AS SEX_DESCRIPTION,
    STC.AGR_ID,
    AGR.AGE_FROM,
    AGR.AGE_TO,
    AGR.DESCRIPTION AS AGR_DESCRIPTION,
    AGP.DESCRIPTION AS AGP_DESCRIPTION,
    STC.PGR_SEQ_NBR,
    STC.PGR_ID_PRIMARY,
    TXT.TEXT AS SUBGROUP_NAME,
    STC.PPG_ID,
    PPG.PPG_CODE,
    PPG.DESCRIPTION AS PPG_DESCRIPTION,
    STC.VALUE,
    STC.ITM_ID,
    STC.VERSION_NBR
  FROM T_STATISTICS STC
  INNER JOIN Q_STATISTIC_TYPES STCT
  ON STCT.CODE = STC.STCT_CODE
  INNER JOIN Q_DISPLACEMENT_STATUSES DST
  ON DST.CODE = STC.DST_CODE
  LEFT OUTER JOIN Q_LOCATIONS LOC1
  ON LOC1.ID = STC.LOC_ID_ASYLUM_COUNTRY
  LEFT OUTER JOIN T_LOCATION_ATTRIBUTES LOCA1
  ON LOCA1.LOC_ID      = LOC1.ID
  AND LOCA1.LOCAT_CODE = 'IS03166A3'
  LEFT OUTER JOIN T_LOCATION_ATTRIBUTES LOCA2
  ON LOCA2.LOC_ID      = LOC1.ID
  AND LOCA2.LOCAT_CODE = 'HCRCC'
  LEFT OUTER JOIN Q_LOCATIONS LOC2
  ON LOC2.ID = STC.LOC_ID_ASYLUM
  LEFT OUTER JOIN Q_LOCATION_TYPES LOCT
  ON LOCT.CODE = LOC2.LOCT_CODE
  LEFT OUTER JOIN Q_LOCATION_TYPE_VARIANTS LOCTV
  ON LOCTV.ID = LOC2.LOCTV_ID
  LEFT OUTER JOIN Q_LOCATIONS LOC3
  ON LOC3.ID = STC.LOC_ID_ORIGIN_COUNTRY
  LEFT OUTER JOIN T_LOCATION_ATTRIBUTES LOCA3
  ON LOCA3.LOC_ID      = LOC3.ID
  AND LOCA3.LOCAT_CODE = 'IS03166A3'
  LEFT OUTER JOIN T_LOCATION_ATTRIBUTES LOCA4
  ON LOCA4.LOC_ID      = LOC3.ID
  AND LOCA4.LOCAT_CODE = 'HCRCC'
  LEFT OUTER JOIN Q_LOCATIONS LOC4
  ON LOC4.ID = STC.LOC_ID_ORIGIN
  LEFT OUTER JOIN Q_DIMENSION_VALUES DIM1
  ON DIM1.ID = STC.DIM_ID1
  LEFT OUTER JOIN Q_DIMENSION_TYPES DIMT1
  ON DIMT1.CODE = DIM1.DIMT_CODE
  LEFT OUTER JOIN Q_DIMENSION_VALUES DIM2
  ON DIM2.ID = STC.DIM_ID2
  LEFT OUTER JOIN Q_DIMENSION_TYPES DIMT2
  ON DIMT2.CODE = DIM2.DIMT_CODE
  LEFT OUTER JOIN Q_DIMENSION_VALUES DIM3
  ON DIM3.ID = STC.DIM_ID3
  LEFT OUTER JOIN Q_DIMENSION_TYPES DIMT3
  ON DIMT3.CODE = DIM3.DIMT_CODE
  LEFT OUTER JOIN Q_DIMENSION_VALUES DIM4
  ON DIM4.ID = STC.DIM_ID4
  LEFT OUTER JOIN Q_DIMENSION_TYPES DIMT4
  ON DIMT4.CODE = DIM4.DIMT_CODE
  LEFT OUTER JOIN Q_DIMENSION_VALUES DIM5
  ON DIM5.ID = STC.DIM_ID5
  LEFT OUTER JOIN Q_DIMENSION_TYPES DIMT5
  ON DIMT5.CODE = DIM5.DIMT_CODE
  LEFT OUTER JOIN Q_SEXES SEX
  ON SEX.CODE = STC.SEX_CODE
  LEFT OUTER JOIN Q_AGE_RANGES AGR
  ON AGR.ID = STC.AGR_ID
  LEFT OUTER JOIN Q_AGE_PROFILES AGP
  ON AGP.CODE = AGR.AGP_CODE
  LEFT OUTER JOIN T_POPULATION_GROUPS PGR
  ON PGR.ID = STC.PGR_ID_PRIMARY
  LEFT OUTER JOIN Q_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = PGR.ITM_ID
  AND TXT.TXTT_CODE = 'PSGRNAME'
  AND TXT.SEQ_NBR   = 1
  LEFT OUTER JOIN Q_POPULATION_PLANNING_GROUPS PPG
  ON PPG.ID = STC.PPG_ID
  ) ;



CREATE OR REPLACE VIEW STATISTIC_GROUPS AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT STCG.CODE,
    TXT.TEXT DESCRIPTION,
    TXT.LANG_CODE,
    STCG.DISPLAY_SEQ,
    STCG.ACTIVE_FLAG,
    STCG.ITM_ID,
    STCG.VERSION_NBR,
    row_number() OVER (PARTITION BY STCG.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_STATISTIC_GROUPS STCG
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = STCG.ITM_ID
  AND TXT.TXTT_CODE = 'DESCR'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW STATISTIC_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT STCT.CODE,
    TXT.TEXT DESCRIPTION,
    TXT.LANG_CODE,
    STCT.DISPLAY_SEQ,
    STCT.ACTIVE_FLAG,
    STCT.ITM_ID,
    STCT.VERSION_NBR,
    row_number() OVER (PARTITION BY STCT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_STATISTIC_TYPES STCT
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = STCT.ITM_ID
  AND TXT.TXTT_CODE = 'DESCR'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW STATISTIC_TYPES_IN_GROUPS AS
SELECT STCTG.STCG_CODE,
  STCTG.STCT_CODE,
  STCTG.ITM_ID,
  STCTG.VERSION_NBR
FROM T_STATISTIC_TYPES_IN_GROUPS STCTG ;



CREATE OR REPLACE VIEW SYSTEM_PARAMETERS AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DATA_TYPE,
  CHAR_VALUE,
  NUM_VALUE,
  DATE_VALUE,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT SYP.CODE,
    TXT.TEXT DESCRIPTION,
    TXT.LANG_CODE,
    SYP.DATA_TYPE,
    SYP.CHAR_VALUE,
    SYP.NUM_VALUE,
    SYP.DATE_VALUE,
    SYP.ITM_ID,
    SYP.VERSION_NBR,
    row_number() OVER (PARTITION BY SYP.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_SYSTEM_PARAMETERS SYP
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = SYP.ITM_ID
  AND TXT.TXTT_CODE = 'DESCR'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW SYSTEM_USERS AS
SELECT USERID,
  NAME,
  LANG_CODE,
  LOCKED_FLAG,
  TEMPLATE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT USR.USERID,
    TXT.TEXT NAME,
    TXT.LANG_CODE,
    USR.LOCKED_FLAG,
    USR.TEMPLATE_FLAG,
    USR.ITM_ID,
    USR.VERSION_NBR,
    row_number() OVER (PARTITION BY USR.USERID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_SYSTEM_USERS USR
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = USR.ITM_ID
  AND TXT.TXTT_CODE = 'NAME'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW TEXT_ITEMS AS
SELECT ITM_ID,
  TXTT_CODE,
  SEQ_NBR,
  LANG_CODE,
  TAB_ALIAS,
  TEXT,
  LONG_TEXT
FROM
  (SELECT TXT.ITM_ID,
    TXT.TXTT_CODE,
    TXT.SEQ_NBR,
    TXT.LANG_CODE,
    TXT.TAB_ALIAS,
    TXT.TEXT,
    TXT.LONG_TEXT,
    row_number() OVER (PARTITION BY TXT.ITM_ID, TXT.TXTT_CODE, TXT.SEQ_NBR ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_TEXT_ITEMS TXT
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW TEXT_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT TXTT.CODE,
    TXT.TEXT DESCRIPTION,
    TXT.LANG_CODE,
    TXTT.DISPLAY_SEQ,
    TXTT.ACTIVE_FLAG,
    TXTT.ITM_ID,
    TXTT.VERSION_NBR,
    row_number() OVER (PARTITION BY TXTT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_TEXT_TYPES TXTT
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = TXTT.ITM_ID
  AND TXT.TXTT_CODE = 'DESCR'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW TIME_PERIODS AS
SELECT PER.ID,
  PER.PERT_CODE,
  PER.START_DATE,
  PER.END_DATE,
  PER.ITM_ID,
  PER.VERSION_NBR
FROM T_TIME_PERIODS PER ;



CREATE OR REPLACE VIEW TIME_PERIOD_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT PERT.CODE,
    TXT.TEXT DESCRIPTION,
    TXT.LANG_CODE,
    PERT.DISPLAY_SEQ,
    PERT.ACTIVE_FLAG,
    PERT.ITM_ID,
    PERT.VERSION_NBR,
    row_number() OVER (PARTITION BY PERT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_TIME_PERIOD_TYPES PERT
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = PERT.ITM_ID
  AND TXT.TXTT_CODE = 'DESCR'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW USER_ATTRIBUTES AS
SELECT UAT.USERID,
  UAT.UATT_CODE,
  UAT.CHAR_VALUE,
  UAT.NUM_VALUE,
  UAT.DATE_VALUE,
  UAT.ITM_ID,
  UAT.VERSION_NBR
FROM T_USER_ATTRIBUTES UAT ;



CREATE OR REPLACE VIEW USER_ATTRIBUTE_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DATA_TYPE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT UATT.CODE,
    TXT.TEXT DESCRIPTION,
    TXT.LANG_CODE,
    UATT.DATA_TYPE,
    UATT.DISPLAY_SEQ,
    UATT.ACTIVE_FLAG,
    UATT.ITM_ID,
    UATT.VERSION_NBR,
    row_number() OVER (PARTITION BY UATT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_USER_ATTRIBUTE_TYPES UATT
  INNER JOIN T_TEXT_ITEMS TXT
  ON TXT.ITM_ID     = UATT.ITM_ID
  AND TXT.TXTT_CODE = 'DESCR'
  AND TXT.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXT.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXT.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW USER_LANGUAGE_PREFERENCES AS
SELECT ULP.USERID,
  ULP.LANG_CODE,
  ULP.PREF_SEQ,
  ULP.VERSION_NBR
FROM T_USER_LANGUAGE_PREFERENCES ULP ;



CREATE SEQUENCE AGR_SEQ ;

CREATE SEQUENCE ITM_SEQ ;

CREATE SEQUENCE SOU_SEQ ;

CREATE SEQUENCE DIM_SEQ ;

CREATE SEQUENCE LOC_SEQ 
    MAXVALUE 99999999 ;

CREATE SEQUENCE LOCTV_SEQ ;

CREATE SEQUENCE PRM_SEQ ;

CREATE SEQUENCE PGR_SEQ ;

CREATE SEQUENCE PPG_SEQ ;

CREATE SEQUENCE ROL_SEQ ;

CREATE SEQUENCE STC_SEQ ;

CREATE SEQUENCE ACT_SEQ ;

CREATE OR REPLACE TRIGGER TR_ACT_RBI_ID 
BEFORE INSERT ON T_TEST_ACTIONS 
FOR EACH ROW 
BEGIN 
    SELECT ACT_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL; 
END;
/

CREATE SEQUENCE TAI_SEQ ;

CREATE OR REPLACE TRIGGER TR_TAI_RBI_ID 
BEFORE INSERT ON T_TEST_ACTION_INVOCATIONS 
FOR EACH ROW 
BEGIN 
    SELECT TAI_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL; 
END;
/

CREATE SEQUENCE PER_SEQ ;



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            53
-- CREATE INDEX                             5
-- ALTER TABLE                            332
-- CREATE VIEW                             38
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           2
-- ALTER TRIGGER                            0
-- CREATE STRUCTURED TYPE                   0
-- CREATE COLLECTION TYPE                   0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                         14
-- CREATE MATERIALIZED VIEW                 0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
