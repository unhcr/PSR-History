-- Generated by Oracle SQL Developer Data Modeler 3.1.0.700
--   at:        2012-05-04 14:13:18 CEST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



CREATE TABLE T_AGE_PROFILES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_AGE_PROFILES 
    ADD CONSTRAINT CH_AGP_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_AGE_PROFILES 
    ADD CONSTRAINT CH_AGP_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_AGE_PROFILES 
    ADD CONSTRAINT PK_AGP PRIMARY KEY ( CODE ) ;


ALTER TABLE T_AGE_PROFILES 
    ADD CONSTRAINT UK_AGP_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_AGE_RANGES 
    ( 
     ID INTEGER  NOT NULL , 
     AGP_CODE VARCHAR2 (10)  NOT NULL , 
     AGE_FROM NUMBER (3)  NOT NULL , 
     AGE_TO NUMBER (3)  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_AGE_RANGES 
    ADD CONSTRAINT CH_AGR_ID 
    CHECK ( ID > 0) 
;


ALTER TABLE T_AGE_RANGES 
    ADD CONSTRAINT CH_AGR 
    CHECK (AGE_TO >= AGE_FROM)
;


ALTER TABLE T_AGE_RANGES 
    ADD CONSTRAINT PK_AGR PRIMARY KEY ( ID ) ;


ALTER TABLE T_AGE_RANGES 
    ADD CONSTRAINT UK_AGR UNIQUE ( AGP_CODE , AGE_FROM ) ;


ALTER TABLE T_AGE_RANGES 
    ADD CONSTRAINT UK_AGR_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_COMPONENTS 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     MSG_SEQ_NBR_MAX INTEGER DEFAULT 0  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_COMPONENTS 
    ADD CONSTRAINT CH_COMP_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_COMPONENTS 
    ADD CONSTRAINT CH_COMP_MSG_SEQ_NBR_MAX 
    CHECK ( MSG_SEQ_NBR_MAX >= 0) 
;


ALTER TABLE T_COMPONENTS 
    ADD CONSTRAINT CH_COMP_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_COMPONENTS 
    ADD CONSTRAINT PK_COMP PRIMARY KEY ( CODE ) ;


ALTER TABLE T_COMPONENTS 
    ADD CONSTRAINT UK_COMP_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_DATA_ITEMS 
    ( 
     ID INTEGER  NOT NULL , 
     TAB_ALIAS VARCHAR2 (10)  NOT NULL 
    ) 
;



ALTER TABLE T_DATA_ITEMS 
    ADD CONSTRAINT CH_ITM_ID 
    CHECK ( ID > 0) 
;


ALTER TABLE T_DATA_ITEMS 
    ADD CONSTRAINT PK_ITM PRIMARY KEY ( ID ) ;



CREATE TABLE T_DIMENSION_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_DIMENSION_TYPES 
    ADD CONSTRAINT CH_DIMT_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_DIMENSION_TYPES 
    ADD CONSTRAINT CH_DIMT_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_DIMENSION_TYPES 
    ADD CONSTRAINT PK_DIMT PRIMARY KEY ( CODE ) ;


ALTER TABLE T_DIMENSION_TYPES 
    ADD CONSTRAINT UK_DIMT_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_DIMENSION_VALUES 
    ( 
     ID INTEGER  NOT NULL , 
     DIMT_CODE VARCHAR2 (10)  NOT NULL , 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_DIMENSION_VALUES 
    ADD CONSTRAINT CH_DIM_ID 
    CHECK ( ID > 0) 
;


ALTER TABLE T_DIMENSION_VALUES 
    ADD CONSTRAINT CH_DIM_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_DIMENSION_VALUES 
    ADD CONSTRAINT PK_DIM PRIMARY KEY ( ID ) ;


ALTER TABLE T_DIMENSION_VALUES 
    ADD CONSTRAINT UK_DIM UNIQUE ( DIMT_CODE , CODE ) ;


ALTER TABLE T_DIMENSION_VALUES 
    ADD CONSTRAINT UK_DIM_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_LANGUAGES 
    ( 
     CODE VARCHAR2 (6)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_LANGUAGES 
    ADD CONSTRAINT CH_LANG_CODE 
    CHECK ( CODE = trim(CODE)) 
;


ALTER TABLE T_LANGUAGES 
    ADD CONSTRAINT CH_LANG_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG in ('Y', 'N')) 
;


ALTER TABLE T_LANGUAGES 
    ADD CONSTRAINT PK_LANG PRIMARY KEY ( CODE ) ;


ALTER TABLE T_LANGUAGES 
    ADD CONSTRAINT UK_LANG_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_LOCATIONS 
    ( 
     ID NUMBER (10)  NOT NULL , 
     LOCT_CODE VARCHAR2 (10)  NOT NULL , 
     LOCTV_ID INTEGER , 
     START_DATE DATE  NOT NULL , 
     END_DATE DATE  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_LOCATIONS 
    ADD CONSTRAINT CH_LOC_ID 
    CHECK ( ID > 0) 
;


ALTER TABLE T_LOCATIONS 
    ADD CONSTRAINT CH_LOC_DATES 
    CHECK (END_DATE > START_DATE)
;


ALTER TABLE T_LOCATIONS 
    ADD CONSTRAINT PK_LOC PRIMARY KEY ( ID ) ;


ALTER TABLE T_LOCATIONS 
    ADD CONSTRAINT UK_LOC_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_LOCATION_ATTRIBUTES 
    ( 
     LOC_ID NUMBER (10)  NOT NULL , 
     LOCAT_CODE VARCHAR2 (10)  NOT NULL , 
     CHAR_VALUE VARCHAR2 (1000) , 
     NUM_VALUE NUMBER , 
     DATE_VALUE DATE , 
     ITM_ID INTEGER , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_LOCATION_ATTRIBUTES 
    ADD CONSTRAINT CH_LOCA_VALUE 
    CHECK ((CHAR_VALUE is not null and NUM_VALUE is null and DATE_VALUE is null) or
(CHAR_VALUE is null and NUM_VALUE is not null and DATE_VALUE is null) or
(CHAR_VALUE is null and NUM_VALUE is null and DATE_VALUE is not null))
;

CREATE INDEX PSR.IX_LOCA_LOCAT ON T_LOCATION_ATTRIBUTES 
    ( 
     LOCAT_CODE ASC 
    ) 
;

ALTER TABLE T_LOCATION_ATTRIBUTES 
    ADD CONSTRAINT PK_LOCA PRIMARY KEY ( LOC_ID, LOCAT_CODE ) ;


ALTER TABLE T_LOCATION_ATTRIBUTES 
    ADD CONSTRAINT UK_LOCA_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_LOCATION_ATTRIBUTE_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DATA_TYPE VARCHAR2 (1)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_LOCATION_ATTRIBUTE_TYPES 
    ADD CONSTRAINT CH_LOCAT_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_LOCATION_ATTRIBUTE_TYPES 
    ADD CONSTRAINT CH_LOCAT_DATA_TYPE 
    CHECK ( DATA_TYPE IN ('C', 'D', 'N')) 
;


ALTER TABLE T_LOCATION_ATTRIBUTE_TYPES 
    ADD CONSTRAINT CH_LOCAT_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_LOCATION_ATTRIBUTE_TYPES 
    ADD CONSTRAINT PK_LOCAT PRIMARY KEY ( CODE ) ;


ALTER TABLE T_LOCATION_ATTRIBUTE_TYPES 
    ADD CONSTRAINT UK_LOCAT_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_LOCATION_RELATIONSHIPS 
    ( 
     LOC_ID_FROM NUMBER (10)  NOT NULL , 
     LOC_ID_TO NUMBER (10)  NOT NULL , 
     LOCRT_CODE VARCHAR2 (10)  NOT NULL , 
     START_DATE DATE  NOT NULL , 
     END_DATE DATE  NOT NULL , 
     ITM_ID INTEGER , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_LOCATION_RELATIONSHIPS 
    ADD CONSTRAINT CH_LOCR_DATES 
    CHECK (END_DATE > START_DATE)
;


ALTER TABLE T_LOCATION_RELATIONSHIPS 
    ADD CONSTRAINT PK_LOCR PRIMARY KEY ( LOC_ID_FROM, LOC_ID_TO, LOCRT_CODE, START_DATE ) ;


ALTER TABLE T_LOCATION_RELATIONSHIPS 
    ADD CONSTRAINT UK_LOCR_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_LOCATION_RELATIONSHIP_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_LOCATION_RELATIONSHIP_TYPES 
    ADD CONSTRAINT CH_LOCRT_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_LOCATION_RELATIONSHIP_TYPES 
    ADD CONSTRAINT CH_LOCRT_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_LOCATION_RELATIONSHIP_TYPES 
    ADD CONSTRAINT PK_LOCRT PRIMARY KEY ( CODE ) ;


ALTER TABLE T_LOCATION_RELATIONSHIP_TYPES 
    ADD CONSTRAINT UK_LOCRT_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_LOCATION_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_LOCATION_TYPES 
    ADD CONSTRAINT CH_LOCT_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_LOCATION_TYPES 
    ADD CONSTRAINT CH_LOCT_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_LOCATION_TYPES 
    ADD CONSTRAINT PK_LOCT PRIMARY KEY ( CODE ) ;


ALTER TABLE T_LOCATION_TYPES 
    ADD CONSTRAINT UK_LOCT_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_LOCATION_TYPE_RELATIONSHIPS 
    ( 
     LOCT_CODE_FROM VARCHAR2 (10)  NOT NULL , 
     LOCT_CODE_TO VARCHAR2 (10)  NOT NULL , 
     LOCRT_CODE VARCHAR2 (10)  NOT NULL , 
     ITM_ID INTEGER , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_LOCATION_TYPE_RELATIONSHIPS 
    ADD CONSTRAINT PK_LOCTR PRIMARY KEY ( LOCT_CODE_FROM, LOCT_CODE_TO, LOCRT_CODE ) ;


ALTER TABLE T_LOCATION_TYPE_RELATIONSHIPS 
    ADD CONSTRAINT UK_LOCTR_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_LOCATION_TYPE_VARIANTS 
    ( 
     ID INTEGER  NOT NULL , 
     LOCT_CODE VARCHAR2 (10)  NOT NULL , 
     LOC_ID NUMBER (10)  NOT NULL , 
     LOCRT_CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_LOCATION_TYPE_VARIANTS 
    ADD CONSTRAINT CH_LOCTV_ID 
    CHECK ( ID > 0) 
;


ALTER TABLE T_LOCATION_TYPE_VARIANTS 
    ADD CONSTRAINT CH_LOCTV_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_LOCATION_TYPE_VARIANTS 
    ADD CONSTRAINT PK_LOCTV PRIMARY KEY ( ID ) ;


ALTER TABLE T_LOCATION_TYPE_VARIANTS 
    ADD CONSTRAINT UK_LOCTV_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_MESSAGES 
    ( 
     COMP_CODE VARCHAR2 (10)  NOT NULL , 
     SEQ_NBR INTEGER  NOT NULL , 
     SEVERITY VARCHAR2 (1) DEFAULT 'E'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_MESSAGES 
    ADD CONSTRAINT CH_MSG_SEQ_NBR 
    CHECK ( SEQ_NBR > 0) 
;


ALTER TABLE T_MESSAGES 
    ADD CONSTRAINT CH_MSG_SEVERITY 
    CHECK ( SEVERITY IN ('E', 'I', 'S', 'W')) 
;


ALTER TABLE T_MESSAGES 
    ADD CONSTRAINT PK_MSG PRIMARY KEY ( COMP_CODE, SEQ_NBR ) ;


ALTER TABLE T_MESSAGES 
    ADD CONSTRAINT UK_MSG_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_POPULATION_CATEGORIES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_POPULATION_CATEGORIES 
    ADD CONSTRAINT CH_POPC_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_POPULATION_CATEGORIES 
    ADD CONSTRAINT CH_POPC_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_POPULATION_CATEGORIES 
    ADD CONSTRAINT PK_POPC PRIMARY KEY ( CODE ) ;


ALTER TABLE T_POPULATION_CATEGORIES 
    ADD CONSTRAINT UK_POPC_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_POPULATION_PLANNING_GROUPS 
    ( 
     ID INTEGER  NOT NULL , 
     LOC_ID NUMBER (10)  NOT NULL , 
     PPG_CODE VARCHAR2 (5)  NOT NULL , 
     START_DATE DATE  NOT NULL , 
     END_DATE DATE  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_POPULATION_PLANNING_GROUPS 
    ADD CONSTRAINT CH_PPG_ID 
    CHECK ( ID > 0) 
;


ALTER TABLE T_POPULATION_PLANNING_GROUPS 
    ADD CONSTRAINT CH_PPG_DATES 
    CHECK (END_DATE > START_DATE)
;


ALTER TABLE T_POPULATION_PLANNING_GROUPS 
    ADD CONSTRAINT PK_PPG PRIMARY KEY ( ID ) ;


ALTER TABLE T_POPULATION_PLANNING_GROUPS 
    ADD CONSTRAINT UK_PPG UNIQUE ( LOC_ID , PPG_CODE , START_DATE ) ;


ALTER TABLE T_POPULATION_PLANNING_GROUPS 
    ADD CONSTRAINT UK_PPG_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_SEXES 
    ( 
     CODE VARCHAR2 (1)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_SEXES 
    ADD CONSTRAINT CH_SEX_CODE 
    CHECK ( CODE IN ('F', 'M')) 
;


ALTER TABLE T_SEXES 
    ADD CONSTRAINT PK_SEX PRIMARY KEY ( CODE ) ;


ALTER TABLE T_SEXES 
    ADD CONSTRAINT UK_SEX_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_STATISTICS 
    ( 
     ID INTEGER  NOT NULL , 
     STCT_CODE VARCHAR2 (10)  NOT NULL , 
     LOC_ID_COUNTRY NUMBER (10)  NOT NULL , 
     LOC_ID_ASYLUM NUMBER (10)  NOT NULL , 
     LOC_ID_ORIGIN NUMBER (10) , 
     LOC_ID_SOURCE NUMBER (10) , 
     PPG_ID INTEGER , 
     POPC_CODE VARCHAR2 (10) , 
     PER_ID INTEGER , 
     SEX_CODE VARCHAR2 (1) , 
     AGR_ID INTEGER , 
     DIM_ID1 INTEGER , 
     DIM_ID2 INTEGER , 
     DIM_ID3 INTEGER , 
     DIM_ID4 INTEGER , 
     DIM_ID5 INTEGER , 
     STB_ID INTEGER , 
     VALUE INTEGER  NOT NULL , 
     ITM_ID INTEGER , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT CH_STC_ID 
    CHECK (ID > 0)
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT PK_STC PRIMARY KEY ( ID ) ;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT UK_STC UNIQUE ( STCT_CODE , LOC_ID_ASYLUM , LOC_ID_COUNTRY , LOC_ID_ORIGIN , LOC_ID_SOURCE , PPG_ID , POPC_CODE , PER_ID , SEX_CODE , AGR_ID , DIM_ID1 , DIM_ID2 , DIM_ID3 , DIM_ID4 , DIM_ID5 ) ;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT UK_STC_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_STATISTICS_BATCHES 
    ( 
     ID INTEGER  NOT NULL , 
     DESCRIPTION VARCHAR2 (1000)  NOT NULL , 
     STATUS VARCHAR2 (10) , 
     PROVENANCE VARCHAR2 (100) 
    ) 
;



ALTER TABLE T_STATISTICS_BATCHES 
    ADD CONSTRAINT PK_STB PRIMARY KEY ( ID ) ;



CREATE TABLE T_STATISTIC_GROUPS 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_STATISTIC_GROUPS 
    ADD CONSTRAINT CH_STCG_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_STATISTIC_GROUPS 
    ADD CONSTRAINT CH_STCG_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_STATISTIC_GROUPS 
    ADD CONSTRAINT PK_STCG PRIMARY KEY ( CODE ) ;


ALTER TABLE T_STATISTIC_GROUPS 
    ADD CONSTRAINT UK_STCG_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_STATISTIC_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT CH_STCT_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT CH_STCT_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT PK_STCT PRIMARY KEY ( CODE ) ;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT UK_STCT_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_STATISTIC_TYPES_IN_GROUPS 
    ( 
     STCG_CODE VARCHAR2 (10)  NOT NULL , 
     STCT_CODE VARCHAR2 (10)  NOT NULL , 
     ITM_ID INTEGER , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_STATISTIC_TYPES_IN_GROUPS 
    ADD CONSTRAINT PK_STCTG PRIMARY KEY ( STCG_CODE, STCT_CODE ) ;


ALTER TABLE T_STATISTIC_TYPES_IN_GROUPS 
    ADD CONSTRAINT UK_STCTG_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_SYSTEM_PARAMETERS 
    ( 
     CODE VARCHAR2 (30)  NOT NULL , 
     DATA_TYPE VARCHAR2 (1)  NOT NULL , 
     CHAR_VALUE VARCHAR2 (1000) , 
     NUM_VALUE NUMBER , 
     DATE_VALUE DATE , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_SYSTEM_PARAMETERS 
    ADD CONSTRAINT CH_SYP_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_SYSTEM_PARAMETERS 
    ADD CONSTRAINT CH_SYP_DATA_TYPE 
    CHECK ((DATA_TYPE = 'C' and CHAR_VALUE is not null and NUM_VALUE is null and DATE_VALUE is null) or
(DATA_TYPE = 'N' and CHAR_VALUE is null and NUM_VALUE is not null and DATE_VALUE is null) or
(DATA_TYPE = 'D' and CHAR_VALUE is null and NUM_VALUE is null and DATE_VALUE is not null))
;


ALTER TABLE T_SYSTEM_PARAMETERS 
    ADD CONSTRAINT PK_SYP PRIMARY KEY ( CODE ) ;


ALTER TABLE T_SYSTEM_PARAMETERS 
    ADD CONSTRAINT UK_SYP_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_SYSTEM_USERS 
    ( 
     USERID VARCHAR2 (30)  NOT NULL , 
     LOCKED_FLAG VARCHAR2 (1) DEFAULT 'N'  NOT NULL , 
     TEMPLATE_FLAG VARCHAR2 (1) DEFAULT 'N'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_SYSTEM_USERS 
    ADD CONSTRAINT CH_USR_USERID 
    CHECK ( USERID = trim(USERID)) 
;


ALTER TABLE T_SYSTEM_USERS 
    ADD CONSTRAINT CH_USR_LOCKED_FLAG 
    CHECK ( LOCKED_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_SYSTEM_USERS 
    ADD CONSTRAINT CH_USR_TEMPLATE_FLAG 
    CHECK ( TEMPLATE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_SYSTEM_USERS 
    ADD CONSTRAINT PK_USR PRIMARY KEY ( USERID ) ;


ALTER TABLE T_SYSTEM_USERS 
    ADD CONSTRAINT UK_USR_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_TABLE_ALIASES 
    ( 
     ALIAS VARCHAR2 (10)  NOT NULL , 
     TABLE_NAME VARCHAR2 (30)  NOT NULL , 
     ITM_ID INTEGER 
    ) 
;



ALTER TABLE T_TABLE_ALIASES 
    ADD CONSTRAINT CH_TAB_ALIAS 
    CHECK ( ALIAS = trim(upper(ALIAS))) 
;


ALTER TABLE T_TABLE_ALIASES 
    ADD CONSTRAINT PK_TAB PRIMARY KEY ( ALIAS ) ;


ALTER TABLE T_TABLE_ALIASES 
    ADD CONSTRAINT UK_TAB_ITM_ID UNIQUE ( ITM_ID ) ;


ALTER TABLE T_TABLE_ALIASES 
    ADD CONSTRAINT UK_TAB_TABLE_NAME UNIQUE ( TABLE_NAME ) ;



CREATE TABLE T_TEXT_ITEMS 
    ( 
     ITM_ID INTEGER  NOT NULL , 
     TXTT_CODE VARCHAR2 (10)  NOT NULL , 
     SEQ_NBR INTEGER  NOT NULL , 
     LANG_CODE VARCHAR2 (6)  NOT NULL , 
     TAB_ALIAS VARCHAR2 (10)  NOT NULL , 
     TEXT VARCHAR2 (1000) , 
     LONG_TEXT CLOB , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL 
    ) 
;



ALTER TABLE T_TEXT_ITEMS 
    ADD CONSTRAINT CH_TXI_SEQ_NBR 
    CHECK ( SEQ_NBR > 0) 
;


ALTER TABLE T_TEXT_ITEMS 
    ADD CONSTRAINT CH_TXT_TEXT 
    CHECK ((TEXT is not null and LONG_TEXT is null) or
(TEXT is null and LONG_TEXT is not null))
;


ALTER TABLE T_TEXT_ITEMS 
    ADD CONSTRAINT PK_TXI PRIMARY KEY ( ITM_ID, TXTT_CODE, SEQ_NBR, LANG_CODE ) ;



CREATE TABLE T_TEXT_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_TEXT_TYPES 
    ADD CONSTRAINT CH_TXTT_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_TEXT_TYPES 
    ADD CONSTRAINT CH_TXTT_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_TEXT_TYPES 
    ADD CONSTRAINT PK_TXTT PRIMARY KEY ( CODE ) ;


ALTER TABLE T_TEXT_TYPES 
    ADD CONSTRAINT UK_TXTT_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_TEXT_TYPE_HEADERS 
    ( 
     ITM_ID INTEGER  NOT NULL , 
     TXTT_CODE VARCHAR2 (10)  NOT NULL , 
     TAB_ALIAS VARCHAR2 (10)  NOT NULL , 
     TXT_SEQ_NBR_MAX INTEGER DEFAULT 0  NOT NULL 
    ) 
;



ALTER TABLE T_TEXT_TYPE_HEADERS 
    ADD CONSTRAINT CH_TTH_TXI_SEQ_NBR_MAX 
    CHECK ( TXT_SEQ_NBR_MAX >= 0) 
;

CREATE INDEX PSR.IX_TTH_TTP ON T_TEXT_TYPE_HEADERS 
    ( 
     TXTT_CODE ASC , 
     TAB_ALIAS ASC 
    ) 
;

ALTER TABLE T_TEXT_TYPE_HEADERS 
    ADD CONSTRAINT PK_TTH PRIMARY KEY ( ITM_ID, TXTT_CODE ) ;



CREATE TABLE T_TEXT_TYPE_PROPERTIES 
    ( 
     TXTT_CODE VARCHAR2 (10)  NOT NULL , 
     TAB_ALIAS VARCHAR2 (10)  NOT NULL , 
     MANDATORY_FLAG VARCHAR2 (1) DEFAULT 'N'  NOT NULL , 
     MULTI_INSTANCE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     LONG_TEXT_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT CH_TTP_MANDATORY_FLAG 
    CHECK ( MANDATORY_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT CH_TTP_MULTI_INSTANCE_FLAG 
    CHECK ( MULTI_INSTANCE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT CH_TTP_LONG_TEXT_FLAG 
    CHECK ( LONG_TEXT_FLAG IN ('N', 'Y')) 
;


COMMENT ON COLUMN T_TEXT_TYPE_PROPERTIES.MANDATORY_FLAG IS 'Is a text item of this type mandatory for all rows of this table?' 
;

COMMENT ON COLUMN T_TEXT_TYPE_PROPERTIES.MULTI_INSTANCE_FLAG IS 'Can there be multiple instances of text values of this type for a row in this table?' 
;

COMMENT ON COLUMN T_TEXT_TYPE_PROPERTIES.LONG_TEXT_FLAG IS 'Can text values of this type be longer than 1000 characters in this table (i.e. stored as CLOB)?' 
;

ALTER TABLE T_TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT PK_TTP PRIMARY KEY ( TXTT_CODE, TAB_ALIAS ) ;


ALTER TABLE T_TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT UK_TTP_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_TIME_PERIODS 
    ( 
     ID INTEGER  NOT NULL , 
     PERT_CODE VARCHAR2 (10)  NOT NULL , 
     START_DATE DATE  NOT NULL , 
     END_DATE DATE , 
     ITM_ID INTEGER , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_TIME_PERIODS 
    ADD CONSTRAINT CH_PER_ID 
    CHECK ( ID > 0) 
;


ALTER TABLE T_TIME_PERIODS 
    ADD CONSTRAINT CH_PER_DATES 
    CHECK (END_DATE > START_DATE)
;


ALTER TABLE T_TIME_PERIODS 
    ADD CONSTRAINT PK_PER PRIMARY KEY ( ID ) ;


ALTER TABLE T_TIME_PERIODS 
    ADD CONSTRAINT UK_PER UNIQUE ( PERT_CODE , START_DATE ) ;


ALTER TABLE T_TIME_PERIODS 
    ADD CONSTRAINT UK_PER_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_TIME_PERIOD_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_TIME_PERIOD_TYPES 
    ADD CONSTRAINT CH_PERT_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_TIME_PERIOD_TYPES 
    ADD CONSTRAINT CH_PERT_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_TIME_PERIOD_TYPES 
    ADD CONSTRAINT PK_PERT PRIMARY KEY ( CODE ) ;


ALTER TABLE T_TIME_PERIOD_TYPES 
    ADD CONSTRAINT UK_PERT_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_USER_ATTRIBUTES 
    ( 
     USERID VARCHAR2 (30)  NOT NULL , 
     UATT_CODE VARCHAR2 (10)  NOT NULL , 
     CHAR_VALUE VARCHAR2 (1000) , 
     NUM_VALUE NUMBER , 
     DATE_VALUE DATE , 
     ITM_ID INTEGER , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_USER_ATTRIBUTES 
    ADD CONSTRAINT CH_UAT_VALUE 
    CHECK ((CHAR_VALUE is not null and NUM_VALUE is null and DATE_VALUE is null) or
(CHAR_VALUE is null and NUM_VALUE is not null and DATE_VALUE is null) or
(CHAR_VALUE is null and NUM_VALUE is null and DATE_VALUE is not null))
;

CREATE INDEX PSR.IX_UAT_UATT ON T_USER_ATTRIBUTES 
    ( 
     UATT_CODE ASC 
    ) 
;

ALTER TABLE T_USER_ATTRIBUTES 
    ADD CONSTRAINT PK_UAT PRIMARY KEY ( USERID, UATT_CODE ) ;


ALTER TABLE T_USER_ATTRIBUTES 
    ADD CONSTRAINT UK_UAT_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_USER_ATTRIBUTE_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DATA_TYPE VARCHAR2 (1)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     ITM_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE T_USER_ATTRIBUTE_TYPES 
    ADD CONSTRAINT CH_UATT_CODE 
    CHECK ( CODE = trim(upper(CODE))) 
;


ALTER TABLE T_USER_ATTRIBUTE_TYPES 
    ADD CONSTRAINT CH_UATT_DATA_TYPE 
    CHECK ( DATA_TYPE IN ('C', 'D', 'N')) 
;


ALTER TABLE T_USER_ATTRIBUTE_TYPES 
    ADD CONSTRAINT CH_UATT_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE T_USER_ATTRIBUTE_TYPES 
    ADD CONSTRAINT PK_UATT PRIMARY KEY ( CODE ) ;


ALTER TABLE T_USER_ATTRIBUTE_TYPES 
    ADD CONSTRAINT UK_UATT_ITM_ID UNIQUE ( ITM_ID ) ;



CREATE TABLE T_USER_LANGUAGE_PREFERENCES 
    ( 
     USERID VARCHAR2 (30)  NOT NULL , 
     LANG_CODE VARCHAR2 (6)  NOT NULL , 
     PREF_SEQ NUMBER (5)  NOT NULL , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;


CREATE INDEX PSR.IX_ULP_LANG_CODE ON T_USER_LANGUAGE_PREFERENCES 
    ( 
     LANG_CODE ASC 
    ) 
;

ALTER TABLE T_USER_LANGUAGE_PREFERENCES 
    ADD CONSTRAINT PK_ULP PRIMARY KEY ( USERID, LANG_CODE ) ;


ALTER TABLE T_USER_LANGUAGE_PREFERENCES 
    ADD CONSTRAINT UK_ULP_PREF_SEQ UNIQUE ( USERID , PREF_SEQ ) ;




ALTER TABLE T_AGE_PROFILES 
    ADD CONSTRAINT FK_AGP_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_AGE_RANGES 
    ADD CONSTRAINT FK_AGR_AGP FOREIGN KEY 
    ( 
     AGP_CODE
    ) 
    REFERENCES T_AGE_PROFILES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_AGE_RANGES 
    ADD CONSTRAINT FK_AGR_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_COMPONENTS 
    ADD CONSTRAINT FK_COMP_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_DIMENSION_TYPES 
    ADD CONSTRAINT FK_DIMT_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_DIMENSION_VALUES 
    ADD CONSTRAINT FK_DIM_DIMT FOREIGN KEY 
    ( 
     DIMT_CODE
    ) 
    REFERENCES T_DIMENSION_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_DIMENSION_VALUES 
    ADD CONSTRAINT FK_DIM_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_DATA_ITEMS 
    ADD CONSTRAINT FK_ITM_TAB FOREIGN KEY 
    ( 
     TAB_ALIAS
    ) 
    REFERENCES T_TABLE_ALIASES 
    ( 
     ALIAS
    ) 
;


ALTER TABLE T_LANGUAGES 
    ADD CONSTRAINT FK_LANG_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_LOCATION_ATTRIBUTE_TYPES 
    ADD CONSTRAINT FK_LOCAT_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_LOCATION_ATTRIBUTES 
    ADD CONSTRAINT FK_LOCA_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE T_LOCATION_ATTRIBUTES 
    ADD CONSTRAINT FK_LOCA_LOC FOREIGN KEY 
    ( 
     LOC_ID
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_LOCATION_ATTRIBUTES 
    ADD CONSTRAINT FK_LOCA_LOCAT FOREIGN KEY 
    ( 
     LOCAT_CODE
    ) 
    REFERENCES T_LOCATION_ATTRIBUTE_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_LOCATION_RELATIONSHIP_TYPES 
    ADD CONSTRAINT FK_LOCRT_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_LOCATION_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCR_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE T_LOCATION_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCR_LOCRT FOREIGN KEY 
    ( 
     LOCRT_CODE
    ) 
    REFERENCES T_LOCATION_RELATIONSHIP_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_LOCATION_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCR_LOC_FROM FOREIGN KEY 
    ( 
     LOC_ID_FROM
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_LOCATION_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCR_LOC_TO FOREIGN KEY 
    ( 
     LOC_ID_TO
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_LOCATION_TYPE_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCTR_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE T_LOCATION_TYPE_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCTR_LOCRT FOREIGN KEY 
    ( 
     LOCRT_CODE
    ) 
    REFERENCES T_LOCATION_RELATIONSHIP_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_LOCATION_TYPE_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCTR_LOCT_FROM FOREIGN KEY 
    ( 
     LOCT_CODE_FROM
    ) 
    REFERENCES T_LOCATION_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_LOCATION_TYPE_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCTR_LOCT_TO FOREIGN KEY 
    ( 
     LOCT_CODE_TO
    ) 
    REFERENCES T_LOCATION_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_LOCATION_TYPE_VARIANTS 
    ADD CONSTRAINT FK_LOCTV_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_LOCATION_TYPE_VARIANTS 
    ADD CONSTRAINT FK_LOCTV_LOC FOREIGN KEY 
    ( 
     LOC_ID
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
;


ALTER TABLE T_LOCATION_TYPE_VARIANTS 
    ADD CONSTRAINT FK_LOCTV_LOCRT FOREIGN KEY 
    ( 
     LOCRT_CODE
    ) 
    REFERENCES T_LOCATION_RELATIONSHIP_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_LOCATION_TYPE_VARIANTS 
    ADD CONSTRAINT FK_LOCTV_LOCT FOREIGN KEY 
    ( 
     LOCT_CODE
    ) 
    REFERENCES T_LOCATION_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_LOCATION_TYPES 
    ADD CONSTRAINT FK_LOCT_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_LOCATIONS 
    ADD CONSTRAINT FK_LOC_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_LOCATIONS 
    ADD CONSTRAINT FK_LOC_LOCT FOREIGN KEY 
    ( 
     LOCT_CODE
    ) 
    REFERENCES T_LOCATION_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_LOCATIONS 
    ADD CONSTRAINT FK_LOC_LOCTV FOREIGN KEY 
    ( 
     LOCTV_ID
    ) 
    REFERENCES T_LOCATION_TYPE_VARIANTS 
    ( 
     ID
    ) 
;


ALTER TABLE T_MESSAGES 
    ADD CONSTRAINT FK_MSG_COMP FOREIGN KEY 
    ( 
     COMP_CODE
    ) 
    REFERENCES T_COMPONENTS 
    ( 
     CODE
    ) 
;


ALTER TABLE T_MESSAGES 
    ADD CONSTRAINT FK_MSG_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_TIME_PERIOD_TYPES 
    ADD CONSTRAINT FK_PERT_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_TIME_PERIODS 
    ADD CONSTRAINT FK_PER_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE T_TIME_PERIODS 
    ADD CONSTRAINT FK_PER_PERT FOREIGN KEY 
    ( 
     PERT_CODE
    ) 
    REFERENCES T_TIME_PERIOD_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_POPULATION_CATEGORIES 
    ADD CONSTRAINT FK_POPC_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_POPULATION_PLANNING_GROUPS 
    ADD CONSTRAINT FK_PPG_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_POPULATION_PLANNING_GROUPS 
    ADD CONSTRAINT FK_PPG_LOC FOREIGN KEY 
    ( 
     LOC_ID
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
;


ALTER TABLE T_SEXES 
    ADD CONSTRAINT FK_SEX_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTIC_GROUPS 
    ADD CONSTRAINT FK_STCG_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTIC_TYPES_IN_GROUPS 
    ADD CONSTRAINT FK_STCTG_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE T_STATISTIC_TYPES_IN_GROUPS 
    ADD CONSTRAINT FK_STCTG_STCG FOREIGN KEY 
    ( 
     STCG_CODE
    ) 
    REFERENCES T_STATISTIC_GROUPS 
    ( 
     CODE
    ) 
;


ALTER TABLE T_STATISTIC_TYPES_IN_GROUPS 
    ADD CONSTRAINT FK_STCTG_STCT FOREIGN KEY 
    ( 
     STCT_CODE
    ) 
    REFERENCES T_STATISTIC_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_STATISTIC_TYPES 
    ADD CONSTRAINT FK_STCT_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_AGR FOREIGN KEY 
    ( 
     AGR_ID
    ) 
    REFERENCES T_AGE_RANGES 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_DIM1 FOREIGN KEY 
    ( 
     DIM_ID1
    ) 
    REFERENCES T_DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_DIM2 FOREIGN KEY 
    ( 
     DIM_ID2
    ) 
    REFERENCES T_DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_DIM3 FOREIGN KEY 
    ( 
     DIM_ID3
    ) 
    REFERENCES T_DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_DIM4 FOREIGN KEY 
    ( 
     DIM_ID4
    ) 
    REFERENCES T_DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_DIM5 FOREIGN KEY 
    ( 
     DIM_ID5
    ) 
    REFERENCES T_DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_LOC_ASYLUM FOREIGN KEY 
    ( 
     LOC_ID_ASYLUM
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_LOC_COUNTRY FOREIGN KEY 
    ( 
     LOC_ID_COUNTRY
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_LOC_ORIGIN FOREIGN KEY 
    ( 
     LOC_ID_ORIGIN
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_LOC_SOURCE FOREIGN KEY 
    ( 
     LOC_ID_SOURCE
    ) 
    REFERENCES T_LOCATIONS 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_PER FOREIGN KEY 
    ( 
     PER_ID
    ) 
    REFERENCES T_TIME_PERIODS 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_POPC FOREIGN KEY 
    ( 
     POPC_CODE
    ) 
    REFERENCES T_POPULATION_CATEGORIES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_PPG FOREIGN KEY 
    ( 
     PPG_ID
    ) 
    REFERENCES T_POPULATION_PLANNING_GROUPS 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_SEX FOREIGN KEY 
    ( 
     SEX_CODE
    ) 
    REFERENCES T_SEXES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_STB FOREIGN KEY 
    ( 
     STB_ID
    ) 
    REFERENCES T_STATISTICS_BATCHES 
    ( 
     ID
    ) 
;


ALTER TABLE T_STATISTICS 
    ADD CONSTRAINT FK_STC_STCT FOREIGN KEY 
    ( 
     STCT_CODE
    ) 
    REFERENCES T_STATISTIC_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_SYSTEM_PARAMETERS 
    ADD CONSTRAINT FK_SYP_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_TABLE_ALIASES 
    ADD CONSTRAINT FK_TAB_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE T_TEXT_TYPE_HEADERS 
    ADD CONSTRAINT FK_TTH_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_TEXT_TYPE_HEADERS 
    ADD CONSTRAINT FK_TTH_TTP FOREIGN KEY 
    ( 
     TXTT_CODE,
     TAB_ALIAS
    ) 
    REFERENCES T_TEXT_TYPE_PROPERTIES 
    ( 
     TXTT_CODE,
     TAB_ALIAS
    ) 
;


ALTER TABLE T_TEXT_TYPE_HEADERS 
    ADD CONSTRAINT FK_TTH_TXTT FOREIGN KEY 
    ( 
     TXTT_CODE
    ) 
    REFERENCES T_TEXT_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT FK_TTP_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE T_TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT FK_TTP_TAB FOREIGN KEY 
    ( 
     TAB_ALIAS
    ) 
    REFERENCES T_TABLE_ALIASES 
    ( 
     ALIAS
    ) 
;


ALTER TABLE T_TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT FK_TTP_TXTT FOREIGN KEY 
    ( 
     TXTT_CODE
    ) 
    REFERENCES T_TEXT_TYPES 
    ( 
     CODE
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_TEXT_TYPES 
    ADD CONSTRAINT FK_TXTT_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_TEXT_ITEMS 
    ADD CONSTRAINT FK_TXT_LANG FOREIGN KEY 
    ( 
     LANG_CODE
    ) 
    REFERENCES T_LANGUAGES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_TEXT_ITEMS 
    ADD CONSTRAINT FK_TXT_TTH FOREIGN KEY 
    ( 
     ITM_ID,
     TXTT_CODE
    ) 
    REFERENCES T_TEXT_TYPE_HEADERS 
    ( 
     ITM_ID,
     TXTT_CODE
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_USER_ATTRIBUTE_TYPES 
    ADD CONSTRAINT FK_UATT_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
;


ALTER TABLE T_USER_ATTRIBUTES 
    ADD CONSTRAINT FK_UAT_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE T_USER_ATTRIBUTES 
    ADD CONSTRAINT FK_UAT_UATT FOREIGN KEY 
    ( 
     UATT_CODE
    ) 
    REFERENCES T_USER_ATTRIBUTE_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_USER_ATTRIBUTES 
    ADD CONSTRAINT FK_UAT_USR FOREIGN KEY 
    ( 
     USERID
    ) 
    REFERENCES T_SYSTEM_USERS 
    ( 
     USERID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_USER_LANGUAGE_PREFERENCES 
    ADD CONSTRAINT FK_ULP_LANG FOREIGN KEY 
    ( 
     LANG_CODE
    ) 
    REFERENCES T_LANGUAGES 
    ( 
     CODE
    ) 
;


ALTER TABLE T_USER_LANGUAGE_PREFERENCES 
    ADD CONSTRAINT FK_ULP_USR FOREIGN KEY 
    ( 
     USERID
    ) 
    REFERENCES T_SYSTEM_USERS 
    ( 
     USERID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE T_SYSTEM_USERS 
    ADD CONSTRAINT FK_USR_ITM FOREIGN KEY 
    ( 
     ITM_ID
    ) 
    REFERENCES T_DATA_ITEMS 
    ( 
     ID
    ) 
    ON DELETE CASCADE 
;

CREATE OR REPLACE VIEW L_AGE_PROFILES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT AGP.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    AGP.DISPLAY_SEQ,
    AGP.ACTIVE_FLAG,
    AGP.ITM_ID,
    AGP.VERSION_NBR,
    row_number() OVER (PARTITION BY AGP.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_AGE_PROFILES AGP
  INNER JOIN T_TEXT_ITEMS TXI
  ON TXI.ITM_ID     = AGP.ITM_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_AGE_RANGES AS
SELECT ID,
  DESCRIPTION,
  LANG_CODE,
  AGP_CODE,
  AGE_FROM,
  AGE_TO,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT AGR.ID,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    AGR.AGP_CODE,
    AGR.AGE_FROM,
    AGR.AGE_TO,
    AGR.ITM_ID,
    AGR.VERSION_NBR,
    row_number() OVER (PARTITION BY AGR.ID ORDER BY LANG.ACTIVE_FLAG, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_AGE_RANGES AGR
  INNER JOIN T_TEXT_ITEMS TXI
  ON TXI.ITM_ID     = AGR.ITM_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_COMPONENTS AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT COMP.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    COMP.DISPLAY_SEQ,
    COMP.ACTIVE_FLAG,
    COMP.ITM_ID,
    COMP.VERSION_NBR,
    row_number() OVER (PARTITION BY COMP.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_COMPONENTS COMP
  INNER JOIN T_TEXT_ITEMS TXI
  ON TXI.ITM_ID     = COMP.ITM_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_COUNTRIES AS
WITH LOC AS
  (SELECT ID,
    NAME,
    LANG_CODE,
    LOCT_CODE,
    START_DATE,
    END_DATE,
    ITM_ID,
    VERSION_NBR
  FROM
    (SELECT LOC.ID,
      TXI.TEXT NAME,
      TXI.LANG_CODE,
      LOC.LOCT_CODE,
      LOC.START_DATE,
      LOC.END_DATE,
      LOC.ITM_ID,
      LOC.VERSION_NBR,
      row_number() OVER (PARTITION BY LOC.ID ORDER BY LANG.ACTIVE_FLAG, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
    FROM T_LOCATIONS LOC
    INNER JOIN T_TEXT_ITEMS TXI
    ON TXI.ITM_ID     = LOC.ITM_ID
    AND TXI.TXTT_CODE = 'NAME'
    AND TXI.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXI.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXI.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  )
SELECT LOC.ID,
  LOC.NAME,
  LOC.LANG_CODE,
  LOCA1.CHAR_VALUE AS ISO3166_ALPHA3_CODE,
  LOCA2.CHAR_VALUE AS ISO3166_ALPHA2_CODE,
  LOCA3.CHAR_VALUE AS ISO3166_NUMERIC_CODE,
  LOCA4.CHAR_VALUE AS UNHCR_COUNTRY_CODE,
  LOC.START_DATE,
  LOC.END_DATE,
  LOC.ITM_ID,
  LOC.VERSION_NBR
FROM LOC
LEFT OUTER JOIN T_LOCATION_ATTRIBUTES LOCA1
ON LOCA1.LOC_ID      = LOC.ID
AND LOCA1.LOCAT_CODE = 'IS03166A3'
LEFT OUTER JOIN T_LOCATION_ATTRIBUTES LOCA2
ON LOCA2.LOC_ID      = LOC.ID
AND LOCA2.LOCAT_CODE = 'IS03166A2'
LEFT OUTER JOIN T_LOCATION_ATTRIBUTES LOCA3
ON LOCA3.LOC_ID      = LOC.ID
AND LOCA3.LOCAT_CODE = 'IS03166NUM'
LEFT OUTER JOIN T_LOCATION_ATTRIBUTES LOCA4
ON LOCA4.LOC_ID      = LOC.ID
AND LOCA4.LOCAT_CODE = 'UNHCRCC'
WHERE LOC.LOCT_CODE  = 'COUNTRY' ;



CREATE OR REPLACE VIEW L_DESCRIPTIONS AS
SELECT ITM_ID,
  LANG_CODE,
  TAB_ALIAS,
  TEXT DESCRIPTION
FROM
  (SELECT TXI.ITM_ID,
    TXI.LANG_CODE,
    TXI.TAB_ALIAS,
    TXI.TEXT,
    row_number() OVER (PARTITION BY TXI.ITM_ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_TEXT_ITEMS TXI
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE    = TXI.LANG_CODE
  AND ULP.USERID      = sys_context('PSR', 'USERID')
  WHERE TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR     = 1
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_DIMENSION_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT DIMT.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    DIMT.DISPLAY_SEQ,
    DIMT.ACTIVE_FLAG,
    DIMT.ITM_ID,
    DIMT.VERSION_NBR,
    row_number() OVER (PARTITION BY DIMT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_DIMENSION_TYPES DIMT
  INNER JOIN T_TEXT_ITEMS TXI
  ON TXI.ITM_ID     = DIMT.ITM_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_DIMENSION_VALUES AS
SELECT ID,
  DESCRIPTION,
  LANG_CODE,
  DIMT_CODE,
  CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT DIM.ID,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    DIM.DIMT_CODE,
    DIM.CODE,
    DIM.DISPLAY_SEQ,
    DIM.ACTIVE_FLAG,
    DIM.ITM_ID,
    DIM.VERSION_NBR,
    row_number() OVER (PARTITION BY DIM.ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_DIMENSION_VALUES DIM
  INNER JOIN T_TEXT_ITEMS TXI
  ON TXI.ITM_ID     = DIM.ITM_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_HIERARCHICAL_LOCATIONS AS
WITH LOC AS
  (SELECT ID,
    NAME,
    LANG_CODE,
    LOCT_CODE
  FROM
    (SELECT LOC.ID,
      TXI.TEXT NAME,
      TXI.LANG_CODE,
      LOC.LOCT_CODE,
      row_number() OVER (PARTITION BY LOC.ID ORDER BY LANG.ACTIVE_FLAG, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
    FROM T_LOCATIONS LOC
    INNER JOIN T_TEXT_ITEMS TXI
    ON TXI.ITM_ID     = LOC.ITM_ID
    AND TXI.TXTT_CODE = 'NAME'
    AND TXI.SEQ_NBR   = 1
    INNER JOIN T_LANGUAGES LANG
    ON LANG.CODE = TXI.LANG_CODE
    LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXI.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  )
SELECT LOC.ID,
  LOC.LOCT_CODE,
  LOC.NAME,
  LOC.LANG_CODE,
  LOCR.LOC_ID_FROM
FROM LOC
LEFT OUTER JOIN T_LOCATION_RELATIONSHIPS LOCR
ON LOCR.LOC_ID_TO    = LOC.ID
AND LOCR.LOCRT_CODE  = 'WITHIN'
AND LOCR.START_DATE <= SYSDATE
AND LOCR.END_DATE    > SYSDATE ;



CREATE OR REPLACE VIEW L_LANGUAGES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT LANG.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    LANG.DISPLAY_SEQ,
    LANG.ACTIVE_FLAG,
    LANG.ITM_ID,
    LANG.VERSION_NBR,
    row_number() OVER (PARTITION BY LANG.CODE ORDER BY LANG1.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ,
    CASE
      WHEN LANG1.CODE = LANG.CODE
      THEN 1e5
      ELSE LANG.DISPLAY_SEQ + 1e5
    END)) RANK
  FROM T_LANGUAGES LANG
  INNER JOIN T_TEXT_ITEMS TXI
  ON TXI.ITM_ID     = LANG.ITM_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG1
  ON LANG1.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_LOCATIONS AS
SELECT ID,
  NAME,
  LANG_CODE,
  LOCT_CODE,
  LOCTV_ID,
  START_DATE,
  END_DATE,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT LOC.ID,
    TXI.TEXT NAME,
    TXI.LANG_CODE,
    LOC.LOCT_CODE,
    LOC.LOCTV_ID,
    LOC.START_DATE,
    LOC.END_DATE,
    LOC.ITM_ID,
    LOC.VERSION_NBR,
    row_number() OVER (PARTITION BY LOC.ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_LOCATIONS LOC
  INNER JOIN T_TEXT_ITEMS TXI
  ON TXI.ITM_ID     = LOC.ITM_ID
  AND TXI.TXTT_CODE = 'NAME'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_LOCATION_ATTRIBUTE_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DATA_TYPE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT LOCAT.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    LOCAT.DATA_TYPE,
    LOCAT.DISPLAY_SEQ,
    LOCAT.ACTIVE_FLAG,
    LOCAT.ITM_ID,
    LOCAT.VERSION_NBR,
    row_number() OVER (PARTITION BY LOCAT.CODE ORDER BY LANG.ACTIVE_FLAG, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_LOCATION_ATTRIBUTE_TYPES LOCAT
  INNER JOIN T_TEXT_ITEMS TXI
  ON TXI.ITM_ID     = LOCAT.ITM_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_LOCATION_RELATIONSHIP_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT LOCRT.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    LOCRT.DISPLAY_SEQ,
    LOCRT.ACTIVE_FLAG,
    LOCRT.ITM_ID,
    LOCRT.VERSION_NBR,
    row_number() OVER (PARTITION BY LOCRT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_LOCATION_RELATIONSHIP_TYPES LOCRT
  INNER JOIN T_TEXT_ITEMS TXI
  ON TXI.ITM_ID     = LOCRT.ITM_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_LOCATION_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT LOCT.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    LOCT.DISPLAY_SEQ,
    LOCT.ACTIVE_FLAG,
    LOCT.ITM_ID,
    LOCT.VERSION_NBR,
    row_number() OVER (PARTITION BY LOCT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_LOCATION_TYPES LOCT
  INNER JOIN T_TEXT_ITEMS TXI
  ON TXI.ITM_ID     = LOCT.ITM_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_LOCATION_TYPE_VARIANTS AS
SELECT ID,
  DESCRIPTION,
  LANG_CODE,
  LOCT_CODE,
  LOC_ID,
  LOCRT_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT LOCTV.ID,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    LOCTV.LOCT_CODE,
    LOCTV.LOC_ID,
    LOCTV.LOCRT_CODE,
    LOCTV.DISPLAY_SEQ,
    LOCTV.ACTIVE_FLAG,
    LOCTV.ITM_ID,
    LOCTV.VERSION_NBR,
    row_number() OVER (PARTITION BY LOCTV.ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_LOCATION_TYPE_VARIANTS LOCTV
  INNER JOIN T_TEXT_ITEMS TXI
  ON TXI.ITM_ID     = LOCTV.ITM_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_MESSAGES AS
SELECT COMP_CODE,
  SEQ_NBR,
  MESSAGE,
  LANG_CODE,
  SEVERITY,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT MSG.COMP_CODE,
    MSG.SEQ_NBR,
    TXI.TEXT MESSAGE,
    TXI.LANG_CODE,
    MSG.SEVERITY,
    MSG.ITM_ID,
    MSG.VERSION_NBR,
    row_number() OVER (PARTITION BY MSG.COMP_CODE, MSG.SEQ_NBR ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_MESSAGES MSG
  INNER JOIN T_TEXT_ITEMS TXI
  ON TXI.ITM_ID     = MSG.ITM_ID
  AND TXI.TXTT_CODE = 'MSG'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_NAMES AS
SELECT ITM_ID,
  LANG_CODE,
  TAB_ALIAS,
  TEXT NAME
FROM
  (SELECT TXI.ITM_ID,
    TXI.LANG_CODE,
    TXI.TAB_ALIAS,
    TXI.TEXT,
    row_number() OVER (PARTITION BY TXI.ITM_ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_TEXT_ITEMS TXI
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE    = TXI.LANG_CODE
  AND ULP.USERID      = sys_context('PSR', 'USERID')
  WHERE TXI.TXTT_CODE = 'NAME'
  AND TXI.SEQ_NBR     = 1
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_NOTES AS
SELECT ITM_ID,
  SEQ_NBR,
  LANG_CODE,
  TAB_ALIAS,
  LONG_TEXT NOTE
FROM
  (SELECT TXI.ITM_ID,
    TXI.SEQ_NBR,
    TXI.LANG_CODE,
    TXI.TAB_ALIAS,
    TXI.LONG_TEXT,
    row_number() OVER (PARTITION BY TXI.ITM_ID, TXI.SEQ_NBR ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_TEXT_ITEMS TXI
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE    = TXI.LANG_CODE
  AND ULP.USERID      = sys_context('PSR', 'USERID')
  WHERE TXI.TXTT_CODE = 'NOTE'
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_POPULATION_CATEGORIES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT POPC.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    POPC.DISPLAY_SEQ,
    POPC.ACTIVE_FLAG,
    POPC.ITM_ID,
    POPC.VERSION_NBR,
    row_number() OVER (PARTITION BY POPC.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_POPULATION_CATEGORIES POPC
  INNER JOIN T_TEXT_ITEMS TXI
  ON TXI.ITM_ID     = POPC.ITM_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_SEXES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT SEX.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    SEX.DISPLAY_SEQ,
    SEX.ITM_ID,
    SEX.VERSION_NBR,
    row_number() OVER (PARTITION BY SEX.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_SEXES SEX
  INNER JOIN T_TEXT_ITEMS TXI
  ON TXI.ITM_ID     = SEX.ITM_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_STATISTIC_GROUPS AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT STCG.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    STCG.DISPLAY_SEQ,
    STCG.ACTIVE_FLAG,
    STCG.ITM_ID,
    STCG.VERSION_NBR,
    row_number() OVER (PARTITION BY STCG.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_STATISTIC_GROUPS STCG
  INNER JOIN T_TEXT_ITEMS TXI
  ON TXI.ITM_ID     = STCG.ITM_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_STATISTIC_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT STCT.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    STCT.DISPLAY_SEQ,
    STCT.ACTIVE_FLAG,
    STCT.ITM_ID,
    STCT.VERSION_NBR,
    row_number() OVER (PARTITION BY STCT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_STATISTIC_TYPES STCT
  INNER JOIN T_TEXT_ITEMS TXI
  ON TXI.ITM_ID     = STCT.ITM_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_SYSTEM_PARAMETERS AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DATA_TYPE,
  CHAR_VALUE,
  NUM_VALUE,
  DATE_VALUE,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT SYP.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    SYP.DATA_TYPE,
    SYP.CHAR_VALUE,
    SYP.NUM_VALUE,
    SYP.DATE_VALUE,
    SYP.ITM_ID,
    SYP.VERSION_NBR,
    row_number() OVER (PARTITION BY SYP.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_SYSTEM_PARAMETERS SYP
  INNER JOIN T_TEXT_ITEMS TXI
  ON TXI.ITM_ID     = SYP.ITM_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_SYSTEM_USERS AS
SELECT USERID,
  NAME,
  LANG_CODE,
  LOCKED_FLAG,
  TEMPLATE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT USR.USERID,
    TXI.TEXT NAME,
    TXI.LANG_CODE,
    USR.LOCKED_FLAG,
    USR.TEMPLATE_FLAG,
    USR.ITM_ID,
    USR.VERSION_NBR,
    row_number() OVER (PARTITION BY USR.USERID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_SYSTEM_USERS USR
  INNER JOIN T_TEXT_ITEMS TXI
  ON TXI.ITM_ID     = USR.ITM_ID
  AND TXI.TXTT_CODE = 'NAME'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_TEXT_ITEMS AS
SELECT ITM_ID,
  TXTT_CODE,
  SEQ_NBR,
  LANG_CODE,
  TAB_ALIAS,
  TEXT,
  LONG_TEXT
FROM
  (SELECT TXI.ITM_ID,
    TXI.TXTT_CODE,
    TXI.SEQ_NBR,
    TXI.LANG_CODE,
    TXI.TAB_ALIAS,
    TXI.TEXT,
    TXI.LONG_TEXT,
    row_number() OVER (PARTITION BY TXI.ITM_ID, TXI.TXTT_CODE, TXI.SEQ_NBR ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_TEXT_ITEMS TXI
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_TEXT_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT TXTT.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    TXTT.DISPLAY_SEQ,
    TXTT.ACTIVE_FLAG,
    TXTT.ITM_ID,
    TXTT.VERSION_NBR,
    row_number() OVER (PARTITION BY TXTT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_TEXT_TYPES TXTT
  INNER JOIN T_TEXT_ITEMS TXI
  ON TXI.ITM_ID     = TXTT.ITM_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_TIME_PERIOD_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT PERT.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    PERT.DISPLAY_SEQ,
    PERT.ACTIVE_FLAG,
    PERT.ITM_ID,
    PERT.VERSION_NBR,
    row_number() OVER (PARTITION BY PERT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_TIME_PERIOD_TYPES PERT
  INNER JOIN T_TEXT_ITEMS TXI
  ON TXI.ITM_ID     = PERT.ITM_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_USER_ATTRIBUTE_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DATA_TYPE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  ITM_ID,
  VERSION_NBR
FROM
  (SELECT UATT.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    UATT.DATA_TYPE,
    UATT.DISPLAY_SEQ,
    UATT.ACTIVE_FLAG,
    UATT.ITM_ID,
    UATT.VERSION_NBR,
    row_number() OVER (PARTITION BY UATT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM T_USER_ATTRIBUTE_TYPES UATT
  INNER JOIN T_TEXT_ITEMS TXI
  ON TXI.ITM_ID     = UATT.ITM_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN T_LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN T_USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_STATISTICS AS
SELECT STC.ID,
  STC.STCT_CODE,
  STCT.DESCRIPTION STCT_DESCRIPTION,
  STC.LOC_ID_COUNTRY,
  LOC1.NAME LOC_NAME_COUNTRY,
  LOCA1.CHAR_VALUE ISO_COUNTRY_CODE,
  LOCA2.CHAR_VALUE UNHCR_COUNTRY_CODE,
  STC.LOC_ID_ASYLUM,
  LOC2.NAME LOC_NAME_ASYLUM,
  NVL(LOCTV.DESCRIPTION, LOCT.DESCRIPTION) LOC_TYPE_DESCRIPTION,
  STC.LOC_ID_ORIGIN,
  LOC3.NAME LOC_NAME_ORIGIN,
  LOCA3.CHAR_VALUE ISO_ORIGIN_CODE,
  LOCA4.CHAR_VALUE UNHCR_ORIGIN_CODE,
  STC.LOC_ID_SOURCE,
  LOC4.NAME LOC_NAME_SOURCE,
  STC.PPG_ID,
  STC.POPC_CODE,
  POPC.DESCRIPTION POPC_DESCRIPTION,
  STC.PER_ID,
  PER.START_DATE PER_START_DATE,
  PER.END_DATE PER_END_DATE,
  PERT.DESCRIPTION PERT_DESCRIPTION,
  STC.SEX_CODE,
  SEX.DESCRIPTION SEX_DESCRIPTION,
  STC.AGR_ID,
  AGR.AGE_FROM,
  AGR.AGE_TO,
  AGR.DESCRIPTION AGR_DESCRIPTION,
  AGP.DESCRIPTION AGP_DESCRIPTION,
  STC.DIM_ID1,
  DIM1.DESCRIPTION DIM_DESCRIPTION1,
  DIM1.CODE DIM_CODE1,
  DIM1.DIMT_CODE DIMT_CODE1,
  DIMT1.DESCRIPTION DIMT_DESCRIPTION1,
  STC.DIM_ID2,
  DIM2.DESCRIPTION DIM_DESCRIPTION2,
  DIM2.CODE DIM_CODE2,
  DIM2.DIMT_CODE DIMT_CODE2,
  DIMT2.DESCRIPTION DIMT_DESCRIPTION2,
  STC.DIM_ID3,
  DIM3.DESCRIPTION DIM_DESCRIPTION3,
  DIM3.CODE DIM_CODE3,
  DIM3.DIMT_CODE DIMT_CODE3,
  DIMT3.DESCRIPTION DIMT_DESCRIPTION3,
  STC.DIM_ID4,
  DIM4.DESCRIPTION DIM_DESCRIPTION4,
  DIM4.CODE DIM_CODE4,
  DIM4.DIMT_CODE DIMT_CODE4,
  DIMT4.DESCRIPTION DIMT_DESCRIPTION4,
  STC.DIM_ID5,
  DIM5.DESCRIPTION DIM_DESCRIPTION5,
  DIM5.CODE DIM_CODE5,
  DIM5.DIMT_CODE DIMT_CODE5,
  DIMT5.DESCRIPTION DIMT_DESCRIPTION5,
  STC.VALUE,
  STC.ITM_ID,
  STC.VERSION_NBR
FROM T_STATISTICS STC
INNER JOIN L_STATISTIC_TYPES STCT
ON STCT.CODE = STC.STCT_CODE
INNER JOIN L_LOCATIONS LOC1
ON LOC1.ID = STC.LOC_ID_COUNTRY
INNER JOIN T_LOCATION_ATTRIBUTES LOCA1
ON LOCA1.LOC_ID      = LOC1.ID
AND LOCA1.LOCAT_CODE = 'IS03166A3'
INNER JOIN T_LOCATION_ATTRIBUTES LOCA2
ON LOCA2.LOC_ID      = LOC1.ID
AND LOCA2.LOCAT_CODE = 'UNHCRCC'
INNER JOIN L_LOCATIONS LOC2
ON LOC2.ID = STC.LOC_ID_ASYLUM
INNER JOIN L_LOCATION_TYPES LOCT
ON LOCT.CODE = LOC2.LOCT_CODE
LEFT OUTER JOIN L_LOCATION_TYPE_VARIANTS LOCTV
ON LOCTV.ID = LOC2.LOCTV_ID
LEFT JOIN L_LOCATIONS LOC3
ON LOC3.ID = STC.LOC_ID_ORIGIN
LEFT JOIN T_LOCATION_ATTRIBUTES LOCA3
ON LOCA3.LOC_ID      = LOC3.ID
AND LOCA3.LOCAT_CODE = 'UNHCRCC'
LEFT JOIN T_LOCATION_ATTRIBUTES LOCA4
ON LOCA4.LOC_ID      = LOC3.ID
AND LOCA4.LOCAT_CODE = 'UNHCRCC'
LEFT JOIN L_LOCATIONS LOC4
ON LOC4.ID = STC.LOC_ID_SOURCE
LEFT JOIN L_POPULATION_CATEGORIES POPC
ON POPC.CODE = STC.POPC_CODE
LEFT JOIN T_TIME_PERIODS PER
ON PER.ID = STC.PER_ID
LEFT JOIN L_TIME_PERIOD_TYPES PERT
ON PERT.CODE = PER.PERT_CODE
LEFT JOIN L_SEXES SEX
ON SEX.CODE = STC.SEX_CODE
LEFT JOIN L_AGE_RANGES AGR
ON AGR.ID = STC.AGR_ID
LEFT JOIN L_AGE_PROFILES AGP
ON AGP.CODE = AGR.AGP_CODE
LEFT JOIN L_DIMENSION_VALUES DIM1
ON DIM1.ID = STC.DIM_ID1
LEFT JOIN L_DIMENSION_TYPES DIMT1
ON DIMT1.CODE = DIM1.DIMT_CODE
LEFT JOIN L_DIMENSION_VALUES DIM2
ON DIM2.ID = STC.DIM_ID2
LEFT JOIN L_DIMENSION_TYPES DIMT2
ON DIMT2.CODE = DIM2.DIMT_CODE
LEFT JOIN L_DIMENSION_VALUES DIM3
ON DIM3.ID = STC.DIM_ID3
LEFT JOIN L_DIMENSION_TYPES DIMT3
ON DIMT3.CODE = DIM3.DIMT_CODE
LEFT JOIN L_DIMENSION_VALUES DIM4
ON DIM4.ID = STC.DIM_ID4
LEFT JOIN L_DIMENSION_TYPES DIMT4
ON DIMT4.CODE = DIM4.DIMT_CODE
LEFT JOIN L_DIMENSION_VALUES DIM5
ON DIM5.ID = STC.DIM_ID5
LEFT JOIN L_DIMENSION_TYPES DIMT5
ON DIMT5.CODE = DIM5.DIMT_CODE ;



CREATE SEQUENCE AGR_SEQ ;

CREATE SEQUENCE ITM_SEQ ;

CREATE SEQUENCE DIM_SEQ ;

CREATE SEQUENCE LOC_SEQ 
    MAXVALUE 99999999 ;

CREATE SEQUENCE LOCTV_SEQ ;

CREATE SEQUENCE PPG_SEQ ;

CREATE SEQUENCE STC_SEQ ;

CREATE SEQUENCE STB_SEQ ;

CREATE SEQUENCE PER_SEQ ;



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            36
-- CREATE INDEX                             4
-- ALTER TABLE                            214
-- CREATE VIEW                             28
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           0
-- ALTER TRIGGER                            0
-- CREATE STRUCTURED TYPE                   0
-- CREATE COLLECTION TYPE                   0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          9
-- CREATE MATERIALIZED VIEW                 0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
