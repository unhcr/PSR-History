-- Generated by Oracle SQL Developer Data Modeler 3.1.0.700
--   at:        2012-04-12 13:46:42 CEST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



CREATE TABLE AGE_PROFILES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL CHECK ( ACTIVE_FLAG IN ('N', 'Y')) , 
     TXT_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE AGE_PROFILES 
    ADD CONSTRAINT PK_AGP PRIMARY KEY ( CODE ) ;


ALTER TABLE AGE_PROFILES 
    ADD CONSTRAINT UK_AGP_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE AGE_RANGES 
    ( 
     ID INTEGER  NOT NULL , 
     AGP_CODE VARCHAR2 (10)  NOT NULL , 
     AGE_FROM NUMBER (3)  NOT NULL , 
     AGE_TO NUMBER (3)  NOT NULL , 
     TXT_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE AGE_RANGES 
    ADD CONSTRAINT CH_AGR 
    CHECK (AGE_TO >= AGE_FROM)
;


ALTER TABLE AGE_RANGES 
    ADD CONSTRAINT PK_AGR PRIMARY KEY ( ID ) ;


ALTER TABLE AGE_RANGES 
    ADD CONSTRAINT UK_AGR UNIQUE ( AGP_CODE , AGE_FROM ) ;


ALTER TABLE AGE_RANGES 
    ADD CONSTRAINT UK_AGR_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE COMPONENTS 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     MSG_SEQ_NBR_MAX INTEGER DEFAULT 0  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     TXT_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE COMPONENTS 
    ADD CONSTRAINT CH_COMP_MSG_SEQ_NBR_MAX 
    CHECK ( MSG_SEQ_NBR_MAX >= 0) 
;


ALTER TABLE COMPONENTS 
    ADD CONSTRAINT CH_COMP_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE COMPONENTS 
    ADD CONSTRAINT PK_COMP PRIMARY KEY ( CODE ) ;


ALTER TABLE COMPONENTS 
    ADD CONSTRAINT UK_COMP_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE DIMENSION_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1)  NOT NULL CHECK ( ACTIVE_FLAG IN ('N', 'Y')) , 
     TXT_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE DIMENSION_TYPES 
    ADD CONSTRAINT PK_DIMT PRIMARY KEY ( CODE ) ;


ALTER TABLE DIMENSION_TYPES 
    ADD CONSTRAINT UK_DIMT_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE DIMENSION_VALUES 
    ( 
     ID INTEGER  NOT NULL , 
     DIMT_CODE VARCHAR2 (10)  NOT NULL , 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1)  NOT NULL CHECK ( ACTIVE_FLAG IN ('N', 'Y')) , 
     TXT_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE DIMENSION_VALUES 
    ADD CONSTRAINT PK_DIM PRIMARY KEY ( ID ) ;


ALTER TABLE DIMENSION_VALUES 
    ADD CONSTRAINT UK_DIM_TXT_ID UNIQUE ( TXT_ID ) ;


ALTER TABLE DIMENSION_VALUES 
    ADD CONSTRAINT UK_DIM UNIQUE ( DIMT_CODE , CODE ) ;



CREATE TABLE LANGUAGES 
    ( 
     CODE VARCHAR2 (6)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     TXT_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE LANGUAGES 
    ADD CONSTRAINT CH_LANG_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG in ('Y', 'N')) 
;


ALTER TABLE LANGUAGES 
    ADD CONSTRAINT PK_LANG PRIMARY KEY ( CODE ) ;


ALTER TABLE LANGUAGES 
    ADD CONSTRAINT UK_LANG_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE LOCATIONS 
    ( 
     CODE NUMBER (10)  NOT NULL , 
     LOCT_CODE VARCHAR2 (10)  NOT NULL , 
     COUNTRY_CODE VARCHAR2 (3) , 
     START_DATE DATE  NOT NULL , 
     END_DATE DATE  NOT NULL , 
     TXT_ID INTEGER  NOT NULL , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE LOCATIONS 
    ADD CONSTRAINT CH_LOC_DATES 
    CHECK (END_DATE > START_DATE)
;


ALTER TABLE LOCATIONS 
    ADD CONSTRAINT CH_LOC_COUNTRY_CODE 
    CHECK ((LOCT_CODE = 'COUNTRY' and COUNTRY_CODE is not null) or
(LOCT_CODE != 'COUNTRY' and COUNTRY_CODE is null))
;

CREATE INDEX PSR.IX_LOC_COUNTRY_CODE ON LOCATIONS 
    ( 
     COUNTRY_CODE ASC 
    ) 
;

ALTER TABLE LOCATIONS 
    ADD CONSTRAINT PK_LOC PRIMARY KEY ( CODE ) ;


ALTER TABLE LOCATIONS 
    ADD CONSTRAINT UK_LOC_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE LOCATION_ATTRIBUTES 
    ( 
     LOC_CODE NUMBER (10)  NOT NULL , 
     LOCAT_CODE VARCHAR2 (10)  NOT NULL , 
     CHAR_VALUE VARCHAR2 (1000) , 
     NUM_VALUE NUMBER , 
     DATE_VALUE DATE , 
     TXT_ID INTEGER , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE LOCATION_ATTRIBUTES 
    ADD CONSTRAINT CH_LOCA_VALUE 
    CHECK ((CHAR_VALUE is not null and NUM_VALUE is null and DATE_VALUE is null) or
(CHAR_VALUE is null and NUM_VALUE is not null and DATE_VALUE is null) or
(CHAR_VALUE is null and NUM_VALUE is null and DATE_VALUE is not null))
;

CREATE INDEX PSR.IX_LOCA_LOCAT ON LOCATION_ATTRIBUTES 
    ( 
     LOCAT_CODE ASC 
    ) 
;

ALTER TABLE LOCATION_ATTRIBUTES 
    ADD CONSTRAINT PK_LOCA PRIMARY KEY ( LOC_CODE, LOCAT_CODE ) ;


ALTER TABLE LOCATION_ATTRIBUTES 
    ADD CONSTRAINT UK_LOCA_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE LOCATION_ATTRIBUTE_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DATA_TYPE VARCHAR2 (1)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     TXT_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE LOCATION_ATTRIBUTE_TYPES 
    ADD CONSTRAINT CH_LOCAT_DATA_TYPE 
    CHECK ( DATA_TYPE IN ('C', 'D', 'N')) 
;


ALTER TABLE LOCATION_ATTRIBUTE_TYPES 
    ADD CONSTRAINT CH_LOCAT_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE LOCATION_ATTRIBUTE_TYPES 
    ADD CONSTRAINT PK_LOCAT PRIMARY KEY ( CODE ) ;


ALTER TABLE LOCATION_ATTRIBUTE_TYPES 
    ADD CONSTRAINT UK_LOCAT_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE LOCATION_RELATIONSHIPS 
    ( 
     LOC_CODE_FROM NUMBER (10)  NOT NULL , 
     LOC_CODE_TO NUMBER (10)  NOT NULL , 
     LOCRT_CODE VARCHAR2 (10)  NOT NULL , 
     START_DATE DATE  NOT NULL , 
     END_DATE DATE  NOT NULL , 
     TXT_ID INTEGER , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE LOCATION_RELATIONSHIPS 
    ADD CONSTRAINT CH_LOCR_DATES 
    CHECK (END_DATE > START_DATE)
;


ALTER TABLE LOCATION_RELATIONSHIPS 
    ADD CONSTRAINT PK_LOCR PRIMARY KEY ( LOC_CODE_FROM, LOC_CODE_TO, LOCRT_CODE, START_DATE ) ;


ALTER TABLE LOCATION_RELATIONSHIPS 
    ADD CONSTRAINT UK_LOCR_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE LOCATION_RELATIONSHIP_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL CHECK ( ACTIVE_FLAG IN ('N', 'Y')) , 
     TXT_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE LOCATION_RELATIONSHIP_TYPES 
    ADD CONSTRAINT CH_LOCRT_CODE 
    CHECK (CODE = upper(CODE))
;


ALTER TABLE LOCATION_RELATIONSHIP_TYPES 
    ADD CONSTRAINT PK_LOCRT PRIMARY KEY ( CODE ) ;


ALTER TABLE LOCATION_RELATIONSHIP_TYPES 
    ADD CONSTRAINT UK_LOCRT_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE LOCATION_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL CHECK ( ACTIVE_FLAG IN ('N', 'Y')) , 
     TXT_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE LOCATION_TYPES 
    ADD CONSTRAINT PK_LOCT PRIMARY KEY ( CODE ) ;


ALTER TABLE LOCATION_TYPES 
    ADD CONSTRAINT UK_LOCT_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE LOCATION_TYPE_NAMES 
    ( 
     LOCT_CODE VARCHAR2 (10)  NOT NULL , 
     LOC_CODE NUMBER (10)  NOT NULL , 
     TXT_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE LOCATION_TYPE_NAMES 
    ADD CONSTRAINT PK_LOCTN PRIMARY KEY ( LOCT_CODE, LOC_CODE ) ;


ALTER TABLE LOCATION_TYPE_NAMES 
    ADD CONSTRAINT UK_LOCTN_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE LOCATION_TYPE_RELATIONSHIPS 
    ( 
     LOCT_CODE_FROM VARCHAR2 (10)  NOT NULL , 
     LOCT_CODE_TO VARCHAR2 (10)  NOT NULL , 
     LOCRT_CODE VARCHAR2 (10)  NOT NULL , 
     TXT_ID INTEGER , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE LOCATION_TYPE_RELATIONSHIPS 
    ADD CONSTRAINT PK_LOCTR PRIMARY KEY ( LOCT_CODE_FROM, LOCT_CODE_TO, LOCRT_CODE ) ;


ALTER TABLE LOCATION_TYPE_RELATIONSHIPS 
    ADD CONSTRAINT UK_LOCTR_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE MESSAGES 
    ( 
     COMP_CODE VARCHAR2 (10)  NOT NULL , 
     SEQ_NBR INTEGER  NOT NULL , 
     SEVERITY VARCHAR2 (1) DEFAULT 'E'  NOT NULL , 
     TXT_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE MESSAGES 
    ADD CONSTRAINT CH_MSG_SEQ_NBR 
    CHECK ( SEQ_NBR > 0) 
;


ALTER TABLE MESSAGES 
    ADD CONSTRAINT CH_MSG_SEVERITY 
    CHECK ( SEVERITY IN ('E', 'I', 'S', 'W')) 
;


ALTER TABLE MESSAGES 
    ADD CONSTRAINT PK_MSG PRIMARY KEY ( COMP_CODE, SEQ_NBR ) ;


ALTER TABLE MESSAGES 
    ADD CONSTRAINT UK_MSG_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE POPULATION_CATEGORIES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL CHECK ( ACTIVE_FLAG IN ('N', 'Y')) , 
     TXT_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE POPULATION_CATEGORIES 
    ADD CONSTRAINT PK_POPC PRIMARY KEY ( CODE ) ;


ALTER TABLE POPULATION_CATEGORIES 
    ADD CONSTRAINT UK_POPC_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE POPULATION_PLANNING_GROUPS 
    ( 
     ID INTEGER  NOT NULL , 
     LOC_CODE NUMBER (10)  NOT NULL , 
     PPG_CODE VARCHAR2 (5)  NOT NULL , 
     START_DATE DATE  NOT NULL , 
     END_DATE DATE  NOT NULL , 
     TXT_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE POPULATION_PLANNING_GROUPS 
    ADD CONSTRAINT CH_PPG_DATES 
    CHECK (END_DATE > START_DATE)
;


ALTER TABLE POPULATION_PLANNING_GROUPS 
    ADD CONSTRAINT PK_PPG PRIMARY KEY ( ID ) ;


ALTER TABLE POPULATION_PLANNING_GROUPS 
    ADD CONSTRAINT UK_PPG_TXT_ID UNIQUE ( TXT_ID ) ;


ALTER TABLE POPULATION_PLANNING_GROUPS 
    ADD CONSTRAINT UK_PPG UNIQUE ( LOC_CODE , PPG_CODE , START_DATE ) ;



CREATE TABLE SEXES 
    ( 
     CODE VARCHAR2 (1)  NOT NULL CHECK ( CODE IN ('F', 'M')) , 
     DISPLAY_SEQ NUMBER (5) , 
     TXT_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE SEXES 
    ADD CONSTRAINT PK_SEX PRIMARY KEY ( CODE ) ;


ALTER TABLE SEXES 
    ADD CONSTRAINT UK_SEX_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE STATISTICS 
    ( 
     ID INTEGER  NOT NULL , 
     STCT_CODE VARCHAR2 (10)  NOT NULL , 
     LOC_CODE NUMBER (10)  NOT NULL , 
     LOC_CODE_COUNTRY NUMBER (10)  NOT NULL , 
     COUNTRY_CODE VARCHAR2 (3)  NOT NULL , 
     LOC_CODE_ORIGIN NUMBER (10) , 
     LOC_CODE_COUNTRY_ORIGIN NUMBER (10) , 
     COUNTRY_CODE_ORIGIN VARCHAR2 (3) , 
     PPG_ID INTEGER , 
     POPC_CODE VARCHAR2 (10) , 
     PER_ID INTEGER , 
     SEX_CODE VARCHAR2 (1) CHECK ( SEX_CODE IN ('F', 'M')) , 
     AGR_ID INTEGER , 
     DIM_ID1 INTEGER , 
     DIM_ID2 INTEGER , 
     DIM_ID3 INTEGER , 
     DIM_ID4 INTEGER , 
     DIM_ID5 INTEGER , 
     STB_ID INTEGER , 
     VALUE INTEGER  NOT NULL , 
     TXT_ID INTEGER , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE STATISTICS 
    ADD CONSTRAINT CH_STC_COUNTRY_ORIGIN 
    CHECK ((LOC_CODE_COUNTRY_ORIGIN is null and COUNTRY_CODE_ORIGIN is null) or
(LOC_CODE_COUNTRY_ORIGIN is not null and COUNTRY_CODE_ORIGIN is not null))
;


ALTER TABLE STATISTICS 
    ADD CONSTRAINT PK_STC PRIMARY KEY ( ID ) ;


ALTER TABLE STATISTICS 
    ADD CONSTRAINT UK_STC UNIQUE ( STCT_CODE , LOC_CODE , LOC_CODE_COUNTRY , LOC_CODE_ORIGIN , LOC_CODE_COUNTRY_ORIGIN , PPG_ID , POPC_CODE , PER_ID , SEX_CODE , AGR_ID , DIM_ID1 , DIM_ID2 , DIM_ID3 , DIM_ID4 , DIM_ID5 ) ;


ALTER TABLE STATISTICS 
    ADD CONSTRAINT UK_STC_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE STATISTICS_BATCHES 
    ( 
     ID INTEGER  NOT NULL , 
     DESCRIPTION VARCHAR2 (1000)  NOT NULL , 
     STATUS VARCHAR2 (10) , 
     PROVENANCE VARCHAR2 (100) 
    ) 
;



ALTER TABLE STATISTICS_BATCHES 
    ADD CONSTRAINT PK_STB PRIMARY KEY ( ID ) ;



CREATE TABLE STATISTIC_GROUPS 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL CHECK ( ACTIVE_FLAG IN ('N', 'Y')) , 
     TXT_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE STATISTIC_GROUPS 
    ADD CONSTRAINT PK_STCG PRIMARY KEY ( CODE ) ;


ALTER TABLE STATISTIC_GROUPS 
    ADD CONSTRAINT UK_STCG_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE STATISTIC_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL CHECK ( ACTIVE_FLAG IN ('N', 'Y')) , 
     TXT_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE STATISTIC_TYPES 
    ADD CONSTRAINT PK_STCT PRIMARY KEY ( CODE ) ;


ALTER TABLE STATISTIC_TYPES 
    ADD CONSTRAINT UK_STCT_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE STATISTIC_TYPES_IN_GROUPS 
    ( 
     STCG_CODE VARCHAR2 (10)  NOT NULL , 
     STCT_CODE VARCHAR2 (10)  NOT NULL , 
     TXT_ID INTEGER , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE STATISTIC_TYPES_IN_GROUPS 
    ADD CONSTRAINT PK_STCTG PRIMARY KEY ( STCG_CODE, STCT_CODE ) ;


ALTER TABLE STATISTIC_TYPES_IN_GROUPS 
    ADD CONSTRAINT UK_STCTG_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE SYSTEM_PARAMETERS 
    ( 
     CODE VARCHAR2 (30)  NOT NULL , 
     DATA_TYPE VARCHAR2 (1)  NOT NULL , 
     CHAR_VALUE VARCHAR2 (1000) , 
     NUM_VALUE NUMBER , 
     DATE_VALUE DATE , 
     TXT_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE SYSTEM_PARAMETERS 
    ADD CONSTRAINT CH_SYP_DATA_TYPE 
    CHECK ((DATA_TYPE = 'C' and CHAR_VALUE is not null and NUM_VALUE is null and DATE_VALUE is null) or
(DATA_TYPE = 'N' and CHAR_VALUE is null and NUM_VALUE is not null and DATE_VALUE is null) or
(DATA_TYPE = 'D' and CHAR_VALUE is null and NUM_VALUE is null and DATE_VALUE is not null))
;


ALTER TABLE SYSTEM_PARAMETERS 
    ADD CONSTRAINT PK_SYP PRIMARY KEY ( CODE ) ;


ALTER TABLE SYSTEM_PARAMETERS 
    ADD CONSTRAINT UK_SYP_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE SYSTEM_USERS 
    ( 
     USERID VARCHAR2 (30)  NOT NULL , 
     LOCKED_FLAG VARCHAR2 (1) DEFAULT 'N'  NOT NULL , 
     TEMPLATE_FLAG VARCHAR2 (1) DEFAULT 'N'  NOT NULL , 
     TXT_ID INTEGER  NOT NULL , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE SYSTEM_USERS 
    ADD CONSTRAINT CH_USR_LOCKED_FLAG 
    CHECK ( LOCKED_FLAG IN ('N', 'Y')) 
;


ALTER TABLE SYSTEM_USERS 
    ADD CONSTRAINT CH_USR_TEMPLATE_FLAG 
    CHECK ( TEMPLATE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE SYSTEM_USERS 
    ADD CONSTRAINT PK_USR PRIMARY KEY ( USERID ) ;


ALTER TABLE SYSTEM_USERS 
    ADD CONSTRAINT UK_USR_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE TABLE_ALIASES 
    ( 
     ALIAS VARCHAR2 (10)  NOT NULL , 
     TABLE_NAME VARCHAR2 (30)  NOT NULL , 
     TXT_ID INTEGER 
    ) 
;



ALTER TABLE TABLE_ALIASES 
    ADD CONSTRAINT PK_TAB PRIMARY KEY ( ALIAS ) ;


ALTER TABLE TABLE_ALIASES 
    ADD CONSTRAINT UK_TAB_TABLE_NAME UNIQUE ( TABLE_NAME ) ;


ALTER TABLE TABLE_ALIASES 
    ADD CONSTRAINT UK_TAB_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE TEXT_HEADERS 
    ( 
     ID INTEGER  NOT NULL , 
     TAB_ALIAS VARCHAR2 (10)  NOT NULL 
    ) 
;



ALTER TABLE TEXT_HEADERS 
    ADD CONSTRAINT PK_TXT PRIMARY KEY ( ID ) ;



CREATE TABLE TEXT_ITEMS 
    ( 
     TXT_ID INTEGER  NOT NULL , 
     TXTT_CODE VARCHAR2 (10)  NOT NULL , 
     SEQ_NBR INTEGER  NOT NULL , 
     LANG_CODE VARCHAR2 (6)  NOT NULL , 
     TAB_ALIAS VARCHAR2 (10)  NOT NULL , 
     TEXT VARCHAR2 (1000) , 
     LONG_TEXT CLOB , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL 
    ) 
;



ALTER TABLE TEXT_ITEMS 
    ADD CONSTRAINT CH_TXI_SEQ_NBR 
    CHECK ( SEQ_NBR > 0) 
;


ALTER TABLE TEXT_ITEMS 
    ADD CONSTRAINT CH_TXI_TEXT 
    CHECK ((TEXT is not null and LONG_TEXT is null) or
(TEXT is null and LONG_TEXT is not null))
;


ALTER TABLE TEXT_ITEMS 
    ADD CONSTRAINT PK_TXI PRIMARY KEY ( TXT_ID, TXTT_CODE, SEQ_NBR, LANG_CODE ) ;



CREATE TABLE TEXT_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     TXT_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE TEXT_TYPES 
    ADD CONSTRAINT CH_TXTT_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE TEXT_TYPES 
    ADD CONSTRAINT PK_TXTT PRIMARY KEY ( CODE ) ;


ALTER TABLE TEXT_TYPES 
    ADD CONSTRAINT UK_TXTT_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE TEXT_TYPE_HEADERS 
    ( 
     TXT_ID INTEGER  NOT NULL , 
     TXTT_CODE VARCHAR2 (10)  NOT NULL , 
     TAB_ALIAS VARCHAR2 (10)  NOT NULL , 
     TXI_SEQ_NBR_MAX INTEGER DEFAULT 0  NOT NULL 
    ) 
;



ALTER TABLE TEXT_TYPE_HEADERS 
    ADD CONSTRAINT CH_TTH_TXI_SEQ_NBR_MAX 
    CHECK ( TXI_SEQ_NBR_MAX >= 0) 
;

CREATE INDEX PSR.IX_TTH_TTP ON TEXT_TYPE_HEADERS 
    ( 
     TXTT_CODE ASC , 
     TAB_ALIAS ASC 
    ) 
;

ALTER TABLE TEXT_TYPE_HEADERS 
    ADD CONSTRAINT PK_TTH PRIMARY KEY ( TXT_ID, TXTT_CODE ) ;



CREATE TABLE TEXT_TYPE_PROPERTIES 
    ( 
     TXTT_CODE VARCHAR2 (10)  NOT NULL , 
     TAB_ALIAS VARCHAR2 (10)  NOT NULL , 
     MANDATORY_FLAG VARCHAR2 (1) DEFAULT 'N'  NOT NULL , 
     MULTI_INSTANCE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     LONG_TEXT_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     TXT_ID INTEGER , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT CH_TTP_MANDATORY_FLAG 
    CHECK ( MANDATORY_FLAG IN ('N', 'Y')) 
;


ALTER TABLE TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT CH_TTP_MULTI_INSTANCE_FLAG 
    CHECK ( MULTI_INSTANCE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT CH_TTP_LONG_TEXT_FLAG 
    CHECK ( LONG_TEXT_FLAG IN ('N', 'Y')) 
;


COMMENT ON COLUMN TEXT_TYPE_PROPERTIES.MANDATORY_FLAG IS 'Is a text item of this type mandatory for all rows of this table?' 
;

COMMENT ON COLUMN TEXT_TYPE_PROPERTIES.MULTI_INSTANCE_FLAG IS 'Can there be multiple instances of text values of this type for a row in this table?' 
;

COMMENT ON COLUMN TEXT_TYPE_PROPERTIES.LONG_TEXT_FLAG IS 'Can text values of this type be longer than 1000 characters in this table (i.e. stored as CLOB)?' 
;

ALTER TABLE TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT PK_TTP PRIMARY KEY ( TXTT_CODE, TAB_ALIAS ) ;


ALTER TABLE TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT UK_TTP_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE TIME_PERIODS 
    ( 
     ID INTEGER  NOT NULL , 
     PERT_CODE VARCHAR2 (10)  NOT NULL , 
     START_DATE DATE  NOT NULL , 
     END_DATE DATE , 
     TXT_ID INTEGER , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE TIME_PERIODS 
    ADD CONSTRAINT CH_PER_DATES 
    CHECK (END_DATE > START_DATE)
;


ALTER TABLE TIME_PERIODS 
    ADD CONSTRAINT PK_PER PRIMARY KEY ( ID ) ;


ALTER TABLE TIME_PERIODS 
    ADD CONSTRAINT UK_PER UNIQUE ( PERT_CODE , START_DATE ) ;


ALTER TABLE TIME_PERIODS 
    ADD CONSTRAINT UK_PER_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE TIME_PERIOD_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL CHECK ( ACTIVE_FLAG IN ('N', 'Y')) , 
     TXT_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE TIME_PERIOD_TYPES 
    ADD CONSTRAINT PK_PERT PRIMARY KEY ( CODE ) ;


ALTER TABLE TIME_PERIOD_TYPES 
    ADD CONSTRAINT UK_PERT_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE USER_ATTRIBUTES 
    ( 
     USERID VARCHAR2 (30)  NOT NULL , 
     UATT_CODE VARCHAR2 (10)  NOT NULL , 
     CHAR_VALUE VARCHAR2 (1000) , 
     NUM_VALUE NUMBER , 
     DATE_VALUE DATE , 
     TXT_ID INTEGER , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE USER_ATTRIBUTES 
    ADD CONSTRAINT CH_UAT_VALUE 
    CHECK ((CHAR_VALUE is not null and NUM_VALUE is null and DATE_VALUE is null) or
(CHAR_VALUE is null and NUM_VALUE is not null and DATE_VALUE is null) or
(CHAR_VALUE is null and NUM_VALUE is null and DATE_VALUE is not null))
;

CREATE INDEX PSR.IX_UAT_UATT ON USER_ATTRIBUTES 
    ( 
     UATT_CODE ASC 
    ) 
;

ALTER TABLE USER_ATTRIBUTES 
    ADD CONSTRAINT PK_UAT PRIMARY KEY ( USERID, UATT_CODE ) ;


ALTER TABLE USER_ATTRIBUTES 
    ADD CONSTRAINT UK_UAT_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE USER_ATTRIBUTE_TYPES 
    ( 
     CODE VARCHAR2 (10)  NOT NULL , 
     DATA_TYPE VARCHAR2 (1)  NOT NULL , 
     DISPLAY_SEQ NUMBER (5) , 
     ACTIVE_FLAG VARCHAR2 (1) DEFAULT 'Y'  NOT NULL , 
     TXT_ID INTEGER  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;



ALTER TABLE USER_ATTRIBUTE_TYPES 
    ADD CONSTRAINT CH_UATT_DATA_TYPE 
    CHECK ( DATA_TYPE IN ('C', 'D', 'N')) 
;


ALTER TABLE USER_ATTRIBUTE_TYPES 
    ADD CONSTRAINT CH_UATT_ACTIVE_FLAG 
    CHECK ( ACTIVE_FLAG IN ('N', 'Y')) 
;


ALTER TABLE USER_ATTRIBUTE_TYPES 
    ADD CONSTRAINT PK_UATT PRIMARY KEY ( CODE ) ;


ALTER TABLE USER_ATTRIBUTE_TYPES 
    ADD CONSTRAINT UK_UATT_TXT_ID UNIQUE ( TXT_ID ) ;



CREATE TABLE USER_LANGUAGE_PREFERENCES 
    ( 
     USERID VARCHAR2 (30)  NOT NULL , 
     LANG_CODE VARCHAR2 (6)  NOT NULL , 
     PREF_SEQ NUMBER (5)  NOT NULL , 
     UPDATE_TIMESTAMP TIMESTAMP WITH LOCAL TIME ZONE DEFAULT systimestamp  NOT NULL , 
     UPDATE_USERID VARCHAR2 (31) DEFAULT nvl(sys_context('PSR', 'USERID'), '*' || user)  NOT NULL , 
     VERSION_NBR INTEGER DEFAULT 1  NOT NULL 
    ) 
;


CREATE INDEX PSR.IX_ULP_LANG_CODE ON USER_LANGUAGE_PREFERENCES 
    ( 
     LANG_CODE ASC 
    ) 
;

ALTER TABLE USER_LANGUAGE_PREFERENCES 
    ADD CONSTRAINT PK_ULP PRIMARY KEY ( USERID, LANG_CODE ) ;


ALTER TABLE USER_LANGUAGE_PREFERENCES 
    ADD CONSTRAINT UK_ULP_PREF_SEQ UNIQUE ( USERID , PREF_SEQ ) ;




ALTER TABLE AGE_PROFILES 
    ADD CONSTRAINT FK_AGP_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
;


ALTER TABLE AGE_RANGES 
    ADD CONSTRAINT FK_AGR_AGP FOREIGN KEY 
    ( 
     AGP_CODE
    ) 
    REFERENCES AGE_PROFILES 
    ( 
     CODE
    ) 
;


ALTER TABLE AGE_RANGES 
    ADD CONSTRAINT FK_AGR_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
;


ALTER TABLE COMPONENTS 
    ADD CONSTRAINT FK_COMP_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
;


ALTER TABLE DIMENSION_TYPES 
    ADD CONSTRAINT FK_DIMT_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
;


ALTER TABLE DIMENSION_VALUES 
    ADD CONSTRAINT FK_DIM_DIMT FOREIGN KEY 
    ( 
     DIMT_CODE
    ) 
    REFERENCES DIMENSION_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE DIMENSION_VALUES 
    ADD CONSTRAINT FK_DIM_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
;


ALTER TABLE LANGUAGES 
    ADD CONSTRAINT FK_LANG_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
;


ALTER TABLE LOCATION_ATTRIBUTE_TYPES 
    ADD CONSTRAINT FK_LOCAT_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
;


ALTER TABLE LOCATION_ATTRIBUTES 
    ADD CONSTRAINT FK_LOCA_LOC FOREIGN KEY 
    ( 
     LOC_CODE
    ) 
    REFERENCES LOCATIONS 
    ( 
     CODE
    ) 
;


ALTER TABLE LOCATION_ATTRIBUTES 
    ADD CONSTRAINT FK_LOCA_LOCAT FOREIGN KEY 
    ( 
     LOCAT_CODE
    ) 
    REFERENCES LOCATION_ATTRIBUTE_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE LOCATION_ATTRIBUTES 
    ADD CONSTRAINT FK_LOCA_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE LOCATION_RELATIONSHIP_TYPES 
    ADD CONSTRAINT FK_LOCRT_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
;


ALTER TABLE LOCATION_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCR_LOCRT FOREIGN KEY 
    ( 
     LOCRT_CODE
    ) 
    REFERENCES LOCATION_RELATIONSHIP_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE LOCATION_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCR_LOC_FROM FOREIGN KEY 
    ( 
     LOC_CODE_FROM
    ) 
    REFERENCES LOCATIONS 
    ( 
     CODE
    ) 
;


ALTER TABLE LOCATION_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCR_LOC_TO FOREIGN KEY 
    ( 
     LOC_CODE_TO
    ) 
    REFERENCES LOCATIONS 
    ( 
     CODE
    ) 
;


ALTER TABLE LOCATION_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCR_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE LOCATION_TYPE_NAMES 
    ADD CONSTRAINT FK_LOCTN_LOC FOREIGN KEY 
    ( 
     LOC_CODE
    ) 
    REFERENCES LOCATIONS 
    ( 
     CODE
    ) 
;


ALTER TABLE LOCATION_TYPE_NAMES 
    ADD CONSTRAINT FK_LOCTN_LOCT FOREIGN KEY 
    ( 
     LOCT_CODE
    ) 
    REFERENCES LOCATION_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE LOCATION_TYPE_NAMES 
    ADD CONSTRAINT FK_LOCTN_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
;


ALTER TABLE LOCATION_TYPE_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCTR_LOCRT FOREIGN KEY 
    ( 
     LOCRT_CODE
    ) 
    REFERENCES LOCATION_RELATIONSHIP_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE LOCATION_TYPE_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCTR_LOCT_FROM FOREIGN KEY 
    ( 
     LOCT_CODE_FROM
    ) 
    REFERENCES LOCATION_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE LOCATION_TYPE_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCTR_LOCT_TO FOREIGN KEY 
    ( 
     LOCT_CODE_TO
    ) 
    REFERENCES LOCATION_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE LOCATION_TYPE_RELATIONSHIPS 
    ADD CONSTRAINT FK_LOCTR_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE LOCATION_TYPES 
    ADD CONSTRAINT FK_LOCT_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
;


ALTER TABLE LOCATIONS 
    ADD CONSTRAINT FK_LOC_LOCT FOREIGN KEY 
    ( 
     LOCT_CODE
    ) 
    REFERENCES LOCATION_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE LOCATIONS 
    ADD CONSTRAINT FK_LOC_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
;


ALTER TABLE MESSAGES 
    ADD CONSTRAINT FK_MSG_COMP FOREIGN KEY 
    ( 
     COMP_CODE
    ) 
    REFERENCES COMPONENTS 
    ( 
     CODE
    ) 
;


ALTER TABLE MESSAGES 
    ADD CONSTRAINT FK_MSG_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
;


ALTER TABLE TIME_PERIOD_TYPES 
    ADD CONSTRAINT FK_PERT_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
;


ALTER TABLE TIME_PERIODS 
    ADD CONSTRAINT FK_PER_PERT FOREIGN KEY 
    ( 
     PERT_CODE
    ) 
    REFERENCES TIME_PERIOD_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE TIME_PERIODS 
    ADD CONSTRAINT FK_PER_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE POPULATION_CATEGORIES 
    ADD CONSTRAINT FK_POPC_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
;


ALTER TABLE POPULATION_PLANNING_GROUPS 
    ADD CONSTRAINT FK_PPG_LOC FOREIGN KEY 
    ( 
     LOC_CODE
    ) 
    REFERENCES LOCATIONS 
    ( 
     CODE
    ) 
;


ALTER TABLE POPULATION_PLANNING_GROUPS 
    ADD CONSTRAINT FK_PPG_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
;


ALTER TABLE STATISTIC_GROUPS 
    ADD CONSTRAINT FK_STCG_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
;


ALTER TABLE STATISTIC_TYPES_IN_GROUPS 
    ADD CONSTRAINT FK_STCTG_STCG FOREIGN KEY 
    ( 
     STCG_CODE
    ) 
    REFERENCES STATISTIC_GROUPS 
    ( 
     CODE
    ) 
;


ALTER TABLE STATISTIC_TYPES_IN_GROUPS 
    ADD CONSTRAINT FK_STCTG_STCT FOREIGN KEY 
    ( 
     STCT_CODE
    ) 
    REFERENCES STATISTIC_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE STATISTIC_TYPES_IN_GROUPS 
    ADD CONSTRAINT FK_STCTG_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE STATISTIC_TYPES 
    ADD CONSTRAINT FK_STCT_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
;


ALTER TABLE STATISTICS 
    ADD CONSTRAINT FK_STC_AGR FOREIGN KEY 
    ( 
     AGR_ID
    ) 
    REFERENCES AGE_RANGES 
    ( 
     ID
    ) 
;


ALTER TABLE STATISTICS 
    ADD CONSTRAINT FK_STC_DIM1 FOREIGN KEY 
    ( 
     DIM_ID1
    ) 
    REFERENCES DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE STATISTICS 
    ADD CONSTRAINT FK_STC_DIM2 FOREIGN KEY 
    ( 
     DIM_ID2
    ) 
    REFERENCES DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE STATISTICS 
    ADD CONSTRAINT FK_STC_DIM3 FOREIGN KEY 
    ( 
     DIM_ID3
    ) 
    REFERENCES DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE STATISTICS 
    ADD CONSTRAINT FK_STC_DIM4 FOREIGN KEY 
    ( 
     DIM_ID4
    ) 
    REFERENCES DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE STATISTICS 
    ADD CONSTRAINT FK_STC_DIM5 FOREIGN KEY 
    ( 
     DIM_ID5
    ) 
    REFERENCES DIMENSION_VALUES 
    ( 
     ID
    ) 
;


ALTER TABLE STATISTICS 
    ADD CONSTRAINT FK_STC_LOC FOREIGN KEY 
    ( 
     LOC_CODE
    ) 
    REFERENCES LOCATIONS 
    ( 
     CODE
    ) 
;


ALTER TABLE STATISTICS 
    ADD CONSTRAINT FK_STC_LOC_COUNTRY FOREIGN KEY 
    ( 
     LOC_CODE_COUNTRY
    ) 
    REFERENCES LOCATIONS 
    ( 
     CODE
    ) 
;


ALTER TABLE STATISTICS 
    ADD CONSTRAINT FK_STC_LOC_COUNTRY_ORIGIN FOREIGN KEY 
    ( 
     LOC_CODE_COUNTRY_ORIGIN
    ) 
    REFERENCES LOCATIONS 
    ( 
     CODE
    ) 
;


ALTER TABLE STATISTICS 
    ADD CONSTRAINT FK_STC_LOC_ORIGIN FOREIGN KEY 
    ( 
     LOC_CODE_ORIGIN
    ) 
    REFERENCES LOCATIONS 
    ( 
     CODE
    ) 
;


ALTER TABLE STATISTICS 
    ADD CONSTRAINT FK_STC_PER FOREIGN KEY 
    ( 
     PER_ID
    ) 
    REFERENCES TIME_PERIODS 
    ( 
     ID
    ) 
;


ALTER TABLE STATISTICS 
    ADD CONSTRAINT FK_STC_POPC FOREIGN KEY 
    ( 
     POPC_CODE
    ) 
    REFERENCES POPULATION_CATEGORIES 
    ( 
     CODE
    ) 
;


ALTER TABLE STATISTICS 
    ADD CONSTRAINT FK_STC_PPG FOREIGN KEY 
    ( 
     PPG_ID
    ) 
    REFERENCES POPULATION_PLANNING_GROUPS 
    ( 
     ID
    ) 
;


ALTER TABLE STATISTICS 
    ADD CONSTRAINT FK_STC_RCXv1 FOREIGN KEY 
    ( 
     STB_ID
    ) 
    REFERENCES STATISTICS_BATCHES 
    ( 
     ID
    ) 
;


ALTER TABLE STATISTICS 
    ADD CONSTRAINT FK_STC_SEX FOREIGN KEY 
    ( 
     SEX_CODE
    ) 
    REFERENCES SEXES 
    ( 
     CODE
    ) 
;


ALTER TABLE STATISTICS 
    ADD CONSTRAINT FK_STC_STCT FOREIGN KEY 
    ( 
     STCT_CODE
    ) 
    REFERENCES STATISTIC_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE STATISTICS 
    ADD CONSTRAINT FK_STC_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE SYSTEM_PARAMETERS 
    ADD CONSTRAINT FK_SYP_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
;


ALTER TABLE TABLE_ALIASES 
    ADD CONSTRAINT FK_TAB_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE TEXT_TYPE_HEADERS 
    ADD CONSTRAINT FK_TTH_TTP FOREIGN KEY 
    ( 
     TXTT_CODE,
     TAB_ALIAS
    ) 
    REFERENCES TEXT_TYPE_PROPERTIES 
    ( 
     TXTT_CODE,
     TAB_ALIAS
    ) 
;


ALTER TABLE TEXT_TYPE_HEADERS 
    ADD CONSTRAINT FK_TTH_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE TEXT_TYPE_HEADERS 
    ADD CONSTRAINT FK_TTH_TXTT FOREIGN KEY 
    ( 
     TXTT_CODE
    ) 
    REFERENCES TEXT_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT FK_TTP_TAB FOREIGN KEY 
    ( 
     TAB_ALIAS
    ) 
    REFERENCES TABLE_ALIASES 
    ( 
     ALIAS
    ) 
;


ALTER TABLE TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT FK_TTP_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE TEXT_TYPE_PROPERTIES 
    ADD CONSTRAINT FK_TTP_TXTT FOREIGN KEY 
    ( 
     TXTT_CODE
    ) 
    REFERENCES TEXT_TYPES 
    ( 
     CODE
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE TEXT_ITEMS 
    ADD CONSTRAINT FK_TXI_LANG FOREIGN KEY 
    ( 
     LANG_CODE
    ) 
    REFERENCES LANGUAGES 
    ( 
     CODE
    ) 
;


ALTER TABLE TEXT_ITEMS 
    ADD CONSTRAINT FK_TXI_TTH FOREIGN KEY 
    ( 
     TXT_ID,
     TXTT_CODE
    ) 
    REFERENCES TEXT_TYPE_HEADERS 
    ( 
     TXT_ID,
     TXTT_CODE
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE TEXT_TYPES 
    ADD CONSTRAINT FK_TXTT_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
;


ALTER TABLE TEXT_HEADERS 
    ADD CONSTRAINT FK_TXT_TAB FOREIGN KEY 
    ( 
     TAB_ALIAS
    ) 
    REFERENCES TABLE_ALIASES 
    ( 
     ALIAS
    ) 
;


ALTER TABLE USER_ATTRIBUTE_TYPES 
    ADD CONSTRAINT FK_UATT_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
;


ALTER TABLE USER_ATTRIBUTES 
    ADD CONSTRAINT FK_UAT_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
    ON DELETE SET NULL 
;


ALTER TABLE USER_ATTRIBUTES 
    ADD CONSTRAINT FK_UAT_UATT FOREIGN KEY 
    ( 
     UATT_CODE
    ) 
    REFERENCES USER_ATTRIBUTE_TYPES 
    ( 
     CODE
    ) 
;


ALTER TABLE USER_ATTRIBUTES 
    ADD CONSTRAINT FK_UAT_USR FOREIGN KEY 
    ( 
     USERID
    ) 
    REFERENCES SYSTEM_USERS 
    ( 
     USERID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE USER_LANGUAGE_PREFERENCES 
    ADD CONSTRAINT FK_ULP_LANG FOREIGN KEY 
    ( 
     LANG_CODE
    ) 
    REFERENCES LANGUAGES 
    ( 
     CODE
    ) 
;


ALTER TABLE USER_LANGUAGE_PREFERENCES 
    ADD CONSTRAINT FK_ULP_USR FOREIGN KEY 
    ( 
     USERID
    ) 
    REFERENCES SYSTEM_USERS 
    ( 
     USERID
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE SYSTEM_USERS 
    ADD CONSTRAINT FK_USR_TXT FOREIGN KEY 
    ( 
     TXT_ID
    ) 
    REFERENCES TEXT_HEADERS 
    ( 
     ID
    ) 
    ON DELETE CASCADE 
;

CREATE OR REPLACE VIEW L_AGE_PROFILES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  TXT_ID,
  VERSION_NBR
FROM
  (SELECT AGP.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    AGP.DISPLAY_SEQ,
    AGP.ACTIVE_FLAG,
    AGP.TXT_ID,
    AGP.VERSION_NBR,
    row_number() OVER (PARTITION BY AGP.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM AGE_PROFILES AGP
  INNER JOIN TEXT_ITEMS TXI
  ON TXI.TXT_ID     = AGP.TXT_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_AGE_RANGES AS
SELECT ID,
  DESCRIPTION,
  LANG_CODE,
  AGP_CODE,
  AGE_FROM,
  AGE_TO,
  TXT_ID,
  VERSION_NBR
FROM
  (SELECT AGR.ID,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    AGR.AGP_CODE,
    AGR.AGE_FROM,
    AGR.AGE_TO,
    AGR.TXT_ID,
    AGR.VERSION_NBR,
    row_number() OVER (PARTITION BY AGR.ID ORDER BY LANG.ACTIVE_FLAG, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM AGE_RANGES AGR
  INNER JOIN TEXT_ITEMS TXI
  ON TXI.TXT_ID     = AGR.TXT_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_COMPONENTS AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  TXT_ID,
  VERSION_NBR
FROM
  (SELECT COMP.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    COMP.DISPLAY_SEQ,
    COMP.ACTIVE_FLAG,
    COMP.TXT_ID,
    COMP.VERSION_NBR,
    row_number() OVER (PARTITION BY COMP.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM COMPONENTS COMP
  INNER JOIN TEXT_ITEMS TXI
  ON TXI.TXT_ID     = COMP.TXT_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_COUNTRIES AS
WITH LOC AS
  (SELECT CODE,
    NAME,
    LANG_CODE,
    LOCT_CODE,
    COUNTRY_CODE,
    START_DATE,
    END_DATE,
    TXT_ID,
    VERSION_NBR
  FROM
    (SELECT LOC.CODE,
      TXI.TEXT NAME,
      TXI.LANG_CODE,
      LOC.LOCT_CODE,
      LOC.COUNTRY_CODE,
      LOC.START_DATE,
      LOC.END_DATE,
      LOC.TXT_ID,
      LOC.VERSION_NBR,
      row_number() OVER (PARTITION BY LOC.CODE ORDER BY LANG.ACTIVE_FLAG, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
    FROM LOCATIONS LOC
    INNER JOIN TEXT_ITEMS TXI
    ON TXI.TXT_ID     = LOC.TXT_ID
    AND TXI.TXTT_CODE = 'NAME'
    AND TXI.SEQ_NBR   = 1
    INNER JOIN LANGUAGES LANG
    ON LANG.CODE = TXI.LANG_CODE
    LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXI.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  )
SELECT LOC.CODE,
  LOC.NAME,
  LOC.LANG_CODE,
  LOCA1.CHAR_VALUE AS ISO3166_ALPHA3_CODE,
  LOCA2.CHAR_VALUE AS ISO3166_ALPHA2_CODE,
  LOCA3.CHAR_VALUE AS ISO3166_NUMERIC_CODE,
  LOCA4.CHAR_VALUE AS UNHCR_COUNTRY_CODE,
  LOC.START_DATE,
  LOC.END_DATE,
  LOC.TXT_ID,
  LOC.VERSION_NBR
FROM LOC
LEFT OUTER JOIN LOCATION_ATTRIBUTES LOCA1
ON LOCA1.LOC_CODE    = LOC.CODE
AND LOCA1.LOCAT_CODE = 'IS03166A3'
LEFT OUTER JOIN LOCATION_ATTRIBUTES LOCA2
ON LOCA2.LOC_CODE    = LOC.CODE
AND LOCA2.LOCAT_CODE = 'IS03166A2'
LEFT OUTER JOIN LOCATION_ATTRIBUTES LOCA3
ON LOCA3.LOC_CODE    = LOC.CODE
AND LOCA3.LOCAT_CODE = 'IS03166NUM'
LEFT OUTER JOIN LOCATION_ATTRIBUTES LOCA4
ON LOCA4.LOC_CODE    = LOC.CODE
AND LOCA4.LOCAT_CODE = 'UNHCRCC'
WHERE LOC.LOCT_CODE  = 'COUNTRY' ;



CREATE OR REPLACE VIEW L_DESCRIPTIONS AS
SELECT TXT_ID,
  LANG_CODE,
  TAB_ALIAS,
  TEXT DESCRIPTION
FROM
  (SELECT TXI.TXT_ID,
    TXI.LANG_CODE,
    TXI.TAB_ALIAS,
    TXI.TEXT,
    row_number() OVER (PARTITION BY TXI.TXT_ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM TEXT_ITEMS TXI
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE    = TXI.LANG_CODE
  AND ULP.USERID      = sys_context('PSR', 'USERID')
  WHERE TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR     = 1
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_DIMENSION_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  TXT_ID,
  VERSION_NBR
FROM
  (SELECT DIMT.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    DIMT.DISPLAY_SEQ,
    DIMT.ACTIVE_FLAG,
    DIMT.TXT_ID,
    DIMT.VERSION_NBR,
    row_number() OVER (PARTITION BY DIMT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM DIMENSION_TYPES DIMT
  INNER JOIN TEXT_ITEMS TXI
  ON TXI.TXT_ID     = DIMT.TXT_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_DIMENSION_VALUES AS
SELECT ID,
  DESCRIPTION,
  LANG_CODE,
  DIMT_CODE,
  CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  TXT_ID,
  VERSION_NBR
FROM
  (SELECT DIM.ID,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    DIM.DIMT_CODE,
    DIM.CODE,
    DIM.DISPLAY_SEQ,
    DIM.ACTIVE_FLAG,
    DIM.TXT_ID,
    DIM.VERSION_NBR,
    row_number() OVER (PARTITION BY DIM.ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM DIMENSION_VALUES DIM
  INNER JOIN TEXT_ITEMS TXI
  ON TXI.TXT_ID     = DIM.TXT_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_HIERARCHICAL_LOCATIONS AS
WITH LOC AS
  (SELECT CODE,
    NAME,
    LANG_CODE,
    LOCT_CODE
  FROM
    (SELECT LOC.CODE,
      TXI.TEXT NAME,
      TXI.LANG_CODE,
      LOC.LOCT_CODE,
      row_number() OVER (PARTITION BY LOC.CODE ORDER BY LANG.ACTIVE_FLAG, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
    FROM LOCATIONS LOC
    INNER JOIN TEXT_ITEMS TXI
    ON TXI.TXT_ID     = LOC.TXT_ID
    AND TXI.TXTT_CODE = 'NAME'
    AND TXI.SEQ_NBR   = 1
    INNER JOIN LANGUAGES LANG
    ON LANG.CODE = TXI.LANG_CODE
    LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
    ON ULP.LANG_CODE = TXI.LANG_CODE
    AND ULP.USERID   = sys_context('PSR', 'USERID')
    )
  WHERE RANK = 1
  )
SELECT LOC.CODE,
  LOC.LOCT_CODE,
  LOC.NAME,
  LOC.LANG_CODE,
  LOCR.LOC_CODE_FROM
FROM LOC
LEFT OUTER JOIN LOCATION_RELATIONSHIPS LOCR
ON LOCR.LOC_CODE_TO  = LOC.CODE
AND LOCR.LOCRT_CODE  = 'WITHIN'
AND LOCR.START_DATE <= SYSDATE
AND LOCR.END_DATE    > SYSDATE ;



CREATE OR REPLACE VIEW L_LANGUAGES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  TXT_ID,
  VERSION_NBR
FROM
  (SELECT LANG.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    LANG.DISPLAY_SEQ,
    LANG.ACTIVE_FLAG,
    LANG.TXT_ID,
    LANG.VERSION_NBR,
    row_number() OVER (PARTITION BY LANG.CODE ORDER BY LANG1.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ,
    CASE
      WHEN LANG1.CODE = LANG.CODE
      THEN 1e5
      ELSE LANG.DISPLAY_SEQ + 1e5
    END)) RANK
  FROM LANGUAGES LANG
  INNER JOIN TEXT_ITEMS TXI
  ON TXI.TXT_ID     = LANG.TXT_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN LANGUAGES LANG1
  ON LANG1.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_LOCATIONS AS
SELECT CODE,
  NAME,
  LANG_CODE,
  LOCT_CODE,
  COUNTRY_CODE,
  START_DATE,
  END_DATE,
  TXT_ID,
  VERSION_NBR
FROM
  (SELECT LOC.CODE,
    TXI.TEXT NAME,
    TXI.LANG_CODE,
    LOC.LOCT_CODE,
    LOC.COUNTRY_CODE,
    LOC.START_DATE,
    LOC.END_DATE,
    LOC.TXT_ID,
    LOC.VERSION_NBR,
    row_number() OVER (PARTITION BY LOC.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM LOCATIONS LOC
  INNER JOIN TEXT_ITEMS TXI
  ON TXI.TXT_ID     = LOC.TXT_ID
  AND TXI.TXTT_CODE = 'NAME'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_LOCATION_ATTRIBUTE_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DATA_TYPE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  TXT_ID,
  VERSION_NBR
FROM
  (SELECT LOCAT.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    LOCAT.DATA_TYPE,
    LOCAT.DISPLAY_SEQ,
    LOCAT.ACTIVE_FLAG,
    LOCAT.TXT_ID,
    LOCAT.VERSION_NBR,
    row_number() OVER (PARTITION BY LOCAT.CODE ORDER BY LANG.ACTIVE_FLAG, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM LOCATION_ATTRIBUTE_TYPES LOCAT
  INNER JOIN TEXT_ITEMS TXI
  ON TXI.TXT_ID     = LOCAT.TXT_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_LOCATION_RELATIONSHIP_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  TXT_ID,
  VERSION_NBR
FROM
  (SELECT LOCRT.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    LOCRT.DISPLAY_SEQ,
    LOCRT.ACTIVE_FLAG,
    LOCRT.TXT_ID,
    LOCRT.VERSION_NBR,
    row_number() OVER (PARTITION BY LOCRT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM LOCATION_RELATIONSHIP_TYPES LOCRT
  INNER JOIN TEXT_ITEMS TXI
  ON TXI.TXT_ID     = LOCRT.TXT_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_LOCATION_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  TXT_ID,
  VERSION_NBR
FROM
  (SELECT LOCT.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    LOCT.DISPLAY_SEQ,
    LOCT.ACTIVE_FLAG,
    LOCT.TXT_ID,
    LOCT.VERSION_NBR,
    row_number() OVER (PARTITION BY LOCT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM LOCATION_TYPES LOCT
  INNER JOIN TEXT_ITEMS TXI
  ON TXI.TXT_ID     = LOCT.TXT_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_MESSAGES AS
SELECT COMP_CODE,
  SEQ_NBR,
  MESSAGE,
  LANG_CODE,
  SEVERITY,
  TXT_ID,
  VERSION_NBR
FROM
  (SELECT MSG.COMP_CODE,
    MSG.SEQ_NBR,
    TXI.TEXT MESSAGE,
    TXI.LANG_CODE,
    MSG.SEVERITY,
    MSG.TXT_ID,
    MSG.VERSION_NBR,
    row_number() OVER (PARTITION BY MSG.COMP_CODE, MSG.SEQ_NBR ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM MESSAGES MSG
  INNER JOIN TEXT_ITEMS TXI
  ON TXI.TXT_ID     = MSG.TXT_ID
  AND TXI.TXTT_CODE = 'MSG'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_NAMES AS
SELECT TXT_ID,
  LANG_CODE,
  TAB_ALIAS,
  TEXT NAME
FROM
  (SELECT TXI.TXT_ID,
    TXI.LANG_CODE,
    TXI.TAB_ALIAS,
    TXI.TEXT,
    row_number() OVER (PARTITION BY TXI.TXT_ID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM TEXT_ITEMS TXI
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE    = TXI.LANG_CODE
  AND ULP.USERID      = sys_context('PSR', 'USERID')
  WHERE TXI.TXTT_CODE = 'NAME'
  AND TXI.SEQ_NBR     = 1
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_NOTES AS
SELECT TXT_ID,
  SEQ_NBR,
  LANG_CODE,
  TAB_ALIAS,
  LONG_TEXT NOTE
FROM
  (SELECT TXI.TXT_ID,
    TXI.SEQ_NBR,
    TXI.LANG_CODE,
    TXI.TAB_ALIAS,
    TXI.LONG_TEXT,
    row_number() OVER (PARTITION BY TXI.TXT_ID, TXI.SEQ_NBR ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM TEXT_ITEMS TXI
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE    = TXI.LANG_CODE
  AND ULP.USERID      = sys_context('PSR', 'USERID')
  WHERE TXI.TXTT_CODE = 'NOTE'
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_POPULATION_CATEGORIES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  TXT_ID,
  VERSION_NBR
FROM
  (SELECT POPC.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    POPC.DISPLAY_SEQ,
    POPC.ACTIVE_FLAG,
    POPC.TXT_ID,
    POPC.VERSION_NBR,
    row_number() OVER (PARTITION BY POPC.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM POPULATION_CATEGORIES POPC
  INNER JOIN TEXT_ITEMS TXI
  ON TXI.TXT_ID     = POPC.TXT_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_SEXES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  TXT_ID,
  VERSION_NBR
FROM
  (SELECT SEX.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    SEX.DISPLAY_SEQ,
    SEX.TXT_ID,
    SEX.VERSION_NBR,
    row_number() OVER (PARTITION BY SEX.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM SEXES SEX
  INNER JOIN TEXT_ITEMS TXI
  ON TXI.TXT_ID     = SEX.TXT_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_STATISTIC_GROUPS AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  TXT_ID,
  VERSION_NBR
FROM
  (SELECT STCG.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    STCG.DISPLAY_SEQ,
    STCG.ACTIVE_FLAG,
    STCG.TXT_ID,
    STCG.VERSION_NBR,
    row_number() OVER (PARTITION BY STCG.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM STATISTIC_GROUPS STCG
  INNER JOIN TEXT_ITEMS TXI
  ON TXI.TXT_ID     = STCG.TXT_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_STATISTIC_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  TXT_ID,
  VERSION_NBR
FROM
  (SELECT STCT.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    STCT.DISPLAY_SEQ,
    STCT.ACTIVE_FLAG,
    STCT.TXT_ID,
    STCT.VERSION_NBR,
    row_number() OVER (PARTITION BY STCT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM STATISTIC_TYPES STCT
  INNER JOIN TEXT_ITEMS TXI
  ON TXI.TXT_ID     = STCT.TXT_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_SYSTEM_PARAMETERS AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DATA_TYPE,
  CHAR_VALUE,
  NUM_VALUE,
  DATE_VALUE,
  TXT_ID,
  VERSION_NBR
FROM
  (SELECT SYP.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    SYP.DATA_TYPE,
    SYP.CHAR_VALUE,
    SYP.NUM_VALUE,
    SYP.DATE_VALUE,
    SYP.TXT_ID,
    SYP.VERSION_NBR,
    row_number() OVER (PARTITION BY SYP.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM SYSTEM_PARAMETERS SYP
  INNER JOIN TEXT_ITEMS TXI
  ON TXI.TXT_ID     = SYP.TXT_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_SYSTEM_USERS AS
SELECT USERID,
  NAME,
  LANG_CODE,
  LOCKED_FLAG,
  TEMPLATE_FLAG,
  TXT_ID,
  VERSION_NBR
FROM
  (SELECT USR.USERID,
    TXI.TEXT NAME,
    TXI.LANG_CODE,
    USR.LOCKED_FLAG,
    USR.TEMPLATE_FLAG,
    USR.TXT_ID,
    USR.VERSION_NBR,
    row_number() OVER (PARTITION BY USR.USERID ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM SYSTEM_USERS USR
  INNER JOIN TEXT_ITEMS TXI
  ON TXI.TXT_ID     = USR.TXT_ID
  AND TXI.TXTT_CODE = 'NAME'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_TEXT_ITEMS AS
SELECT TXT_ID,
  TXTT_CODE,
  SEQ_NBR,
  LANG_CODE,
  TAB_ALIAS,
  TEXT,
  LONG_TEXT
FROM
  (SELECT TXI.TXT_ID,
    TXI.TXTT_CODE,
    TXI.SEQ_NBR,
    TXI.LANG_CODE,
    TXI.TAB_ALIAS,
    TXI.TEXT,
    TXI.LONG_TEXT,
    row_number() OVER (PARTITION BY TXI.TXT_ID, TXI.TXTT_CODE, TXI.SEQ_NBR ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM TEXT_ITEMS TXI
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_TEXT_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  TXT_ID,
  VERSION_NBR
FROM
  (SELECT TXTT.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    TXTT.DISPLAY_SEQ,
    TXTT.ACTIVE_FLAG,
    TXTT.TXT_ID,
    TXTT.VERSION_NBR,
    row_number() OVER (PARTITION BY TXTT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM TEXT_TYPES TXTT
  INNER JOIN TEXT_ITEMS TXI
  ON TXI.TXT_ID     = TXTT.TXT_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_TIME_PERIOD_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  TXT_ID,
  VERSION_NBR
FROM
  (SELECT PERT.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    PERT.DISPLAY_SEQ,
    PERT.ACTIVE_FLAG,
    PERT.TXT_ID,
    PERT.VERSION_NBR,
    row_number() OVER (PARTITION BY PERT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM TIME_PERIOD_TYPES PERT
  INNER JOIN TEXT_ITEMS TXI
  ON TXI.TXT_ID     = PERT.TXT_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_USER_ATTRIBUTE_TYPES AS
SELECT CODE,
  DESCRIPTION,
  LANG_CODE,
  DATA_TYPE,
  DISPLAY_SEQ,
  ACTIVE_FLAG,
  TXT_ID,
  VERSION_NBR
FROM
  (SELECT UATT.CODE,
    TXI.TEXT DESCRIPTION,
    TXI.LANG_CODE,
    UATT.DATA_TYPE,
    UATT.DISPLAY_SEQ,
    UATT.ACTIVE_FLAG,
    UATT.TXT_ID,
    UATT.VERSION_NBR,
    row_number() OVER (PARTITION BY UATT.CODE ORDER BY LANG.ACTIVE_FLAG DESC, NVL(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) RANK
  FROM USER_ATTRIBUTE_TYPES UATT
  INNER JOIN TEXT_ITEMS TXI
  ON TXI.TXT_ID     = UATT.TXT_ID
  AND TXI.TXTT_CODE = 'DESCR'
  AND TXI.SEQ_NBR   = 1
  INNER JOIN LANGUAGES LANG
  ON LANG.CODE = TXI.LANG_CODE
  LEFT OUTER JOIN USER_LANGUAGE_PREFERENCES ULP
  ON ULP.LANG_CODE = TXI.LANG_CODE
  AND ULP.USERID   = sys_context('PSR', 'USERID')
  )
WHERE RANK = 1 ;



CREATE OR REPLACE VIEW L_STATISTICS AS
SELECT STC.ID,
  STC.STCT_CODE,
  STCT.DESCRIPTION STCT_DESCRIPTION,
  STC.LOC_CODE,
  LOC1.NAME LOC_NAME,
  STC.LOC_CODE_COUNTRY,
  LOC2.NAME LOC_NAME_COUNTRY,
  STC.COUNTRY_CODE,
  LOCA2.CHAR_VALUE UNHCR_COUNTRY_CODE,
  STC.LOC_CODE_ORIGIN,
  LOC3.NAME LOC_NAME_ORIGIN,
  STC.LOC_CODE_COUNTRY_ORIGIN,
  LOC4.NAME LOC_NAME_COUNTRY_ORIGIN,
  STC.COUNTRY_CODE_ORIGIN,
  LOCA4.CHAR_VALUE UNHCR_COUNTRY_CODE_ORIGIN,
  STC.PPG_ID,
  STC.POPC_CODE,
  POPC.DESCRIPTION POPC_DESCRIPTION,
  STC.PER_ID,
  PER.START_DATE PER_START_DATE,
  PER.END_DATE PER_END_DATE,
  PERT.DESCRIPTION PERT_DESCRIPTION,
  STC.SEX_CODE,
  SEX.DESCRIPTION SEX_DESCRIPTION,
  STC.AGR_ID,
  AGR.AGE_FROM,
  AGR.AGE_TO,
  AGR.DESCRIPTION AGR_DESCRIPTION,
  AGP.DESCRIPTION AGP_DESCRIPTION,
  STC.DIM_ID1,
  DIM1.DESCRIPTION DIM_DESCRIPTION1,
  DIM1.CODE DIM_CODE1,
  DIM1.DIMT_CODE DIMT_CODE1,
  DIMT1.DESCRIPTION DIMT_DESCRIPTION1,
  STC.DIM_ID2,
  DIM2.DESCRIPTION DIM_DESCRIPTION2,
  DIM2.CODE DIM_CODE2,
  DIM2.DIMT_CODE DIMT_CODE2,
  DIMT2.DESCRIPTION DIMT_DESCRIPTION2,
  STC.DIM_ID3,
  DIM3.DESCRIPTION DIM_DESCRIPTION3,
  DIM3.CODE DIM_CODE3,
  DIM3.DIMT_CODE DIMT_CODE3,
  DIMT3.DESCRIPTION DIMT_DESCRIPTION3,
  STC.DIM_ID4,
  DIM4.DESCRIPTION DIM_DESCRIPTION4,
  DIM4.CODE DIM_CODE4,
  DIM4.DIMT_CODE DIMT_CODE4,
  DIMT4.DESCRIPTION DIMT_DESCRIPTION4,
  STC.DIM_ID5,
  DIM5.DESCRIPTION DIM_DESCRIPTION5,
  DIM5.CODE DIM_CODE5,
  DIM5.DIMT_CODE DIMT_CODE5,
  DIMT5.DESCRIPTION DIMT_DESCRIPTION5,
  STC.VALUE,
  STC.TXT_ID,
  STC.VERSION_NBR
FROM STATISTICS STC
INNER JOIN L_STATISTIC_TYPES STCT
ON STCT.CODE = STC.STCT_CODE
INNER JOIN L_LOCATIONS LOC1
ON LOC1.CODE = STC.LOC_CODE
INNER JOIN L_LOCATIONS LOC2
ON LOC2.CODE = STC.LOC_CODE_COUNTRY
LEFT OUTER JOIN LOCATION_ATTRIBUTES LOCA2
ON LOCA2.LOC_CODE    = LOC2.CODE
AND LOCA2.LOCAT_CODE = 'UNHCRCC'
LEFT OUTER JOIN L_LOCATIONS LOC3
ON LOC3.CODE = STC.LOC_CODE_ORIGIN
LEFT OUTER JOIN L_LOCATIONS LOC4
ON LOC4.CODE = STC.LOC_CODE_COUNTRY_ORIGIN
LEFT OUTER JOIN LOCATION_ATTRIBUTES LOCA4
ON LOCA4.LOC_CODE    = LOC4.CODE
AND LOCA4.LOCAT_CODE = 'UNHCRCC'
LEFT OUTER JOIN L_POPULATION_CATEGORIES POPC
ON POPC.CODE = STC.POPC_CODE
LEFT OUTER JOIN TIME_PERIODS PER
ON PER.ID = STC.PER_ID
LEFT OUTER JOIN L_TIME_PERIOD_TYPES PERT
ON PERT.CODE = PER.PERT_CODE
LEFT OUTER JOIN L_SEXES SEX
ON SEX.CODE = STC.SEX_CODE
LEFT OUTER JOIN L_AGE_RANGES AGR
ON AGR.ID = STC.AGR_ID
LEFT OUTER JOIN L_AGE_PROFILES AGP
ON AGP.CODE = AGR.AGP_CODE
LEFT OUTER JOIN L_DIMENSION_VALUES DIM1
ON DIM1.ID = STC.DIM_ID1
LEFT OUTER JOIN L_DIMENSION_TYPES DIMT1
ON DIMT1.CODE = DIM1.DIMT_CODE
LEFT OUTER JOIN L_DIMENSION_VALUES DIM2
ON DIM2.ID = STC.DIM_ID2
LEFT OUTER JOIN L_DIMENSION_TYPES DIMT2
ON DIMT2.CODE = DIM2.DIMT_CODE
LEFT OUTER JOIN L_DIMENSION_VALUES DIM3
ON DIM3.ID = STC.DIM_ID3
LEFT OUTER JOIN L_DIMENSION_TYPES DIMT3
ON DIMT3.CODE = DIM3.DIMT_CODE
LEFT OUTER JOIN L_DIMENSION_VALUES DIM4
ON DIM4.ID = STC.DIM_ID4
LEFT OUTER JOIN L_DIMENSION_TYPES DIMT4
ON DIMT4.CODE = DIM4.DIMT_CODE
LEFT OUTER JOIN L_DIMENSION_VALUES DIM5
ON DIM5.ID = STC.DIM_ID5
LEFT OUTER JOIN L_DIMENSION_TYPES DIMT5
ON DIMT5.CODE = DIM5.DIMT_CODE ;



CREATE SEQUENCE AGR_SEQ ;

CREATE SEQUENCE DIM_SEQ ;

CREATE SEQUENCE LOC_SEQ 
    MAXVALUE 99999999 ;

CREATE SEQUENCE PPG_SEQ ;

CREATE SEQUENCE STC_SEQ ;

CREATE SEQUENCE STB_SEQ ;

CREATE SEQUENCE TXT_SEQ ;

CREATE SEQUENCE PER_SEQ ;



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            36
-- CREATE INDEX                             5
-- ALTER TABLE                            179
-- CREATE VIEW                             27
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           0
-- ALTER TRIGGER                            0
-- CREATE STRUCTURED TYPE                   0
-- CREATE COLLECTION TYPE                   0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          8
-- CREATE MATERIALIZED VIEW                 0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
