--
-- ASR_TABLE2
--
create or replace view ASR_TABLE2 as
with Q_ASR_TABLE2 as
 (select STATSYEAR, DST_CODE, LOC_ID_ASYLUM_COUNTRY, LOC_ID_ORIGIN_COUNTRY,
    REFPOP_START_VALUE, REFPOP_START_STC_ID, REFPOP_START_ITM_ID,
    REFPOP_AH_START_VALUE, REFPOP_AH_START_STC_ID, REFPOP_AH_START_ITM_ID,
    ARR_GRP_VALUE, ARR_GRP_STC_ID, ARR_GRP_ITM_ID,
    ARR_IND_VALUE, ARR_IND_STC_ID, ARR_IND_ITM_ID,
    ARR_RESTL_VALUE, ARR_RESTL_STC_ID, ARR_RESTL_ITM_ID,
    BIRTH_VALUE, BIRTH_STC_ID, BIRTH_ITM_ID,
    REFOTHINC_VALUE, REFOTHINC_STC_ID, REFOTHINC_ITM_ID,
    VOLREP_VALUE, VOLREP_STC_ID, VOLREP_ITM_ID,
    VOLREP_AH_VALUE, VOLREP_AH_STC_ID, VOLREP_AH_ITM_ID,
    RESTL_VALUE, RESTL_STC_ID, RESTL_ITM_ID,
    RESTL_AH_VALUE, RESTL_AH_STC_ID, RESTL_AH_ITM_ID,
    CESSATION_VALUE, CESSATION_STC_ID, CESSATION_ITM_ID,
    NATURLZN_VALUE, NATURLZN_STC_ID, NATURLZN_ITM_ID,
    DEATH_VALUE, DEATH_STC_ID, DEATH_ITM_ID,
    REFOTHDEC_VALUE, REFOTHDEC_STC_ID, REFOTHDEC_ITM_ID,
    REFPOP_END_VALUE, REFPOP_END_STC_ID, REFPOP_END_ITM_ID,
    REFPOP_AH_END_VALUE, REFPOP_AH_END_STC_ID, REFPOP_AH_END_ITM_ID
  from
   (select to_char(extract(year from STC.START_DATE)) as STATSYEAR, STC.DST_CODE,
      STC.LOC_ID_ASYLUM_COUNTRY, STC.LOC_ID_ORIGIN_COUNTRY,
      replace(STC.STCT_CODE, '-', '_') ||
        case
          when extract(day from STC.END_DATE) = 2 then '_START'
          when extract(day from STC.START_DATE) = 31 then '_END'
        end as COLUMN_NAME,
      STC.VALUE,
      STC.ID as STC_ID,
      STC.ITM_ID
    from T_STATISTIC_TYPES_IN_GROUPS STCTG
    inner join T_STATISTICS STC
      on STC.STCT_CODE = STCTG.STCT_CODE
    where STCTG.STCG_CODE = 'ASRT2')
  pivot
   (sum(VALUE) as VALUE, max(STC_ID) as STC_ID, max(ITM_ID) as ITM_ID
    for COLUMN_NAME
    in ('REFPOP_START' as REFPOP_START,
        'REFPOP_AH_START' as REFPOP_AH_START,
        'ARR_GRP' as ARR_GRP,
        'ARR_IND' as ARR_IND,
        'ARR_RESTL' as ARR_RESTL,
        'BIRTH' as BIRTH,
        'REFOTHINC' as REFOTHINC,
        'VOLREP' as VOLREP,
        'VOLREP_AH' as VOLREP_AH,
        'RESTL' as RESTL,
        'RESTL_AH' as RESTL_AH,
        'CESSATION' as CESSATION,
        'NATURLZN' as NATURLZN,
        'DEATH' as DEATH,
        'REFOTHDEC' as REFOTHDEC,
        'REFPOP_END' as REFPOP_END,
        'REFPOP_AH_END' as REFPOP_AH_END))),
--
Q_LOCATIONS as
 (select ID, NAME
  from
   (select LOC.ID, TXT.TEXT as NAME,
      row_number() over
       (partition by LOC.ID
        order by LANG.ACTIVE_FLAG desc, nvl(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) as RANK
    from T_LOCATIONS LOC
    inner join T_TEXT_ITEMS TXT
      on TXT.ITM_ID = LOC.ITM_ID
      and TXT.TXTT_CODE = 'NAME'
      and TXT.SEQ_NBR = 1
    inner join T_LANGUAGES LANG
      on LANG.CODE = TXT.LANG_CODE
    left outer join T_USER_LANGUAGE_PREFERENCES ULP
      on ULP.LANG_CODE = TXT.LANG_CODE
      and ULP.USERID = sys_context('PSR', 'USERID'))
  where RANK = 1),
--
Q_DISPLACEMENT_STATUSES as
 (select CODE, DESCRIPTION
  from
   (select DST.CODE, TXT.TEXT DESCRIPTION,
      row_number() over
       (partition by DST.CODE
        order by LANG.ACTIVE_FLAG desc, nvl(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) as RANK
    from T_DISPLACEMENT_STATUSES DST
    inner join T_TEXT_ITEMS TXT
      on TXT.ITM_ID = DST.ITM_ID
      and TXT.TXTT_CODE = 'DESCR'
      and TXT.SEQ_NBR = 1
    inner join T_LANGUAGES LANG
      on LANG.CODE = TXT.LANG_CODE
    left outer join T_USER_LANGUAGE_PREFERENCES ULP
      on ULP.LANG_CODE = TXT.LANG_CODE
      and ULP.USERID = sys_context('PSR', 'USERID'))
  where RANK = 1)
--
select AT2.STATSYEAR,
  LOCA1.CHAR_VALUE as ISO_COUNTRY_CODE,
  LOCA2.CHAR_VALUE as UNHCR_COUNTRY_CODE,
  LOC1.NAME as LOC_NAME_ASYLUM_COUNTRY,
  LOCA3.CHAR_VALUE as ISO_ORIGIN_CODE,
  LOCA4.CHAR_VALUE as UNHCR_ORIGIN_CODE,
  LOC2.NAME as LOC_NAME_ORIGIN_COUNTRY,
  AT2.DST_CODE, DST.DESCRIPTION as DST_DESCRIPTION,
  REFPOP_START_VALUE, REFPOP_START_STC_ID, REFPOP_START_ITM_ID,
  REFPOP_AH_START_VALUE, REFPOP_AH_START_STC_ID, REFPOP_AH_START_ITM_ID,
  ARR_GRP_VALUE, ARR_GRP_STC_ID, ARR_GRP_ITM_ID,
  ARR_IND_VALUE, ARR_IND_STC_ID, ARR_IND_ITM_ID,
  ARR_RESTL_VALUE, ARR_RESTL_STC_ID, ARR_RESTL_ITM_ID,
  BIRTH_VALUE, BIRTH_STC_ID, BIRTH_ITM_ID,
  REFOTHINC_VALUE, REFOTHINC_STC_ID, REFOTHINC_ITM_ID,
  case
    when coalesce(ARR_GRP_VALUE, ARR_IND_VALUE, ARR_RESTL_VALUE,
                  BIRTH_VALUE, REFOTHINC_VALUE) is not null
    then nvl(ARR_GRP_VALUE, 0) + nvl(ARR_IND_VALUE, 0) + nvl(ARR_RESTL_VALUE, 0) +
      nvl(BIRTH_VALUE, 0) + nvl(REFOTHINC_VALUE, 0)
  end TOTAL_INCREASE,
  VOLREP_VALUE, VOLREP_STC_ID, VOLREP_ITM_ID,
  VOLREP_AH_VALUE, VOLREP_AH_STC_ID, VOLREP_AH_ITM_ID,
  RESTL_VALUE, RESTL_STC_ID, RESTL_ITM_ID,
  RESTL_AH_VALUE, RESTL_AH_STC_ID, RESTL_AH_ITM_ID,
  CESSATION_VALUE, CESSATION_STC_ID, CESSATION_ITM_ID,
  NATURLZN_VALUE, NATURLZN_STC_ID, NATURLZN_ITM_ID,
  DEATH_VALUE, DEATH_STC_ID, DEATH_ITM_ID,
  REFOTHDEC_VALUE, REFOTHDEC_STC_ID, REFOTHDEC_ITM_ID,
  case
    when coalesce(VOLREP_VALUE, RESTL_VALUE, CESSATION_VALUE,
                  NATURLZN_VALUE, DEATH_VALUE, REFOTHDEC_VALUE) is not null
    then nvl(VOLREP_VALUE, 0) + nvl(RESTL_VALUE, 0) + nvl(CESSATION_VALUE, 0) +
      nvl(NATURLZN_VALUE, 0) + nvl(DEATH_VALUE, 0) + nvl(REFOTHDEC_VALUE, 0)
  end TOTAL_DECREASE,
  REFPOP_END_VALUE, REFPOP_END_STC_ID, REFPOP_END_ITM_ID,
  REFPOP_AH_END_VALUE, REFPOP_AH_END_STC_ID, REFPOP_AH_END_ITM_ID,
  PGRA1.CHAR_VALUE as SOURCE, PGRA2.CHAR_VALUE as BASIS
from Q_ASR_TABLE2 AT2
inner join Q_LOCATIONS LOC1
  on LOC1.ID = AT2.LOC_ID_ASYLUM_COUNTRY
left outer join T_LOCATION_ATTRIBUTES LOCA1
  on LOCA1.LOC_ID = LOC1.ID
  and LOCA1.LOCAT_CODE = 'IS03166A3'
left outer join T_LOCATION_ATTRIBUTES LOCA2
  on LOCA2.LOC_ID = LOC1.ID
  and LOCA2.LOCAT_CODE = 'HCRCC'
left outer join Q_LOCATIONS LOC2
  on LOC2.ID = AT2.LOC_ID_ORIGIN_COUNTRY
left outer join T_LOCATION_ATTRIBUTES LOCA3
  on LOCA3.LOC_ID = LOC2.ID
  and LOCA3.LOCAT_CODE = 'IS03166A3'
left outer join T_LOCATION_ATTRIBUTES LOCA4
  on LOCA4.LOC_ID = LOC2.ID
  and LOCA4.LOCAT_CODE = 'HCRCC'
inner join Q_DISPLACEMENT_STATUSES DST
  on DST.CODE = AT2.DST_CODE
left outer join T_POPULATION_GROUPS PGR
  on PGR.DST_CODE = AT2.DST_CODE
  and PGR.LOC_ID_ASYLUM_COUNTRY = AT2.LOC_ID_ASYLUM_COUNTRY
  and nvl(PGR.LOC_ID_ORIGIN_COUNTRY, 0) = nvl(AT2.LOC_ID_ORIGIN_COUNTRY, 0)
  and PGR.START_DATE <= trunc(to_date(AT2.STATSYEAR, 'YYYY'), 'YYYY')
  and PGR.END_DATE >= add_months(trunc(to_date(AT2.STATSYEAR, 'YYYY'), 'YYYY'), 12)
  and PGR.LOC_ID_ASYLUM is null
  and PGR.LOC_ID_ORIGIN is null
  and PGR.DIM_ID1 is null
  and PGR.DIM_ID2 is null
  and PGR.DIM_ID3 is null
  and PGR.DIM_ID4 is null
  and PGR.DIM_ID5 is null
  and PGR.SEX_CODE is null
  and PGR.AGR_ID is null
  and PGR.SEQ_NBR is null
left outer join T_POP_GROUP_ATTRIBUTES PGRA1
  on PGRA1.PGR_ID = PGR.ID
  and PGRA1.PGRAT_CODE = 'SOURCE'
left outer join T_POP_GROUP_ATTRIBUTES PGRA2
  on PGRA2.PGR_ID = PGR.ID
  and PGRA2.PGRAT_CODE = 'BASIS';

--
-- ASR_TABLE3
--
create or replace view ASR_TABLE3 as
with Q_ASR_TABLE3 as
 (select STATSYEAR, DST_CODE,
    LOC_ID_ASYLUM_COUNTRY, LOC_ID_ASYLUM, LOC_ID_ORIGIN_COUNTRY,
    DIM_ID1, DIM_ID2, PGR_ID_PRIMARY, PPG_ID,
    F0_4_VALUE, F0_4_STC_ID, F0_4_ITM_ID,
    F5_11_VALUE, F5_11_STC_ID, F5_11_ITM_ID,
    F12_17_VALUE, F12_17_STC_ID, F12_17_ITM_ID,
    F18_59_VALUE, F18_59_STC_ID, F18_59_ITM_ID,
    F60_VALUE, F60_STC_ID, F60_ITM_ID,
    FOTHER_VALUE, FOTHER_STC_ID, FOTHER_ITM_ID,
    M0_4_VALUE, M0_4_STC_ID, M0_4_ITM_ID,
    M5_11_VALUE, M5_11_STC_ID, M5_11_ITM_ID,
    M12_17_VALUE, M12_17_STC_ID, M12_17_ITM_ID,
    M18_59_VALUE, M18_59_STC_ID, M18_59_ITM_ID,
    M60_VALUE, M60_STC_ID, M60_ITM_ID,
    MOTHER_VALUE, MOTHER_STC_ID, MOTHER_ITM_ID,
    TOTAL_VALUE, TOTAL_STC_ID, TOTAL_ITM_ID
  from
   (select extract(year from STC.START_DATE) as STATSYEAR, STC.DST_CODE,
      STC.LOC_ID_ASYLUM_COUNTRY, STC.LOC_ID_ASYLUM, STC.LOC_ID_ORIGIN_COUNTRY,
      STC.DIM_ID1, STC.DIM_ID2, STC.PGR_ID_PRIMARY, STC.PPG_ID,
      STC.SEX_CODE || nvl(to_char(AGR.AGE_FROM), 'X') ||
        case when AGR.AGE_TO != 999 then '_' || to_char(AGR.AGE_TO) end as COLUMN_NAME,
      STC.VALUE,
      STC.ID as STC_ID,
      STC.ITM_ID
    from T_STATISTIC_TYPES_IN_GROUPS STCTG
    inner join T_STATISTICS STC
      on STC.STCT_CODE = STCTG.STCT_CODE
    left outer join T_AGE_RANGES AGR
      on AGR.ID = STC.AGR_ID
    where STCTG.STCG_CODE = 'ASRT3')
  pivot
   (sum(VALUE) as VALUE, max(STC_ID) as STC_ID, max(ITM_ID) as ITM_ID
    for COLUMN_NAME
    in ('F0_4' as F0_4,
        'F5_11' as F5_11,
        'F12_17' as F12_17,
        'F18_59' as F18_59,
        'F60' as F60,
        'FX' as FOTHER,
        'M0_4' as M0_4,
        'M5_11' as M5_11,
        'M12_17' as M12_17,
        'M18_59' as M18_59,
        'M60' as M60,
        'MX' as MOTHER,
        'X' as TOTAL))),
--
Q_LOCATIONS as
 (select ID, NAME, LOCT_CODE, LOCTV_ID
  from
   (select LOC.ID, TXT.TEXT as NAME, LOC.LOCT_CODE, LOC.LOCTV_ID,
      row_number() over
       (partition by LOC.ID
        order by LANG.ACTIVE_FLAG desc, nvl(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) as RANK
    from T_LOCATIONS LOC
    inner join T_TEXT_ITEMS TXT
      on TXT.ITM_ID = LOC.ITM_ID
      and TXT.TXTT_CODE = 'NAME'
      and TXT.SEQ_NBR = 1
    inner join T_LANGUAGES LANG
      on LANG.CODE = TXT.LANG_CODE
    left outer join T_USER_LANGUAGE_PREFERENCES ULP
      on ULP.LANG_CODE = TXT.LANG_CODE
      and ULP.USERID = sys_context('PSR', 'USERID'))
  where RANK = 1),
--
Q_LOCATION_TYPES as
 (select CODE, DESCRIPTION
  from
   (select LOCT.CODE, TXT.TEXT DESCRIPTION,
      row_number() over
       (partition by LOCT.CODE
        order by LANG.ACTIVE_FLAG desc, nvl(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) as RANK
    from T_LOCATION_TYPES LOCT
    inner join T_TEXT_ITEMS TXT
      on TXT.ITM_ID = LOCT.ITM_ID
      and TXT.TXTT_CODE = 'DESCR'
      and TXT.SEQ_NBR = 1
    inner join T_LANGUAGES LANG
      on LANG.CODE = TXT.LANG_CODE
    left outer join T_USER_LANGUAGE_PREFERENCES ULP
      on ULP.LANG_CODE = TXT.LANG_CODE
      and ULP.USERID = sys_context('PSR', 'USERID'))
  where RANK = 1),
--
Q_LOCATION_TYPE_VARIANTS as
 (select ID, DESCRIPTION
  from
    (select LOCTV.ID, TXT.TEXT DESCRIPTION,
      row_number() over
       (partition by LOCTV.ID
        order by LANG.ACTIVE_FLAG desc, nvl(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) as RANK
    from T_LOCATION_TYPE_VARIANTS LOCTV
    inner join T_TEXT_ITEMS TXT
      on TXT.ITM_ID = LOCTV.ITM_ID
      and TXT.TXTT_CODE = 'DESCR'
      and TXT.SEQ_NBR = 1
    inner join T_LANGUAGES LANG
      on LANG.CODE = TXT.LANG_CODE
    left outer join T_USER_LANGUAGE_PREFERENCES ULP
      on ULP.LANG_CODE = TXT.LANG_CODE
      and ULP.USERID = sys_context('PSR', 'USERID'))
  where RANK = 1),
--
Q_DIMENSION_VALUES as
 (select ID, DESCRIPTION, CODE
  from
   (select DIM.ID, TXT.TEXT DESCRIPTION, DIM.CODE,
      row_number() over
       (partition by DIM.ID
        order by LANG.ACTIVE_FLAG desc, nvl(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) as RANK
    from T_DIMENSION_VALUES DIM
    inner join T_TEXT_ITEMS TXT
      on TXT.ITM_ID = DIM.ITM_ID
      and TXT.TXTT_CODE = 'DESCR'
      and TXT.SEQ_NBR = 1
    inner join T_LANGUAGES LANG
      on LANG.CODE = TXT.LANG_CODE
    left outer join T_USER_LANGUAGE_PREFERENCES ULP
      on ULP.LANG_CODE = TXT.LANG_CODE
      and ULP.USERID = sys_context('PSR', 'USERID'))
  where RANK = 1),
--
Q_DISPLACEMENT_STATUSES as
 (select CODE, DESCRIPTION
  from
   (select DST.CODE, TXT.TEXT DESCRIPTION,
      row_number() over
       (partition by DST.CODE
        order by LANG.ACTIVE_FLAG desc, nvl(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) as RANK
    from T_DISPLACEMENT_STATUSES DST
    inner join T_TEXT_ITEMS TXT
      on TXT.ITM_ID = DST.ITM_ID
      and TXT.TXTT_CODE = 'DESCR'
      and TXT.SEQ_NBR = 1
    inner join T_LANGUAGES LANG
      on LANG.CODE = TXT.LANG_CODE
    left outer join T_USER_LANGUAGE_PREFERENCES ULP
      on ULP.LANG_CODE = TXT.LANG_CODE
      and ULP.USERID = sys_context('PSR', 'USERID'))
  where RANK = 1),
--
Q_POPULATION_PLANNING_GROUPS as
 (select ID, DESCRIPTION, PPG_CODE
  from
   (select PPG.ID, TXT.TEXT as DESCRIPTION, PPG.PPG_CODE,
      row_number() over
       (partition by PPG.ID
        order by LANG.ACTIVE_FLAG desc, nvl(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) as RANK
    from T_POPULATION_PLANNING_GROUPS PPG
    inner join T_TEXT_ITEMS TXT
    on TXT.ITM_ID = PPG.ITM_ID
    and TXT.TXTT_CODE = 'DESCR'
    and TXT.SEQ_NBR = 1
    inner join T_LANGUAGES LANG
    on LANG.CODE = TXT.LANG_CODE
    left outer join T_USER_LANGUAGE_PREFERENCES ULP
    on ULP.LANG_CODE = TXT.LANG_CODE
    and ULP.USERID = sys_context('PSR', 'USERID'))
  where RANK = 1)
--
select AT3.STATSYEAR,
  LOCA1.CHAR_VALUE as ISO_COUNTRY_CODE, LOCA2.CHAR_VALUE as UNHCR_COUNTRY_CODE,
  LOC1.NAME as LOC_NAME_ASYLUM_COUNTRY,
  LOC2.NAME as LOC_NAME_ASYLUM, nvl(LOCTV.DESCRIPTION, LOCT.DESCRIPTION) as LOC_TYPE_DESCRIPTION,
  DIM1.CODE as UR_CODE, DIM1.DESCRIPTION as UR_DESCRIPTION,
  DIM2.CODE as ACMT_CODE, DIM2.DESCRIPTION as ACMT_DESCRIPTION,
  AT3.DST_CODE, DST.DESCRIPTION as DST_DESCRIPTION,
  LOCA3.CHAR_VALUE as ISO_ORIGIN_CODE, LOCA4.CHAR_VALUE as UNHCR_ORIGIN_CODE,
  LOC3.NAME as LOC_NAME_ORIGIN_COUNTRY,
  PPG.PPG_CODE, PPG.DESCRIPTION as PPG_DESCRIPTION,
  AT3.F0_4_VALUE, AT3.F0_4_STC_ID, AT3.F0_4_ITM_ID,
  AT3.F5_11_VALUE, AT3.F5_11_STC_ID, AT3.F5_11_ITM_ID,
  AT3.F12_17_VALUE, AT3.F12_17_STC_ID, AT3.F12_17_ITM_ID,
  AT3.F18_59_VALUE, AT3.F18_59_STC_ID, AT3.F18_59_ITM_ID,
  AT3.F60_VALUE, AT3.F60_STC_ID, AT3.F60_ITM_ID,
  case
    when coalesce(AT3.F0_4_VALUE, AT3.F5_11_VALUE, AT3.F12_17_VALUE,
                  AT3.F18_59_VALUE, AT3.F60_VALUE) is not null
    then AT3.FOTHER_VALUE
  end as FOTHER_VALUE,
  case
    when coalesce(AT3.F0_4_STC_ID, AT3.F5_11_STC_ID, AT3.F12_17_STC_ID,
                  AT3.F18_59_STC_ID, AT3.F60_STC_ID) is not null
    then AT3.FOTHER_STC_ID
  end as FOTHER_STC_ID,
  case
    when coalesce(AT3.F0_4_STC_ID, AT3.F5_11_STC_ID, AT3.F12_17_STC_ID,
                  AT3.F18_59_STC_ID, AT3.F60_STC_ID) is not null
    then AT3.FOTHER_ITM_ID
  end as FOTHER_ITM_ID,
  case
    when coalesce(AT3.F0_4_STC_ID, AT3.F5_11_STC_ID, AT3.F12_17_STC_ID,
                  AT3.F18_59_STC_ID, AT3.F60_STC_ID, AT3.FOTHER_VALUE) is not null
    then nvl(AT3.F0_4_VALUE, 0) + nvl(AT3.F5_11_VALUE, 0) + nvl(AT3.F12_17_VALUE, 0) +
      nvl(AT3.F18_59_VALUE, 0) + nvl(AT3.F60_VALUE, 0) + nvl(AT3.FOTHER_VALUE, 0)
  end as FTOTAL_VALUE,
  case
    when coalesce(AT3.F0_4_STC_ID, AT3.F5_11_STC_ID, AT3.F12_17_STC_ID,
                  AT3.F18_59_STC_ID, AT3.F60_STC_ID) is null
    then AT3.FOTHER_STC_ID
  end as FTOTAL_STC_ID,
  case
    when coalesce(AT3.F0_4_STC_ID, AT3.F5_11_STC_ID, AT3.F12_17_STC_ID,
                  AT3.F18_59_STC_ID, AT3.F60_STC_ID) is null
    then AT3.FOTHER_ITM_ID
  end as FTOTAL_ITM_ID,
  AT3.M0_4_VALUE, AT3.M0_4_STC_ID, AT3.M0_4_ITM_ID,
  AT3.M5_11_VALUE, AT3.M5_11_STC_ID, AT3.M5_11_ITM_ID,
  AT3.M12_17_VALUE, AT3.M12_17_STC_ID, AT3.M12_17_ITM_ID,
  AT3.M18_59_VALUE, AT3.M18_59_STC_ID, AT3.M18_59_ITM_ID,
  AT3.M60_VALUE, AT3.M60_STC_ID, AT3.M60_ITM_ID,
  case
    when coalesce(AT3.M0_4_VALUE, AT3.M5_11_VALUE, AT3.M12_17_VALUE,
                  AT3.M18_59_VALUE, AT3.M60_VALUE) is not null
    then AT3.MOTHER_VALUE
  end as MOTHER_VALUE,
  case
    when coalesce(AT3.M0_4_STC_ID, AT3.M5_11_STC_ID, AT3.M12_17_STC_ID,
                  AT3.M18_59_STC_ID, AT3.M60_STC_ID) is not null
    then AT3.MOTHER_STC_ID
  end as MOTHER_STC_ID,
  case
    when coalesce(AT3.M0_4_STC_ID, AT3.M5_11_STC_ID, AT3.M12_17_STC_ID,
                  AT3.M18_59_STC_ID, AT3.M60_STC_ID) is not null
    then AT3.MOTHER_ITM_ID
  end as MOTHER_ITM_ID,
  case
    when coalesce(AT3.M0_4_STC_ID, AT3.M5_11_STC_ID, AT3.M12_17_STC_ID,
                  AT3.M18_59_STC_ID, AT3.M60_STC_ID, AT3.MOTHER_VALUE) is not null
    then nvl(AT3.M0_4_VALUE, 0) + nvl(AT3.M5_11_VALUE, 0) + nvl(AT3.M12_17_VALUE, 0) +
      nvl(AT3.M18_59_VALUE, 0) + nvl(AT3.M60_VALUE, 0) + nvl(AT3.MOTHER_VALUE, 0)
  end as MTOTAL_VALUE,
  case
    when coalesce(AT3.M0_4_STC_ID, AT3.M5_11_STC_ID, AT3.M12_17_STC_ID,
                  AT3.M18_59_STC_ID, AT3.M60_STC_ID) is null
    then AT3.MOTHER_STC_ID
  end as MTOTAL_STC_ID,
  case
    when coalesce(AT3.M0_4_STC_ID, AT3.M5_11_STC_ID, AT3.M12_17_STC_ID,
                  AT3.M18_59_STC_ID, AT3.M60_STC_ID) is null
    then AT3.MOTHER_ITM_ID
  end as MTOTAL_ITM_ID,
  nvl(AT3.TOTAL_VALUE,
      nvl(AT3.F0_4_VALUE, 0) + nvl(AT3.F5_11_VALUE, 0) + nvl(AT3.F12_17_VALUE, 0) +
      nvl(AT3.F18_59_VALUE, 0) + nvl(AT3.F60_VALUE, 0) + nvl(AT3.FOTHER_VALUE, 0) +
      nvl(AT3.M0_4_VALUE, 0) + nvl(AT3.M5_11_VALUE, 0) + nvl(AT3.M12_17_VALUE, 0) +
      nvl(AT3.M18_59_VALUE, 0) + nvl(AT3.M60_VALUE, 0) + nvl(AT3.MOTHER_VALUE, 0)) as TOTAL_VALUE,
  AT3.TOTAL_STC_ID, AT3.TOTAL_ITM_ID,
  PGRA.CHAR_VALUE AS BASIS
from Q_ASR_TABLE3 AT3
inner join Q_LOCATIONS LOC1
  on LOC1.ID = AT3.LOC_ID_ASYLUM_COUNTRY
left outer join T_LOCATION_ATTRIBUTES LOCA1
  on LOCA1.LOC_ID = LOC1.ID
  and LOCA1.LOCAT_CODE = 'IS03166A3'
left outer join T_LOCATION_ATTRIBUTES LOCA2
  on LOCA2.LOC_ID = LOC1.ID
  and LOCA2.LOCAT_CODE = 'HCRCC'
inner join Q_LOCATIONS LOC2
  on LOC2.ID = AT3.LOC_ID_ASYLUM
inner join Q_LOCATION_TYPES LOCT
  on LOCT.CODE = LOC2.LOCT_CODE
left outer join Q_LOCATION_TYPE_VARIANTS LOCTV
  on LOCTV.ID = LOC2.LOCTV_ID
inner join Q_DIMENSION_VALUES DIM1
  on DIM1.ID = AT3.DIM_ID1
inner join Q_DIMENSION_VALUES DIM2
  on DIM2.ID = AT3.DIM_ID2
inner join Q_DISPLACEMENT_STATUSES DST
  on DST.CODE = AT3.DST_CODE
left outer join Q_LOCATIONS LOC3
  on LOC3.ID = AT3.LOC_ID_ORIGIN_COUNTRY
left outer join T_LOCATION_ATTRIBUTES LOCA3
  on LOCA3.LOC_ID = LOC3.ID
  and LOCA3.LOCAT_CODE = 'IS03166A3'
left outer join T_LOCATION_ATTRIBUTES LOCA4
  on LOCA4.LOC_ID = LOC3.ID
  and LOCA4.LOCAT_CODE = 'HCRCC'
left outer join Q_POPULATION_PLANNING_GROUPS PPG
  on PPG.ID = AT3.PPG_ID
left outer join T_POP_GROUP_ATTRIBUTES PGRA
  on PGRA.PGR_ID = AT3.PGR_ID_PRIMARY
  and PGRA.PGRAT_CODE = 'BASIS';

--
-- COUNTRY_DISPLACED_STATISTICS
--
create or replace view COUNTRY_DISPLACED_STATISTICS as
with Q_STATISTICS as
 (select STATSYEAR, LOC_ID_ASYLUM_COUNTRY, LOC_ID_ORIGIN_COUNTRY,
    REFUGEES, REFUGEES_ASSISTED, REFUGEE_LIKE, REFUGEE_LIKE_ASSISTED,
    ASYLUM_SEEKERS, ASYLUM_SEEKERS_ASSISTED,
    IDPS, IDPS_ASSISTED, IDP_LIKE, IDP_LIKE_ASSISTED,
    RETURNED_IDPS, RETURNED_IDPS_ASSISTED,
    RETURNED_IDP_LIKE, RETURNED_IDP_LIKE_ASSISTED,
    STATELESS, STATELESS_ASSISTED, OTHERS, OTHERS_ASSISTED
  from
   (select cast(to_char(extract(year from START_DATE)) as varchar2(4)) as STATSYEAR,
      LOC_ID_ASYLUM_COUNTRY, LOC_ID_ORIGIN_COUNTRY,
      DST_CODE || '_' || replace(STCT_CODE, '-', '_') as COLUMN_NAME,
      VALUE
    from T_STATISTICS
    where STCT_CODE in
      ('REFPOP', 'REFPOP-AH', 'ASYPOP', 'ASYPOP-AH',
       'IDPPOP', 'IDPPOP-AH', 'IDPRTN', 'IDPRTN-AH',
       'STAPOP', 'STAPOP-AH', 'OOCPOP', 'OOCPOP-AH')
    and extract(day from START_DATE) = 31
    and DST_CODE IN ('REF', 'ROC', 'ASY', 'IDP', 'IOC', 'RDP', 'STA', 'OOC'))
  pivot
   (sum(VALUE)
    for COLUMN_NAME
    in ('REF_REFPOP' as REFUGEES,
        'REF_REFPOP_AH' as REFUGEES_ASSISTED,
        'ROC_REFPOP' as REFUGEE_LIKE,
        'ROC_REFPOP_AH' as REFUGEE_LIKE_ASSISTED,
        'ASY_ASYPOP' as ASYLUM_SEEKERS,
        'ASY_ASYPOP_AH' as ASYLUM_SEEKERS_ASSISTED,
        'IDP_IDPPOP' as IDPS,
        'IDP_IDPPOP_AH' as IDPS_ASSISTED,
        'IOC_IDPPOP' as IDP_LIKE,
        'IOC_IDPPOP_AH' as IDP_LIKE_ASSISTED,
        'IDP_IDPRTN' as RETURNED_IDPS,
        'IDP_IDPRTN_AH' as RETURNED_IDPS_ASSISTED,
        'IOC_IDPRTN' as RETURNED_IDP_LIKE,
        'IOC_IDPRTN_AH' as RETURNED_IDP_LIKE_ASSISTED,
        'STA_STAPOP' as STATELESS,
        'STA_STAPOP_AH' as STATELESS_ASSISTED,
        'OOC_OOCPOP' as OTHERS,
        'OOC_OOCPOP_AH' as OTHERS_ASSISTED))),
--
Q_LOCATIONS as
 (select ID, NAME
  from
   (select LOC.ID, TXT.TEXT as NAME,
      row_number() over
       (partition by LOC.ID
        order by LANG.ACTIVE_FLAG desc, nvl(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) as RANK
    from T_LOCATIONS LOC
    inner join T_TEXT_ITEMS TXT
      on TXT.ITM_ID = LOC.ITM_ID
      and TXT.TXTT_CODE = 'NAME'
      and TXT.SEQ_NBR = 1
    inner join T_LANGUAGES LANG
      on LANG.CODE = TXT.LANG_CODE
    left outer join T_USER_LANGUAGE_PREFERENCES ULP
      on ULP.LANG_CODE = TXT.LANG_CODE
      and ULP.USERID = sys_context('PSR', 'USERID'))
  where RANK = 1)
--
select STC.STATSYEAR,
  cast(LOCA1.CHAR_VALUE as varchar2(3)) as ISO_COUNTRY_CODE,
  cast(LOCA2.CHAR_VALUE as varchar2(3)) as UNHCR_COUNTRY_CODE,
  LOC1.NAME as LOC_NAME_ASYLUM_COUNTRY,
  cast(LOCA3.CHAR_VALUE as varchar2(3)) as ISO_ORIGIN_CODE,
  cast(LOCA4.CHAR_VALUE as varchar2(3)) as UNHCR_ORIGIN_CODE,
  LOC2.NAME as LOC_NAME_ORIGIN_COUNTRY,
  STC.REFUGEES, STC.REFUGEES_ASSISTED, STC.REFUGEE_LIKE, STC.REFUGEE_LIKE_ASSISTED,
  STC.ASYLUM_SEEKERS, STC.ASYLUM_SEEKERS_ASSISTED,
  STC.IDPS, STC.IDPS_ASSISTED, STC.IDP_LIKE, STC.IDP_LIKE_ASSISTED,
  case
    when coalesce(STC.RETURNED_IDPS, STC.RETURNED_IDP_LIKE) is null
    then cast(null as number)
    else nvl(STC.RETURNED_IDPS, 0) + nvl(STC.RETURNED_IDP_LIKE, 0)
  end as RETURNED_IDPS,
  case
    when coalesce(STC.RETURNED_IDPS_ASSISTED, STC.RETURNED_IDP_LIKE_ASSISTED) is null
    then cast(null as number)
    else nvl(STC.RETURNED_IDPS_ASSISTED, 0) + nvl(STC.RETURNED_IDP_LIKE_ASSISTED, 0)
  end as RETURNED_IDPS_ASSISTED,
  STC.STATELESS, STC.STATELESS_ASSISTED, STC.OTHERS, STC.OTHERS_ASSISTED
from Q_STATISTICS STC
inner join Q_LOCATIONS LOC1
  on LOC1.ID = STC.LOC_ID_ASYLUM_COUNTRY
left outer join T_LOCATION_ATTRIBUTES LOCA1
  on LOCA1.LOC_ID = LOC1.ID
  and LOCA1.LOCAT_CODE = 'IS03166A3'
left outer join T_LOCATION_ATTRIBUTES LOCA2
  on LOCA2.LOC_ID = LOC1.ID
  and LOCA2.LOCAT_CODE = 'HCRCC'
left outer join Q_LOCATIONS LOC2
  on LOC2.ID = STC.LOC_ID_ORIGIN_COUNTRY
left outer join T_LOCATION_ATTRIBUTES LOCA3
  on LOCA3.LOC_ID = LOC2.ID
  and LOCA3.LOCAT_CODE = 'IS03166A3'
left outer join T_LOCATION_ATTRIBUTES LOCA4
  on LOCA4.LOC_ID = LOC2.ID
  and LOCA4.LOCAT_CODE = 'HCRCC';

--
-- COUNTRY_RETURNED_STATISTICS
--
create or replace view COUNTRY_RETURNED_STATISTICS as
with Q_STATISTICS as
 (select STATSYEAR, LOC_ID_ASYLUM_COUNTRY, LOC_ID_ORIGIN_COUNTRY,
    REPATRIATED, REPATRIATED_ASSISTED, RETURNEES, RETURNEES_ASSISTED
  from
   (select cast(to_char(extract(year from START_DATE)) as varchar2(4)) as STATSYEAR,
      LOC_ID_ASYLUM_COUNTRY, LOC_ID_ORIGIN_COUNTRY,
      replace(STCT_CODE, '-', '_') as COLUMN_NAME,
      VALUE
    from T_STATISTICS
    where STCT_CODE in ('VOLREP', 'VOLREP-AH', 'REFRTN', 'REFRTN-AH'))
  pivot
   (sum(VALUE)
    for COLUMN_NAME
    in ('VOLREP' as REPATRIATED,
        'VOLREP-AH' as REPATRIATED_ASSISTED,
        'REFRTN' as RETURNEES,
        'REFRTN-AH' as RETURNEES_ASSISTED))),
--
Q_LOCATIONS as
 (select ID, NAME
  from
   (select LOC.ID, TXT.TEXT as NAME,
      row_number() over
       (partition by LOC.ID
        order by LANG.ACTIVE_FLAG desc, nvl(ULP.PREF_SEQ, LANG.DISPLAY_SEQ + 1e5)) as RANK
    from T_LOCATIONS LOC
    inner join T_TEXT_ITEMS TXT
      on TXT.ITM_ID = LOC.ITM_ID
      and TXT.TXTT_CODE = 'NAME'
      and TXT.SEQ_NBR = 1
    inner join T_LANGUAGES LANG
      on LANG.CODE = TXT.LANG_CODE
    left outer join T_USER_LANGUAGE_PREFERENCES ULP
      on ULP.LANG_CODE = TXT.LANG_CODE
      and ULP.USERID = sys_context('PSR', 'USERID'))
  where RANK = 1)
--
select STC.STATSYEAR,
  cast(LOCA1.CHAR_VALUE as varchar2(3)) as ISO_COUNTRY_CODE,
  cast(LOCA2.CHAR_VALUE as varchar2(3)) as UNHCR_COUNTRY_CODE,
  LOC1.NAME as LOC_NAME_ASYLUM_COUNTRY,
  cast(LOCA3.CHAR_VALUE as varchar2(3)) as ISO_ORIGIN_CODE,
  cast(LOCA4.CHAR_VALUE as varchar2(3)) as UNHCR_ORIGIN_CODE,
  LOC2.NAME as LOC_NAME_ORIGIN_COUNTRY,
  STC.REPATRIATED, STC.REPATRIATED_ASSISTED, STC.RETURNEES, STC.RETURNEES_ASSISTED,
  greatest(nvl(REPATRIATED, RETURNEES), nvl(RETURNEES, REPATRIATED)) as RETURNED,
  greatest(nvl(REPATRIATED_ASSISTED, RETURNEES_ASSISTED),
           nvl(RETURNEES_ASSISTED, REPATRIATED_ASSISTED)) as RETURNED_ASSISTED
from Q_STATISTICS STC
inner join Q_LOCATIONS LOC1
  on LOC1.ID = STC.LOC_ID_ASYLUM_COUNTRY
left outer join T_LOCATION_ATTRIBUTES LOCA1
  on LOCA1.LOC_ID = LOC1.ID
  and LOCA1.LOCAT_CODE = 'IS03166A3'
left outer join T_LOCATION_ATTRIBUTES LOCA2
  on LOCA2.LOC_ID = LOC1.ID
  and LOCA2.LOCAT_CODE = 'HCRCC'
left outer join Q_LOCATIONS LOC2
  on LOC2.ID = STC.LOC_ID_ORIGIN_COUNTRY
left outer join T_LOCATION_ATTRIBUTES LOCA3
  on LOCA3.LOC_ID = LOC2.ID
  and LOCA3.LOCAT_CODE = 'IS03166A3'
left outer join T_LOCATION_ATTRIBUTES LOCA4
  on LOCA4.LOC_ID = LOC2.ID
  and LOCA4.LOCAT_CODE = 'HCRCC';
  